begin
  class <emptyTree><<C <U <root>>>> < ()
    def self.<U <static-init>><<N <U <static-init>> $3>>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::B)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::A)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  module ::B<<C <U B>>> < ()  end
  module ::A<<C <U A>>> < ()
    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        ::Sorbet::Private::Static.<U keep_for_ide>(::A::B::C)
        <emptyTree>
      end
    end
  end
  class ::A::B::C<<C <U C>>> < (::<todo sym>)  end
  <emptyTree>
end
