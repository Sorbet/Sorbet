class <emptyTree><<C <root>>> < (::<todo sym>)
  def foo<<C <todo sym>>>(&<blk>)
    <emptyTree>
  end

  ::Sorbet::Private::Static.keep_def(<self>, :foo)

  class <emptyTree>::<C Test><<C <todo sym>>> < (::<todo sym>)
    def using_symbol<<C <todo sym>>>(&<blk>)
      1
    end

    def using_symbol_returned_by_def<<C <todo sym>>>(&<blk>)
      2
    end

    def splat_call<<C <todo sym>>>(*args, &<blk>)
      <self>.puts(args)
    end

    def splat_and_block_call<<C <todo sym>>>(foo, bar, &blk)
      <emptyTree>
    end

    def block_call<<C <todo sym>>>(&blk)
      <emptyTree>
    end

    def calling_private<<C <todo sym>>>(&<blk>)
      begin
        <self>.using_symbol()
        <self>.using_symbol()
        assigned_self = <self>
        assigned_self.using_symbol()
      end
    end

    def subsequent_visibility<<C <todo sym>>>(&<blk>)
      3
    end

    def subsequent_visibility_attr_reader<<C <todo sym>>>(&<blk>)
      @subsequent_visibility_attr_reader
    end

    ::Sorbet::Private::Static.keep_def(<self>, :using_symbol)

    <self>.private(:using_symbol)

    <self>.private(::Sorbet::Private::Static.keep_def(<self>, :using_symbol_returned_by_def))

    <self>.private(::Sorbet::Private::Static.keep_def(<self>, :splat_call))

    <self>.private(::Sorbet::Private::Static.keep_def(<self>, :splat_and_block_call))

    <self>.private(::Sorbet::Private::Static.keep_def(<self>, :block_call))

    ::Sorbet::Private::Static.keep_def(<self>, :calling_private)

    <self>.private()

    ::Sorbet::Private::Static.keep_def(<self>, :subsequent_visibility)

    ::Sorbet::Private::Static.keep_def(<self>, :subsequent_visibility_attr_reader)

    <self>.private(:subsequent_visibility)

    <self>.private(:subsequent_visibility_attr_reader)
  end

  class <emptyTree>::<C TestChild><<C <todo sym>>> < (<emptyTree>::<C Test>)
    def calling_private_in_parent<<C <todo sym>>>(&<blk>)
      begin
        <self>.using_symbol()
        <self>.using_symbol()
        assigned_self = <self>
        assigned_self.using_symbol()
      end
    end

    ::Sorbet::Private::Static.keep_def(<self>, :calling_private_in_parent)
  end

  class <emptyTree>::<C SelfReferentialPrivateMethodInvocationTest><<C <todo sym>>> < (::<todo sym>)
    def subsequent_visibility<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    <self>.private()

    ::Sorbet::Private::Static.keep_def(<self>, :subsequent_visibility)
  end

  <emptyTree>::<C Object>.new().foo()

  <emptyTree>::<C Test>.new().using_symbol()

  <emptyTree>::<C Test>.new().using_symbol_returned_by_def()

  <emptyTree>::<C Test>.new().calling_private()

  <emptyTree>::<C Test>.new().using_symbol() do ||
    123
  end

  <emptyTree>::<C Test>.new().block_call()

  <emptyTree>::<C Test>.new().block_call() do ||
    123
  end

  <emptyTree>::<C Test>.new().block_call() do |<block-pass>$2|
    <block-pass>$2.foo()
  end

  <emptyTree>::<C TestChild>.new().using_symbol()

  <emptyTree>::<C T>.unsafe(<emptyTree>::<C Test>.new()).using_symbol()

  ::<Magic>.<call-with-splat>(<emptyTree>::<C Test>.new(), :splat_call, <emptyTree>::<C T>.unsafe(nil).to_a(), nil)

  ::<Magic>.<call-with-splat-and-block>(<emptyTree>::<C Test>.new(), :splat_and_block_call, [1, "a"].to_a(), nil, nil)

  ::<Magic>.<call-with-block>(<emptyTree>::<C Test>.new(), :block_call, nil)

  <emptyTree>::<C Test>.new().subsequent_visibility()

  <emptyTree>::<C Test>.new().subsequent_visibility_attr_reader()

  <emptyTree>::<C SelfReferentialPrivateMethodInvocationTest>.new().subsequent_visibility()
end
