digraph "hard_assert.rb" {
subgraph "cluster_::Main#basic" {
    label = "::Main#basic";
    color = blue;
    "bb::Main#basic_0" [shape = invhouse];
    "bb::Main#basic_1" [shape = parallelogram];

    "bb::Main#basic_0" [
        label = "block[id=0]()\l<self>: Main = cast(<self>: NilClass, Main);\la: T.any(Integer, String) = load_arg(Main#basic#a)\l<statTemp>$7: T.class_of(String) = alias <C String>\l<statTemp>$5: T::Boolean = a: T.any(Integer, String).is_a?(<statTemp>$7: T.class_of(String))\l<statTemp>$3: NilClass = <self>: Main.hard_assert(<statTemp>$5: T::Boolean)\l<statTemp>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$11: T.class_of(String) = alias <C String>\l<statTemp>$9: Sorbet::Private::Static::Void = <statTemp>$10: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$11: T.class_of(String))\l<castTemp>$12: String = a\l<statTemp>$8: String = cast(<castTemp>$12: String, String);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#basic_0" -> "bb::Main#basic_1" [style="bold"];
    "bb::Main#basic_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#basic_1" -> "bb::Main#basic_1" [style="bold"];
}

subgraph "cluster_::Main#not" {
    label = "::Main#not";
    color = blue;
    "bb::Main#not_0" [shape = invhouse];
    "bb::Main#not_1" [shape = parallelogram];

    "bb::Main#not_0" [
        label = "block[id=0]()\l<self>: Main = cast(<self>: NilClass, Main);\la: T.nilable(String) = load_arg(Main#not#a)\l<statTemp>$6: T::Boolean = a: T.nilable(String).nil?()\l<statTemp>$5: T::Boolean = <statTemp>$6: T::Boolean.!()\l<statTemp>$3: NilClass = <self>: Main.hard_assert(<statTemp>$5: T::Boolean)\l<statTemp>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$11: T.class_of(String) = alias <C String>\l<statTemp>$9: Sorbet::Private::Static::Void = <statTemp>$10: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$11: T.class_of(String))\l<castTemp>$12: String = a\l<statTemp>$8: String = cast(<castTemp>$12: String, String);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#not_0" -> "bb::Main#not_1" [style="bold"];
    "bb::Main#not_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#not_1" -> "bb::Main#not_1" [style="bold"];
}

subgraph "cluster_::Main#with_and" {
    label = "::Main#with_and";
    color = blue;
    "bb::Main#with_and_0" [shape = invhouse];
    "bb::Main#with_and_1" [shape = parallelogram];

    "bb::Main#with_and_0" [
        label = "block[id=0]()\l<self>: Main = cast(<self>: NilClass, Main);\la: T.nilable(String) = load_arg(Main#with_and#a)\l&&$2: T::Boolean = a: T.nilable(String).nil?()\l&&$2: T::Boolean\l"
    ];

    "bb::Main#with_and_0" -> "bb::Main#with_and_2" [style="bold"];
    "bb::Main#with_and_0" -> "bb::Main#with_and_3" [style="tapered"];

    "bb::Main#with_and_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_and_1" -> "bb::Main#with_and_1" [style="bold"];
    "bb::Main#with_and_2" [
        label = "block[id=2](<self>: Main, a: NilClass)\l<statTemp>$9: Integer(1) = 1\l<statTemp>$10: Integer(1) = 1\l<statTemp>$5: T::Boolean = <statTemp>$9: Integer(1).==(<statTemp>$10: Integer(1))\l<unconditional>\l"
    ];

    "bb::Main#with_and_2" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_3" [
        label = "block[id=3](<self>: Main, a: String, &&$2: FalseClass)\l<statTemp>$5: FalseClass = &&$2\l<unconditional>\l"
    ];

    "bb::Main#with_and_3" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_4" [
        label = "block[id=4](<statTemp>$5: T::Boolean, <self>: Main, a: T.nilable(String))\l<statTemp>$3: NilClass = <self>: Main.hard_assert(<statTemp>$5: T::Boolean)\l<statTemp>$13: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$14: T.class_of(NilClass) = alias <C NilClass>\l<statTemp>$12: Sorbet::Private::Static::Void = <statTemp>$13: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$14: T.class_of(NilClass))\l<castTemp>$15: NilClass = a\l<statTemp>$11: NilClass = cast(<castTemp>$15: NilClass, NilClass);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#with_and_4" -> "bb::Main#with_and_1" [style="bold"];
}

subgraph "cluster_::Main#with_storytime" {
    label = "::Main#with_storytime";
    color = blue;
    "bb::Main#with_storytime_0" [shape = invhouse];
    "bb::Main#with_storytime_1" [shape = parallelogram];

    "bb::Main#with_storytime_0" [
        label = "block[id=0]()\l<self>: Main = cast(<self>: NilClass, Main);\l<statTemp>$4: FalseClass = false\l<hashTemp>$6: Symbol(:\"storytime\") = :\"storytime\"\l<hashTemp>$7: Integer(42) = 42\l<magic>$8: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$5: {storytime: Integer(42)} = <magic>$8: T.class_of(<Magic>).<build-hash>(<hashTemp>$6: Symbol(:\"storytime\"), <hashTemp>$7: Integer(42))\l<returnMethodTemp>$2: NilClass = <self>: Main.hard_assert(<statTemp>$4: FalseClass, <statTemp>$5: {storytime: Integer(42)})\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_0" -> "bb::Main#with_storytime_1" [style="bold"];
    "bb::Main#with_storytime_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_1" -> "bb::Main#with_storytime_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#<static-init>" {
    label = "::<Class:Main>#<static-init>";
    color = blue;
    "bb::<Class:Main>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Main>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Main>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(Main) = cast(<self>: NilClass, T.class_of(Main));\l<block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(Main).sig()\l<selfRestore>$6: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_0" -> "bb::<Class:Main>#<static-init>_2" [style="bold"];
    "bb::<Class:Main>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_1" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_2" [
        label = "block[id=2](<self>: T.class_of(Main), <selfRestore>$6: T.class_of(Main))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_2" -> "bb::<Class:Main>#<static-init>_5" [style="bold"];
    "bb::<Class:Main>#<static-init>_2" -> "bb::<Class:Main>#<static-init>_3" [style="tapered"];

    "bb::<Class:Main>#<static-init>_3" [
        label = "block[id=3](<selfRestore>$6: T.class_of(Main))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<self>: T.class_of(Main) = <selfRestore>$6\l<block-pre-call-temp>$23: Sorbet::Private::Static::Void = <self>: T.class_of(Main).sig()\l<selfRestore>$24: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_3" -> "bb::<Class:Main>#<static-init>_6" [style="bold"];
    "bb::<Class:Main>#<static-init>_5" [
        label = "block[id=5](<self>: T.class_of(Main), <selfRestore>$6: T.class_of(Main))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$13: Symbol(:\"a\") = :\"a\"\l<statTemp>$15: T.class_of(T) = alias <C T>\l<statTemp>$16: T.class_of(Integer) = alias <C Integer>\l<statTemp>$17: T.class_of(String) = alias <C String>\l<hashTemp>$14: <Type: T.any(Integer, String)> = <statTemp>$15: T.class_of(T).any(<statTemp>$16: T.class_of(Integer), <statTemp>$17: T.class_of(String))\l<magic>$18: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$12: {a: <Type: T.any(Integer, String)>} = <magic>$18: T.class_of(<Magic>).<build-hash>(<hashTemp>$13: Symbol(:\"a\"), <hashTemp>$14: <Type: T.any(Integer, String)>)\l<statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$12: {a: <Type: T.any(Integer, String)>})\l<statTemp>$19: T.class_of(NilClass) = alias <C NilClass>\l<blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.returns(<statTemp>$19: T.class_of(NilClass))\l<blockReturnTemp>$20: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_5" -> "bb::<Class:Main>#<static-init>_2" [style="bold"];
    "bb::<Class:Main>#<static-init>_6" [
        label = "block[id=6](<self>: T.class_of(Main), <selfRestore>$24: T.class_of(Main))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_6" -> "bb::<Class:Main>#<static-init>_9" [style="bold"];
    "bb::<Class:Main>#<static-init>_6" -> "bb::<Class:Main>#<static-init>_7" [style="tapered"];

    "bb::<Class:Main>#<static-init>_7" [
        label = "block[id=7](<selfRestore>$24: T.class_of(Main))\l<statTemp>$21: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<self>: T.class_of(Main) = <selfRestore>$24\l<block-pre-call-temp>$41: Sorbet::Private::Static::Void = <self>: T.class_of(Main).sig()\l<selfRestore>$42: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_7" -> "bb::<Class:Main>#<static-init>_10" [style="bold"];
    "bb::<Class:Main>#<static-init>_9" [
        label = "block[id=9](<self>: T.class_of(Main), <selfRestore>$24: T.class_of(Main))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$31: Symbol(:\"a\") = :\"a\"\l<statTemp>$33: T.class_of(T) = alias <C T>\l<statTemp>$34: T.class_of(String) = alias <C String>\l<statTemp>$35: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$32: <Type: T.nilable(String)> = <statTemp>$33: T.class_of(T).any(<statTemp>$34: T.class_of(String), <statTemp>$35: T.class_of(NilClass))\l<magic>$36: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$30: {a: <Type: T.nilable(String)>} = <magic>$36: T.class_of(<Magic>).<build-hash>(<hashTemp>$31: Symbol(:\"a\"), <hashTemp>$32: <Type: T.nilable(String)>)\l<statTemp>$28: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$30: {a: <Type: T.nilable(String)>})\l<statTemp>$37: T.class_of(NilClass) = alias <C NilClass>\l<blockReturnTemp>$27: T::Private::Methods::DeclBuilder = <statTemp>$28: T::Private::Methods::DeclBuilder.returns(<statTemp>$37: T.class_of(NilClass))\l<blockReturnTemp>$38: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <blockReturnTemp>$27: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_9" -> "bb::<Class:Main>#<static-init>_6" [style="bold"];
    "bb::<Class:Main>#<static-init>_10" [
        label = "block[id=10](<self>: T.class_of(Main), <selfRestore>$42: T.class_of(Main))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_10" -> "bb::<Class:Main>#<static-init>_13" [style="bold"];
    "bb::<Class:Main>#<static-init>_10" -> "bb::<Class:Main>#<static-init>_11" [style="tapered"];

    "bb::<Class:Main>#<static-init>_11" [
        label = "block[id=11](<selfRestore>$42: T.class_of(Main))\l<statTemp>$39: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<self>: T.class_of(Main) = <selfRestore>$42\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_11" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_13" [
        label = "block[id=13](<self>: T.class_of(Main), <selfRestore>$42: T.class_of(Main))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$49: Symbol(:\"a\") = :\"a\"\l<statTemp>$51: T.class_of(T) = alias <C T>\l<statTemp>$52: T.class_of(String) = alias <C String>\l<statTemp>$53: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$50: <Type: T.nilable(String)> = <statTemp>$51: T.class_of(T).any(<statTemp>$52: T.class_of(String), <statTemp>$53: T.class_of(NilClass))\l<magic>$54: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$48: {a: <Type: T.nilable(String)>} = <magic>$54: T.class_of(<Magic>).<build-hash>(<hashTemp>$49: Symbol(:\"a\"), <hashTemp>$50: <Type: T.nilable(String)>)\l<statTemp>$46: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$48: {a: <Type: T.nilable(String)>})\l<statTemp>$55: T.class_of(NilClass) = alias <C NilClass>\l<blockReturnTemp>$45: T::Private::Methods::DeclBuilder = <statTemp>$46: T::Private::Methods::DeclBuilder.returns(<statTemp>$55: T.class_of(NilClass))\l<blockReturnTemp>$56: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <blockReturnTemp>$45: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_13" -> "bb::<Class:Main>#<static-init>_10" [style="bold"];
}

}

