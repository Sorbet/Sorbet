digraph "hard_assert.rb" {
subgraph "cluster_::Main#basic" {
    label = "::Main#basic";
    color = blue;
    "bb::Main#basic_0" [shape = invhouse];
    "bb::Main#basic_1" [shape = parallelogram];

    "bb::Main#basic_0" [
        label = "block[id=0]()\l<U <self>>: Main = cast(<U <self>>: NilClass, Main);\l<U a>: T.any(Integer, String) = load_arg(Main#basic#a)\l<U <statTemp>>$7: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$5: T.any(TrueClass, FalseClass) = <U a>: T.any(Integer, String).<U is_a?>(<U <statTemp>>$7: T.class_of(String))\l<U <statTemp>>$3: NilClass = <U <self>>: Main.<U hard_assert>(<U <statTemp>>$5: T.any(TrueClass, FalseClass))\l<U <statTemp>>$10: T.class_of(Sorbet::Private::Static) = alias <C <U Static>>\l<U <statTemp>>$11: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$9: Sorbet::Private::Static::Void = <U <statTemp>>$10: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$11: T.class_of(String))\l<U <castTemp>>$12: String = <U a>\l<U <statTemp>>$8: String = cast(<U <castTemp>>$12: String, String);\l<U <returnMethodTemp>>$2: NilClass = nil\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#basic_0" -> "bb::Main#basic_1" [style="bold"];
    "bb::Main#basic_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#basic_1" -> "bb::Main#basic_1" [style="bold"];
}

subgraph "cluster_::Main#not" {
    label = "::Main#not";
    color = blue;
    "bb::Main#not_0" [shape = invhouse];
    "bb::Main#not_1" [shape = parallelogram];

    "bb::Main#not_0" [
        label = "block[id=0]()\l<U <self>>: Main = cast(<U <self>>: NilClass, Main);\l<U a>: T.nilable(String) = load_arg(Main#not#a)\l<U <statTemp>>$6: T.any(TrueClass, FalseClass) = <U a>: T.nilable(String).<U nil?>()\l<U <statTemp>>$5: T.any(TrueClass, FalseClass) = <U <statTemp>>$6: T.any(TrueClass, FalseClass).<U !>()\l<U <statTemp>>$3: NilClass = <U <self>>: Main.<U hard_assert>(<U <statTemp>>$5: T.any(TrueClass, FalseClass))\l<U <statTemp>>$10: T.class_of(Sorbet::Private::Static) = alias <C <U Static>>\l<U <statTemp>>$11: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$9: Sorbet::Private::Static::Void = <U <statTemp>>$10: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$11: T.class_of(String))\l<U <castTemp>>$12: String = <U a>\l<U <statTemp>>$8: String = cast(<U <castTemp>>$12: String, String);\l<U <returnMethodTemp>>$2: NilClass = nil\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#not_0" -> "bb::Main#not_1" [style="bold"];
    "bb::Main#not_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#not_1" -> "bb::Main#not_1" [style="bold"];
}

subgraph "cluster_::Main#with_and" {
    label = "::Main#with_and";
    color = blue;
    "bb::Main#with_and_0" [shape = invhouse];
    "bb::Main#with_and_1" [shape = parallelogram];

    "bb::Main#with_and_0" [
        label = "block[id=0]()\l<U <self>>: Main = cast(<U <self>>: NilClass, Main);\l<U a>: T.nilable(String) = load_arg(Main#with_and#a)\l<D <U &&> $2>: T.any(TrueClass, FalseClass) = <U a>: T.nilable(String).<U nil?>()\l<D <U &&> $2>: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Main#with_and_0" -> "bb::Main#with_and_2" [style="bold"];
    "bb::Main#with_and_0" -> "bb::Main#with_and_3" [style="tapered"];

    "bb::Main#with_and_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_and_1" -> "bb::Main#with_and_1" [style="bold"];
    "bb::Main#with_and_2" [
        label = "block[id=2](<U <self>>: Main, <U a>: NilClass)\l<U <statTemp>>$9: Integer(1) = 1\l<U <statTemp>>$10: Integer(1) = 1\l<U <statTemp>>$5: T.any(TrueClass, FalseClass) = <U <statTemp>>$9: Integer(1).<U ==>(<U <statTemp>>$10: Integer(1))\l<unconditional>\l"
    ];

    "bb::Main#with_and_2" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_3" [
        label = "block[id=3](<U <self>>: Main, <U a>: String, <D <U &&> $2>: FalseClass)\l<U <statTemp>>$5: FalseClass = <D <U &&> $2>\l<unconditional>\l"
    ];

    "bb::Main#with_and_3" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_4" [
        label = "block[id=4](<U <statTemp>>$5: T.any(TrueClass, FalseClass), <U <self>>: Main, <U a>: T.nilable(String))\l<U <statTemp>>$3: NilClass = <U <self>>: Main.<U hard_assert>(<U <statTemp>>$5: T.any(TrueClass, FalseClass))\l<U <statTemp>>$13: T.class_of(Sorbet::Private::Static) = alias <C <U Static>>\l<U <statTemp>>$14: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <statTemp>>$12: Sorbet::Private::Static::Void = <U <statTemp>>$13: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$14: T.class_of(NilClass))\l<U <castTemp>>$15: NilClass = <U a>\l<U <statTemp>>$11: NilClass = cast(<U <castTemp>>$15: NilClass, NilClass);\l<U <returnMethodTemp>>$2: NilClass = nil\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#with_and_4" -> "bb::Main#with_and_1" [style="bold"];
}

subgraph "cluster_::Main#with_storytime" {
    label = "::Main#with_storytime";
    color = blue;
    "bb::Main#with_storytime_0" [shape = invhouse];
    "bb::Main#with_storytime_1" [shape = parallelogram];

    "bb::Main#with_storytime_0" [
        label = "block[id=0]()\l<U <self>>: Main = cast(<U <self>>: NilClass, Main);\l<U <statTemp>>$4: FalseClass = false\l<U <hashTemp>>$6: Symbol(:\"storytime\") = :\"storytime\"\l<U <hashTemp>>$7: Integer(42) = 42\l<U <magic>>$8: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$5: {storytime: Integer(42)} = <U <magic>>$8: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$6: Symbol(:\"storytime\"), <U <hashTemp>>$7: Integer(42))\l<U <returnMethodTemp>>$2: NilClass = <U <self>>: Main.<U hard_assert>(<U <statTemp>>$4: FalseClass, <U <statTemp>>$5: {storytime: Integer(42)})\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_0" -> "bb::Main#with_storytime_1" [style="bold"];
    "bb::Main#with_storytime_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_1" -> "bb::Main#with_storytime_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#<static-init>" {
    label = "::<Class:Main>#<static-init>";
    color = blue;
    "bb::<Class:Main>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Main>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Main>#<static-init>_0" [
        label = "block[id=0]()\l<U <self>>: T.class_of(Main) = cast(<U <self>>: NilClass, T.class_of(Main));\l<U <block-pre-call-temp>>$5: Sorbet::Private::Static::Void = <U <self>>: T.class_of(Main).<U sig>()\l<U <selfRestore>>$6: T.class_of(Main) = <U <self>>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_0" -> "bb::<Class:Main>#<static-init>_2" [style="bold"];
    "bb::<Class:Main>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_1" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_2" [
        label = "block[id=2](<U <self>>: T.class_of(Main), <U <selfRestore>>$6: T.class_of(Main))\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_2" -> "bb::<Class:Main>#<static-init>_5" [style="bold"];
    "bb::<Class:Main>#<static-init>_2" -> "bb::<Class:Main>#<static-init>_3" [style="tapered"];

    "bb::<Class:Main>#<static-init>_3" [
        label = "block[id=3](<U <selfRestore>>$6: T.class_of(Main))\l<U <statTemp>>$3: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<U <self>>: T.class_of(Main) = <U <selfRestore>>$6\l<U <block-pre-call-temp>>$23: Sorbet::Private::Static::Void = <U <self>>: T.class_of(Main).<U sig>()\l<U <selfRestore>>$24: T.class_of(Main) = <U <self>>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_3" -> "bb::<Class:Main>#<static-init>_6" [style="bold"];
    "bb::<Class:Main>#<static-init>_5" [
        label = "block[id=5](<U <self>>: T.class_of(Main), <U <selfRestore>>$6: T.class_of(Main))\louterLoops: 1\l<U <self>>: T::Private::Methods::SigBuilder = loadSelf\l<U <hashTemp>>$13: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$15: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$16: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$17: T.class_of(String) = alias <C <U String>>\l<U <hashTemp>>$14: <Type: T.any(Integer, String)> = <U <statTemp>>$15: T.class_of(T).<U any>(<U <statTemp>>$16: T.class_of(Integer), <U <statTemp>>$17: T.class_of(String))\l<U <magic>>$18: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$12: {a: <Type: T.any(Integer, String)>} = <U <magic>>$18: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$13: Symbol(:\"a\"), <U <hashTemp>>$14: <Type: T.any(Integer, String)>)\l<U <statTemp>>$10: T::Private::Methods::SigBuilder = <U <self>>: T::Private::Methods::SigBuilder.<U params>(<U <statTemp>>$12: {a: <Type: T.any(Integer, String)>})\l<U <statTemp>>$19: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <blockReturnTemp>>$9: T::Private::Methods::SigBuilder = <U <statTemp>>$10: T::Private::Methods::SigBuilder.<U returns>(<U <statTemp>>$19: T.class_of(NilClass))\l<U <blockReturnTemp>>$20: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <U <blockReturnTemp>>$9: T::Private::Methods::SigBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_5" -> "bb::<Class:Main>#<static-init>_2" [style="bold"];
    "bb::<Class:Main>#<static-init>_6" [
        label = "block[id=6](<U <self>>: T.class_of(Main), <U <selfRestore>>$24: T.class_of(Main))\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_6" -> "bb::<Class:Main>#<static-init>_9" [style="bold"];
    "bb::<Class:Main>#<static-init>_6" -> "bb::<Class:Main>#<static-init>_7" [style="tapered"];

    "bb::<Class:Main>#<static-init>_7" [
        label = "block[id=7](<U <selfRestore>>$24: T.class_of(Main))\l<U <statTemp>>$21: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<U <self>>: T.class_of(Main) = <U <selfRestore>>$24\l<U <block-pre-call-temp>>$41: Sorbet::Private::Static::Void = <U <self>>: T.class_of(Main).<U sig>()\l<U <selfRestore>>$42: T.class_of(Main) = <U <self>>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_7" -> "bb::<Class:Main>#<static-init>_10" [style="bold"];
    "bb::<Class:Main>#<static-init>_9" [
        label = "block[id=9](<U <self>>: T.class_of(Main), <U <selfRestore>>$24: T.class_of(Main))\louterLoops: 1\l<U <self>>: T::Private::Methods::SigBuilder = loadSelf\l<U <hashTemp>>$31: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$33: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$34: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$35: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$32: <Type: T.nilable(String)> = <U <statTemp>>$33: T.class_of(T).<U any>(<U <statTemp>>$34: T.class_of(String), <U <statTemp>>$35: T.class_of(NilClass))\l<U <magic>>$36: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$30: {a: <Type: T.nilable(String)>} = <U <magic>>$36: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$31: Symbol(:\"a\"), <U <hashTemp>>$32: <Type: T.nilable(String)>)\l<U <statTemp>>$28: T::Private::Methods::SigBuilder = <U <self>>: T::Private::Methods::SigBuilder.<U params>(<U <statTemp>>$30: {a: <Type: T.nilable(String)>})\l<U <statTemp>>$37: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <blockReturnTemp>>$27: T::Private::Methods::SigBuilder = <U <statTemp>>$28: T::Private::Methods::SigBuilder.<U returns>(<U <statTemp>>$37: T.class_of(NilClass))\l<U <blockReturnTemp>>$38: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <U <blockReturnTemp>>$27: T::Private::Methods::SigBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_9" -> "bb::<Class:Main>#<static-init>_6" [style="bold"];
    "bb::<Class:Main>#<static-init>_10" [
        label = "block[id=10](<U <self>>: T.class_of(Main), <U <selfRestore>>$42: T.class_of(Main))\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:Main>#<static-init>_10" -> "bb::<Class:Main>#<static-init>_13" [style="bold"];
    "bb::<Class:Main>#<static-init>_10" -> "bb::<Class:Main>#<static-init>_11" [style="tapered"];

    "bb::<Class:Main>#<static-init>_11" [
        label = "block[id=11](<U <selfRestore>>$42: T.class_of(Main))\l<U <statTemp>>$39: Sorbet::Private::Static::Void = Solve<::<Class:Main>#<static-init>#<block>>\l<U <self>>: T.class_of(Main) = <U <selfRestore>>$42\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_11" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_13" [
        label = "block[id=13](<U <self>>: T.class_of(Main), <U <selfRestore>>$42: T.class_of(Main))\louterLoops: 1\l<U <self>>: T::Private::Methods::SigBuilder = loadSelf\l<U <hashTemp>>$49: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$51: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$52: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$53: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$50: <Type: T.nilable(String)> = <U <statTemp>>$51: T.class_of(T).<U any>(<U <statTemp>>$52: T.class_of(String), <U <statTemp>>$53: T.class_of(NilClass))\l<U <magic>>$54: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$48: {a: <Type: T.nilable(String)>} = <U <magic>>$54: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$49: Symbol(:\"a\"), <U <hashTemp>>$50: <Type: T.nilable(String)>)\l<U <statTemp>>$46: T::Private::Methods::SigBuilder = <U <self>>: T::Private::Methods::SigBuilder.<U params>(<U <statTemp>>$48: {a: <Type: T.nilable(String)>})\l<U <statTemp>>$55: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <blockReturnTemp>>$45: T::Private::Methods::SigBuilder = <U <statTemp>>$46: T::Private::Methods::SigBuilder.<U returns>(<U <statTemp>>$55: T.class_of(NilClass))\l<U <blockReturnTemp>>$56: T.noreturn = blockreturn<::<Class:Main>#<static-init>#<block>> <U <blockReturnTemp>>$45: T::Private::Methods::SigBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_13" -> "bb::<Class:Main>#<static-init>_10" [style="bold"];
}

}

