digraph "casts.rb" {
subgraph "cluster_::TestCasts#untyped" {
    label = "::TestCasts#untyped";
    color = blue;
    "bb::TestCasts#untyped_0" [shape = invhouse];
    "bb::TestCasts#untyped_1" [shape = parallelogram];

    "bb::TestCasts#untyped_0" [
        label = "block[id=0]()\l<U <self>>: TestCasts = cast(<U <self>>: NilClass, TestCasts);\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_0" -> "bb::TestCasts#untyped_1" [style="bold"];
    "bb::TestCasts#untyped_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_1" -> "bb::TestCasts#untyped_1" [style="bold"];
}

subgraph "cluster_::TestCasts#test_casts" {
    label = "::TestCasts#test_casts";
    color = blue;
    "bb::TestCasts#test_casts_0" [shape = invhouse];
    "bb::TestCasts#test_casts_1" [shape = parallelogram];

    "bb::TestCasts#test_casts_0" [
        label = "block[id=0]()\l<U <self>>: TestCasts = cast(<U <self>>: NilClass, TestCasts);\l<U <statTemp>>$5: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$6: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$4: Sorbet::Private::Static::Void = <U <statTemp>>$5: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$6: T.class_of(Integer))\l<U <castTemp>>$7: T.untyped = <U <self>>: TestCasts.<U untyped>()\l<U t>: Integer = cast(<U <castTemp>>$7: T.untyped, Integer);\l<U <statTemp>>$11: Integer(4) = 4\l<U <statTemp>>$9: Integer = <U t>: Integer.<U +>(<U <statTemp>>$11: Integer(4))\l<U <statTemp>>$14: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$15: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$13: Sorbet::Private::Static::Void = <U <statTemp>>$14: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$15: T.class_of(Integer))\l<U <castTemp>>$16: String(\"hi\") = \"hi\"\l<U t1>: Integer = cast(<U <castTemp>>$16: String(\"hi\"), Integer);\l<U <statTemp>>$19: Integer(1) = 1\l<U <statTemp>>$17: Integer = <U t1>: Integer.<U +>(<U <statTemp>>$19: Integer(1))\l<U <statTemp>>$22: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$23: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$21: Sorbet::Private::Static::Void = <U <statTemp>>$22: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$23: T.class_of(String))\l<U <castTemp>>$24: T.untyped = <U <self>>: TestCasts.<U untyped>()\l<U s>: String = cast(<U <castTemp>>$24: T.untyped, String);\l<U <statTemp>>$28: String(\"hi\") = \"hi\"\l<U <statTemp>>$26: String = <U s>: String.<U +>(<U <statTemp>>$28: String(\"hi\"))\l<U <statTemp>>$31: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$32: T.class_of(String) = alias <C <U String>>\l<U <statTemp>>$30: Sorbet::Private::Static::Void = <U <statTemp>>$31: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$32: T.class_of(String))\l<U <castTemp>>$33: Integer(6) = 6\l<U s>: String = cast(<U <castTemp>>$33: Integer(6), String);\l<U <statTemp>>$36: String(\"hi\") = \"hi\"\l<U <statTemp>>$34: String = <U s>: String.<U +>(<U <statTemp>>$36: String(\"hi\"))\l<U <statTemp>>$39: Integer(3) = 3\l<U <statTemp>>$37: String = <U s>: String.<U +>(<U <statTemp>>$39: Integer(3))\l<U <statTemp>>$42: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$43: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$41: Sorbet::Private::Static::Void = <U <statTemp>>$42: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$43: T.class_of(Integer))\l<U <castTemp>>$44: Integer(6) = 6\l<U s>: Integer = cast(<U <castTemp>>$44: Integer(6), Integer);\l<U <statTemp>>$47: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$49: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$48: T.untyped = <U <statTemp>>$49: T.class_of(T).<U untyped>()\l<U <statTemp>>$46: Sorbet::Private::Static::Void = <U <statTemp>>$47: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$48: T.untyped)\l<U <castTemp>>$50: Integer(6) = 6\l<U s>: T.untyped = cast(<U <castTemp>>$50: Integer(6), T.untyped);\l<U <statTemp>>$53: T.class_of(Sorbet::Private::Static) = alias <C <U Sorbet::Private::Static>>\l<U <statTemp>>$54: Integer(7) = 7\l<U <statTemp>>$52: Sorbet::Private::Static::Void = <U <statTemp>>$53: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$54: Integer(7))\l<U <castTemp>>$55: Integer(6) = 6\l<U s>: T.untyped = cast(<U <castTemp>>$55: Integer(6), T.untyped);\l<U <statTemp>>$58: String(\"hi\") = \"hi\"\l<U <statTemp>>$56: T.untyped = <U s>: T.untyped.<U +>(<U <statTemp>>$58: String(\"hi\"))\l<U <statTemp>>$60: Integer(3) = 3\l<U <returnMethodTemp>>$2: T.untyped = <U s>: T.untyped.<U +>(<U <statTemp>>$60: Integer(3))\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_0" -> "bb::TestCasts#test_casts_1" [style="bold"];
    "bb::TestCasts#test_casts_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_1" -> "bb::TestCasts#test_casts_1" [style="bold"];
}

}

