begin
  ::Sorbet::Private::Static.<U keep_for_ide>(::TestAttr)
  class ::TestAttr<<C <U TestAttr>>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def <U initialize><<U initialize>>(<blk>)
      begin
        <U @v1> = begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::Integer)
          T.<U let>(0, Integer)
        end
        <U @v2> = begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::String)
          T.<U let>("", String)
        end
        <U @v6> = begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::String)
          T.<U let>("", String)
        end
      end
    end

    def <U v1><<U v1>>(<blk>)
      <U @v1>
    end

    def <U v1=><<U v1=>>(v1, <blk>)
      <U @v1> = <U v1>
    end

    def <U v2><<U v2>>(<blk>)
      <U @v2>
    end

    def <U v2=><<U v2=>>(v2, <blk>)
      <U @v2> = <U v2>
    end

    def <U v3><<U v3>>(<blk>)
      <U @v3>
    end

    def <U v4=><<U v4=>>(v4, <blk>)
      <U @v4> = <U v4>
    end

    def <U v5=><<U v5=>>(v5, <blk>)
      <U @v5> = <U v5>
    end

    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        <U <self>>.<U sig>() do ||
          <U <self>>.<U void>()
        end
        <U <self>>.<U sig>() do ||
          <U <self>>.<U returns>(::Integer)
        end
        <U <self>>.<U sig>() do ||
          <U <self>>.<U params>({:"v1" => ::Integer}).<U returns>(::Integer)
        end
        <U <self>>.<U sig>() do ||
          <U <self>>.<U returns>(::String)
        end
        <U <self>>.<U sig>() do ||
          <U <self>>.<U params>({:"v2" => ::String}).<U returns>(::String)
        end
        <U <self>>.<U sig>() do ||
          <U <self>>.<U returns>(::String)
        end
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
