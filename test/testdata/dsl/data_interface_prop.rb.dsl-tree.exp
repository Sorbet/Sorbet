class <emptyTree><<C <U <root>>>> < ()
  class <emptyTree>::<C <U Other>><<C <U <todo sym>>>> < (::<todo sym>)
    <emptyTree>
  end

  class <emptyTree>::<C <U SomeDataInterface>><<C <U <todo sym>>>> < (::<todo sym>)
    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({}).<U returns>(<emptyTree>::<C <U String>>)
    end

    def <U foo><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U cast>(::T.<U unsafe>(nil), <emptyTree>::<C <U String>>)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"arg0" => <emptyTree>::<C <U String>>}).<U returns>(<emptyTree>::<C <U String>>)
    end

    def <U foo=><<C <U <todo sym>>>>(<U arg0>, &<U <blk>>)
      ::T.<U cast>(::T.<U unsafe>(nil), <emptyTree>::<C <U String>>)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"opts" => ::T.<U untyped>()}).<U returns>(::T.<U nilable>(<emptyTree>::<C <U Other>>))
    end

    def <U foo_><<C <U <todo sym>>>>(*<U opts>:, &<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"opts" => ::T.<U untyped>()}).<U returns>(<emptyTree>::<C <U Other>>)
    end

    def <U foo_!><<C <U <todo sym>>>>(*<U opts>:, &<U <blk>>)
      ::T.<U unsafe>(nil)
    end
  end

  def <U test><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      <U di> = <emptyTree>::<C <U SomeDataInterface>>.<U new>()
      <emptyTree>::<C <U T>>.<U reveal_type>(<U di>.<U foo>())
      <emptyTree>::<C <U T>>.<U reveal_type>(<U di>.<U foo_>())
      <emptyTree>::<C <U T>>.<U reveal_type>(<U di>.<U foo_!>())
    end
  end
end
