class <emptyTree><<C <root>>> < ()
  module <emptyTree>::<C Opus><<C <todo sym>>> < ()
    class <emptyTree>::<C Enum><<C <todo sym>>> < (::<todo sym>)
      def initialize<<C <todo sym>>>(x = nil, &<blk>)
        <emptyTree>
      end
    end
  end

  class <emptyTree>::<C MyEnum><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Enum>)
    <self>.extend(::T::Helpers)

    <self>.abstract!()

    <self>.sealed!()

    class <emptyTree>::<C X$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
      <self>.extend(::T::Helpers)

      <self>.include(::Singleton)

      <self>.final!()
    end

    <emptyTree>::<C X> = ::T.let(<emptyTree>::<C X$1>.instance(), <emptyTree>::<C X$1>)

    class <emptyTree>::<C Y$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
      <self>.extend(::T::Helpers)

      <self>.include(::Singleton)

      <self>.final!()
    end

    <emptyTree>::<C Y> = ::T.let(<emptyTree>::<C Y$1>.instance(), <emptyTree>::<C Y$1>)

    class <emptyTree>::<C Z$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
      <self>.extend(::T::Helpers)

      <self>.include(::Singleton)

      <self>.final!()
    end

    <emptyTree>::<C Z> = ::T.let(<emptyTree>::<C Z$1>.instance(), <emptyTree>::<C Z$1>)
  end

  class <emptyTree>::<C NotAnEnum><<C <todo sym>>> < (::<todo sym>)
    <emptyTree>::<C X> = <self>.new()

    <emptyTree>::<C Y> = <emptyTree>::<C T>.let(<self>.new(), <self>)
  end
end
