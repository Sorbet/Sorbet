class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C ComputingProps><<C <todo sym>>> < (::<todo sym>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def num_ok<<C <todo sym>>>(&<blk>)
      begin
        ::T.assert_type!(<self>.class().compute_num_ok(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")), <emptyTree>::<C Integer>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"n" => <emptyTree>::<C Integer>}).returns(<emptyTree>::<C Integer>)
    end

    def self.compute_num_ok<<C <todo sym>>>(n, &<blk>)
      10
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def missing<<C <todo sym>>>(&<blk>)
      begin
        ::T.assert_type!(<self>.class().compute_missing(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")), <emptyTree>::<C Integer>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def num_wrong_value<<C <todo sym>>>(&<blk>)
      begin
        ::T.assert_type!(<self>.class().compute_num_wrong_value(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")), <emptyTree>::<C Integer>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"inputs" => <emptyTree>::<C T>.untyped()}).returns(<emptyTree>::<C String>)
    end

    def self.compute_num_wrong_value<<C <todo sym>>>(inputs, &<blk>)
      "not_an_integer"
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def num_wrong_type<<C <todo sym>>>(&<blk>)
      begin
        ::T.assert_type!(<self>.class().compute_num_wrong_type(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")), <emptyTree>::<C Integer>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"inputs" => <emptyTree>::<C T>.untyped()}).returns(<emptyTree>::<C Integer>)
    end

    def self.compute_num_wrong_type<<C <todo sym>>>(inputs, &<blk>)
      "not_an_integer"
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C String>)
    end

    def not_a_symbol<<C <todo sym>>>(&<blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C String>)
    end

    def symbol_in_variable<<C <todo sym>>>(&<blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def num_unknown_type<<C <todo sym>>>(&<blk>)
      begin
        ::T.assert_type!(<self>.class().compute_num_unknown_type(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")), <emptyTree>::<C Integer>)
        ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      end
    end

    def self.compute_num_unknown_type<<C <todo sym>>>(inputs, &<blk>)
      <emptyTree>::<C T>.untyped()
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    ::Sorbet::Private::Static.keep_def(<self>, :"num_ok")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"compute_num_ok")

    ::Sorbet::Private::Static.keep_def(<self>, :"missing")

    ::Sorbet::Private::Static.keep_def(<self>, :"num_wrong_value")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"compute_num_wrong_value")

    ::Sorbet::Private::Static.keep_def(<self>, :"num_wrong_type")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"compute_num_wrong_type")

    ::Sorbet::Private::Static.keep_def(<self>, :"not_a_symbol")

    symbol_in_variable = :"symbol_in_variable"

    ::Sorbet::Private::Static.keep_def(<self>, :"symbol_in_variable")

    ::Sorbet::Private::Static.keep_def(<self>, :"num_unknown_type")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"compute_num_unknown_type")
  end
end
