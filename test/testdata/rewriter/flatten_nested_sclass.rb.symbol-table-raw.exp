class <C <U <root>>> < <C <U Object>> () @ (... removed core rbi locs ..., Loc {file=https://github.com/sorbet/sorbet/tree/master/bazel-out/host/genfiles/rbi/procs.rbi start=1:1 end=252:4}, Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=33:4})
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=3:8}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=9:4}
    type-member(+) <S <C <U A>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:7 end=3:8}
    method <S <C <U A>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U A>> $1><U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=4:3 end=4:15}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U A>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    type-member(+) <S <S <C <U A>> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U A>> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <C <U A>> $1>
  targs = [
    <C <U <AttachedClass>>> = A
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:7 end=3:8}
    method <S <S <C <U A>> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <S <C <U A>> $1> $1><U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=6:7 end=6:14}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <S <C <U A>> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <S <S <C <U Object>> $1> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    type-member(+) <S <S <S <C <U A>> $1> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <S <C <U A>> $1> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <S <C <U A>> $1> $1>
  targs = [
    <C <U <AttachedClass>>> = AppliedType {
        klass = <S <C <U A>> $1>
        targs = [
          <C <U <AttachedClass>>> = A
        ]
      }
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    method <S <S <S <C <U A>> $1> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=7:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U B>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=13:1 end=13:8}
    method <C <U B>><U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=14:3 end=14:10}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <C <U B>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=15:5 end=15:10}
    type-member(+) <S <C <U B>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U B>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=B) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=13:7 end=13:8}
    method <S <C <U B>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=13:1 end=19:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U B>> $1><U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=16:7 end=16:14}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U B>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=15:5 end=15:10}
    type-member(+) <S <S <C <U B>> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U B>> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <C <U B>> $1>
  targs = [
    <C <U <AttachedClass>>> = B
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=15:5 end=15:10}
    method <S <S <C <U B>> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=15:5 end=17:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U C>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:1 end=25:8}
  class <S <C <U C>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:1 end=33:4}
    type-member(+) <S <C <U C>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U C>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=C) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:7 end=25:8}
    method <S <C <U C>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U C>> $1><U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=26:3 end=26:15}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U C>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=27:5 end=27:10}
    type-member(+) <S <S <C <U C>> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U C>> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <C <U C>> $1>
  targs = [
    <C <U <AttachedClass>>> = C
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:7 end=25:8}
    method <S <S <C <U C>> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <S <C <U C>> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <S <S <C <U Object>> $1> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:7 end=28:12}
    type-member(+) <S <S <S <C <U C>> $1> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <S <C <U C>> $1> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <S <C <U C>> $1> $1>
  targs = [
    <C <U <AttachedClass>>> = AppliedType {
        klass = <S <C <U C>> $1>
        targs = [
          <C <U <AttachedClass>>> = C
        ]
      }
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=25:7 end=25:8}
    method <S <S <S <C <U C>> $1> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=27:5 end=31:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <S <S <C <U C>> $1> $1> $1><U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=29:9 end=29:16}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <S <S <C <U C>> $1> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <S <S <S <C <U Object>> $1> $1> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:7 end=28:12}
    type-member(+) <S <S <S <S <C <U C>> $1> $1> $1> $1><C <U <AttachedClass>>> -> LambdaParam(<S <S <S <S <C <U C>> $1> $1> $1> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {
  klass = <S <S <S <C <U C>> $1> $1> $1>
  targs = [
    <C <U <AttachedClass>>> = AppliedType {
        klass = <S <S <C <U C>> $1> $1>
        targs = [
          <C <U <AttachedClass>>> = AppliedType {
              klass = <S <C <U C>> $1>
              targs = [
                <C <U <AttachedClass>>> = C
              ]
            }
        ]
      }
  ]
}) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:7 end=28:12}
    method <S <S <S <S <C <U C>> $1> $1> $1> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:7 end=30:10}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}

