class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=3:1 end=150:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U AdvancedODM>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=39:1 end=39:18}
    method <C <U AdvancedODM>><U array> (<blk>) -> AppliedType {       klass = <C <U Array>>       targs = [         <C <U Elem>> = T.untyped       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=44:5 end=44:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U array=> (array, <blk>) -> AppliedType {       klass = <C <U Array>>       targs = [         <C <U Elem>> = T.untyped       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=44:5 end=44:23}
      argument array<> -> T::Array[T.untyped] @ Loc {file=test/testdata/rewriter/prop.rb start=44:11 end=44:16}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U const> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=49:5 end=49:25}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U const_explicit> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=48:5 end=48:50}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U default> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=41:5 end=41:39}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U default=> (default, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=41:5 end=41:39}
      argument default<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=41:11 end=41:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U enum_prop> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=51:5 end=51:56}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U enum_prop=> (enum_prop, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=51:5 end=51:56}
      argument enum_prop<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=51:11 end=51:20}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=53:5 end=53:49}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign=> (foreign, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=53:5 end=53:49}
      argument foreign<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=53:11 end=53:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_> (opts, <blk>) -> ForeignClass | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=53:5 end=53:49}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=53:11 end=53:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_!> (opts, <blk>) -> ForeignClass @ Loc {file=test/testdata/rewriter/prop.rb start=53:5 end=53:49}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=53:11 end=53:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_invalid> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=56:5 end=56:65}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_invalid=> (foreign_invalid, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=56:5 end=56:65}
      argument foreign_invalid<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=56:11 end=56:26}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_invalid_> (opts, <blk>) -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=56:5 end=56:65}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=56:11 end=56:26}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_invalid_!> (opts, <blk>) -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=56:5 end=56:65}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=56:11 end=56:26}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_lazy> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=54:5 end=54:59}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_lazy=> (foreign_lazy, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=54:5 end=54:59}
      argument foreign_lazy<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=54:11 end=54:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_lazy_> (opts, <blk>) -> ForeignClass | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=54:5 end=54:59}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=54:11 end=54:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_lazy_!> (opts, <blk>) -> ForeignClass @ Loc {file=test/testdata/rewriter/prop.rb start=54:5 end=54:59}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=54:11 end=54:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_proc> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=55:5 end=55:61}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_proc=> (foreign_proc, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=55:5 end=55:61}
      argument foreign_proc<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=55:11 end=55:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_proc_> (opts, <blk>) -> ForeignClass | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=55:5 end=55:61}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=55:11 end=55:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U foreign_proc_!> (opts, <blk>) -> ForeignClass @ Loc {file=test/testdata/rewriter/prop.rb start=55:5 end=55:61}
      argument opts<keyword, repeated> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=55:11 end=55:23}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U hash_of> (<blk>) -> AppliedType {       klass = <C <U Hash>>       targs = [         <C <U K>> = Symbol         <C <U V>> = String         <C <U Elem>> = TupleType {             0 = Symbol             1 = String           }       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=46:5 end=46:43}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U hash_of=> (hash_of, <blk>) -> AppliedType {       klass = <C <U Hash>>       targs = [         <C <U K>> = Symbol         <C <U V>> = String         <C <U Elem>> = TupleType {             0 = Symbol             1 = String           }       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=46:5 end=46:43}
      argument hash_of<> -> T::Hash[Symbol, String] @ Loc {file=test/testdata/rewriter/prop.rb start=46:11 end=46:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U ifunset> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=58:5 end=58:39}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U ifunset=> (ifunset, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=58:5 end=58:39}
      argument ifunset<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=58:11 end=58:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U ifunset_nilable> (<blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=59:5 end=59:58}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U ifunset_nilable=> (ifunset_nilable, <blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=59:5 end=59:58}
      argument ifunset_nilable<> -> T.nilable(String) @ Loc {file=test/testdata/rewriter/prop.rb start=59:11 end=59:26}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U t_array> (<blk>) -> AppliedType {       klass = <C <U Array>>       targs = [         <C <U Elem>> = String       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=45:5 end=45:36}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U t_array=> (t_array, <blk>) -> AppliedType {       klass = <C <U Array>>       targs = [         <C <U Elem>> = String       ]     } @ Loc {file=test/testdata/rewriter/prop.rb start=45:5 end=45:36}
      argument t_array<> -> T::Array[String] @ Loc {file=test/testdata/rewriter/prop.rb start=45:11 end=45:18}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U t_nilable> (<blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=42:5 end=42:39}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U AdvancedODM>><U t_nilable=> (t_nilable, <blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=42:5 end=42:39}
      argument t_nilable<> -> T.nilable(String) @ Loc {file=test/testdata/rewriter/prop.rb start=42:11 end=42:20}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U AdvancedODM>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/rewriter/prop.rb start=39:7 end=39:18}
    type-member(+) <S <C <U AdvancedODM>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U AdvancedODM>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=AdvancedODM) @ Loc {file=test/testdata/rewriter/prop.rb start=39:7 end=39:18}
    method <S <C <U AdvancedODM>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=39:1 end=60:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U EncryptedProp>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=84:1 end=84:20}
    method <C <U EncryptedProp>><U bar> (<blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=88:3 end=88:56}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U EncryptedProp>><U encrypted_bar> (<blk>) -> Opus::DB::Model::Mixins::Encryptable::EncryptedValue | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=88:3 end=88:56}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U EncryptedProp>><U encrypted_foo> (<blk>) -> Opus::DB::Model::Mixins::Encryptable::EncryptedValue | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=87:3 end=87:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U EncryptedProp>><U encrypted_foo=> (foo, <blk>) -> Opus::DB::Model::Mixins::Encryptable::EncryptedValue | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=87:3 end=87:22}
      argument foo<> -> T.nilable(Opus::DB::Model::Mixins::Encryptable::EncryptedValue) @ Loc {file=test/testdata/rewriter/prop.rb start=87:19 end=87:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U EncryptedProp>><U foo> (<blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=87:3 end=87:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U EncryptedProp>><U foo=> (foo, <blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=87:3 end=87:22}
      argument foo<> -> T.nilable(String) @ Loc {file=test/testdata/rewriter/prop.rb start=87:19 end=87:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U EncryptedProp>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/rewriter/prop.rb start=84:7 end=84:20}
    type-member(+) <S <C <U EncryptedProp>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U EncryptedProp>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=EncryptedProp) @ Loc {file=test/testdata/rewriter/prop.rb start=84:7 end=84:20}
    method <S <C <U EncryptedProp>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=84:1 end=89:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U EncryptedProp>> $1><DA <U encrypted_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=86:32 end=86:34}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=86:27 end=86:31}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U EncryptedProp>> $1><U encrypted_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=86:3 end=86:35}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=86:27 end=86:31}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U ForeignClass>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/prop.rb start=36:1 end=36:19}
  class <S <C <U ForeignClass>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/prop.rb start=36:7 end=36:19}
    type-member(+) <S <C <U ForeignClass>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U ForeignClass>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=ForeignClass) @ Loc {file=test/testdata/rewriter/prop.rb start=36:7 end=36:19}
    method <S <C <U ForeignClass>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=36:1 end=37:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U NotAODM>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/prop.rb start=3:1 end=3:14}
  class <S <C <U NotAODM>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/prop.rb start=3:7 end=3:14}
    type-member(+) <S <C <U NotAODM>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U NotAODM>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=NotAODM) @ Loc {file=test/testdata/rewriter/prop.rb start=3:7 end=3:14}
    method <S <C <U NotAODM>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=3:1 end=22:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U NotAODM>> $1><U prop> (args, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=4:5 end=4:25}
      argument args<repeated> @ Loc {file=test/testdata/rewriter/prop.rb start=4:20 end=4:24}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U Object>> < <C <U BasicObject>> (<C <U Kernel>>) @ Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/core/object.rbi start=removed end=removed}
    method <C <U Object>><U main> : private (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=91:1 end=91:9}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U PropHelpers>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=62:1 end=62:18}
    method <C <U PropHelpers>><U created> (<blk>) -> Numeric @ Loc {file=test/testdata/rewriter/prop.rb start=67:3 end=67:15}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U PropHelpers>><U created=> (created, <blk>) -> Numeric @ Loc {file=test/testdata/rewriter/prop.rb start=67:3 end=67:15}
      argument created<> -> Numeric @ Loc {file=test/testdata/rewriter/prop.rb start=67:3 end=67:10}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U PropHelpers>><U token> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=66:3 end=66:13}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U PropHelpers>><U token=> (token, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=66:3 end=66:13}
      argument token<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=66:3 end=66:8}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U PropHelpers>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/rewriter/prop.rb start=62:7 end=62:18}
    type-member(+) <S <C <U PropHelpers>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U PropHelpers>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=PropHelpers) @ Loc {file=test/testdata/rewriter/prop.rb start=62:7 end=62:18}
    method <S <C <U PropHelpers>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=62:1 end=68:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers>> $1><DA <U created_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=65:30 end=65:32}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=65:25 end=65:29}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers>> $1><U created_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=65:3 end=65:33}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=65:25 end=65:29}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers>> $1><DA <U token_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=64:28 end=64:30}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=64:23 end=64:27}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers>> $1><U token_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=64:3 end=64:31}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=64:23 end=64:27}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U PropHelpers2>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=70:1 end=70:19}
    method <C <U PropHelpers2>><U created> (<blk>) -> Numeric @ Loc {file=test/testdata/rewriter/prop.rb start=75:3 end=75:32}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U PropHelpers2>><U token> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=74:3 end=74:25}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U PropHelpers2>><U token=> (token, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=74:3 end=74:25}
      argument token<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=74:15 end=74:20}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U PropHelpers2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/rewriter/prop.rb start=70:7 end=70:19}
    type-member(+) <S <C <U PropHelpers2>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U PropHelpers2>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=PropHelpers2) @ Loc {file=test/testdata/rewriter/prop.rb start=70:7 end=70:19}
    method <S <C <U PropHelpers2>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=70:1 end=76:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers2>> $1><DA <U created_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=73:30 end=73:32}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=73:25 end=73:29}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers2>> $1><U created_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=73:3 end=73:33}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=73:25 end=73:29}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers2>> $1><DA <U timestamped_token_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=72:40 end=72:42}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=72:35 end=72:39}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U PropHelpers2>> $1><U timestamped_token_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=72:3 end=72:43}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=72:35 end=72:39}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U ShardingProp>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=78:1 end=78:19}
    method <C <U ShardingProp>><U merchant> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=81:3 end=81:16}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U ShardingProp>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/rewriter/prop.rb start=78:7 end=78:19}
    type-member(+) <S <C <U ShardingProp>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U ShardingProp>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=ShardingProp) @ Loc {file=test/testdata/rewriter/prop.rb start=78:7 end=78:19}
    method <S <C <U ShardingProp>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=78:1 end=82:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U ShardingProp>> $1><DA <U merchant_prop> $1> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=80:31 end=80:33}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=80:26 end=80:30}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <S <C <U ShardingProp>> $1><U merchant_prop> (opts, <blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=80:3 end=80:34}
      argument opts<optional> @ Loc {file=test/testdata/rewriter/prop.rb start=80:26 end=80:30}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <C <U SomeODM>> < <C <U Object>> (<C <U Props>>) @ Loc {file=test/testdata/rewriter/prop.rb start=24:1 end=24:14}
    method <C <U SomeODM>><U foo> (<blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=28:5 end=28:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U SomeODM>><U foo2> (<blk>) -> String | NilClass @ Loc {file=test/testdata/rewriter/prop.rb start=31:5 end=31:13}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U SomeODM>><U foo2=> (arg0, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=33:5 end=33:20}
      argument arg0<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=32:17 end=32:21}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
    method <C <U SomeODM>><U foo=> (foo, <blk>) -> String @ Loc {file=test/testdata/rewriter/prop.rb start=28:5 end=28:22}
      argument foo<> -> String @ Loc {file=test/testdata/rewriter/prop.rb start=28:11 end=28:14}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}
  class <S <C <U SomeODM>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>, <C <U Sig>>) @ Loc {file=test/testdata/rewriter/prop.rb start=24:7 end=24:14}
    type-member(+) <S <C <U SomeODM>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U SomeODM>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=SomeODM) @ Loc {file=test/testdata/rewriter/prop.rb start=24:7 end=24:14}
    method <S <C <U SomeODM>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/prop.rb start=24:1 end=34:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/prop.rb start=??? end=???}

