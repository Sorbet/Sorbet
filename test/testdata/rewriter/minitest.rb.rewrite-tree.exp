class <emptyTree><<C <root>>> < (::<todo sym>)
  def junk<<todo method>>(&<blk>)
    <emptyTree>
  end

  class <emptyTree>::<C MyTest><<C <todo sym>>> < (::<todo sym>)
    def outside_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'works outside'><<todo method>>(&<blk>)
      <self>.outside_method()
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'allows constants inside of IT'><<todo method>>(&<blk>)
      ::Module.const_set(:CONST, 10)
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'allows let-ed constants inside of IT'><<todo method>>(&<blk>)
      ::Module.const_set(:C2, <emptyTree>::<C T>.let(10, <emptyTree>::<C Integer>))
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'allows path constants inside of IT'><<todo method>>(&<blk>)
      <emptyTree>::<C C3>.new()
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it '::<Magic>.<string-interpolate>("finds errors in the test name: ", <self>.bad_variable())'><<todo method>>(&<blk>)
      <emptyTree>
    end

    def instance_helper<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def initialize<<todo method>>(&<blk>)
      begin
        @foo = <emptyTree>::<C T>.let(3, <emptyTree>::<C Integer>)
        <self>.instance_helper()
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <after><<todo method>>(&<blk>)
      begin
        @foo = nil
        <self>.instance_helper()
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'can read foo'><<todo method>>(&<blk>)
      begin
        <emptyTree>::<C T>.assert_type!(@foo, <emptyTree>::<C Integer>)
        <self>.instance_helper()
      end
    end

    def self.random_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    def self.it<<todo method>>(*args, &<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.keep_def(<self>, :outside_method, :normal)

    begin
      "works outside"
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'works outside\'>", :normal)
    end

    begin
      <emptyTree>::<C CONST> = ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      begin
        "allows constants inside of IT"
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'allows constants inside of IT\'>", :normal)
      end
    end

    begin
      <emptyTree>::<C C2> = ::T.let(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented"), <emptyTree>::<C Integer>)
      begin
        "allows let-ed constants inside of IT"
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'allows let-ed constants inside of IT\'>", :normal)
      end
    end

    begin
      <emptyTree>::<C C3> = <emptyTree>::<C Mod>::<C C>
      begin
        "allows path constants inside of IT"
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'allows path constants inside of IT\'>", :normal)
      end
    end

    begin
      ::<Magic>.<string-interpolate>("finds errors in the test name: ", <self>.bad_variable())
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'::<Magic>.<string-interpolate>(\"finds errors in the test name: \", <self>.bad_variable())\'>", :normal)
    end

    class <emptyTree>::<C <describe 'some inner tests'>><<C <todo sym>>> < (<self>)
      def inside_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'works inside'><<todo method>>(&<blk>)
        begin
          <self>.outside_method()
          <self>.inside_method()
        end
      end

      begin
        ::Sorbet::Private::Static.keep_def(<self>, :inside_method, :normal)
        begin
          "works inside"
          ::Sorbet::Private::Static.keep_def(<self>, :"<it \'works inside\'>", :normal)
        end
      end
    end

    ::Sorbet::Private::Static.keep_def(<self>, :instance_helper, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :initialize, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :<after>, :normal)

    begin
      "can read foo"
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'can read foo\'>", :normal)
    end

    ::Sorbet::Private::Static.keep_self_def(<self>, :random_method, :normal)

    <self>.random_method() do ||
      @random_method_ivar = <emptyTree>::<C T>.let(3, <emptyTree>::<C Integer>)
    end

    class <emptyTree>::<C <describe 'Object'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'Object'><<todo method>>(&<blk>)
        <emptyTree>
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'Object'><<todo method>>(&<blk>)
        <emptyTree>
      end

      begin
        begin
          <emptyTree>::<C Object>
          ::Sorbet::Private::Static.keep_def(<self>, :"<it \'Object\'>", :normal)
        end
        begin
          <emptyTree>::<C Object>
          ::Sorbet::Private::Static.keep_def(<self>, :"<it \'Object\'>", :normal)
        end
      end
    end

    ::Sorbet::Private::Static.keep_self_def(<self>, :it, :normal)

    <self>.it("ignores methods without a block")

    <self>.junk().it("ignores non-self calls") do ||
      <self>.junk()
    end

    class <emptyTree>::<C <describe 'a non-ideal situation'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'contains nested describes'><<todo method>>(&<blk>)
        <emptyTree>
      end

      begin
        class <emptyTree>::<C <describe 'nobody should write this but we should still parse it'>><<C <todo sym>>> < (<self>)
        end
        begin
          "contains nested describes"
          ::Sorbet::Private::Static.keep_def(<self>, :"<it \'contains nested describes\'>", :normal)
        end
      end
    end
  end

  ::Sorbet::Private::Static.keep_def(<self>, :junk, :normal)

  module <emptyTree>::<C Mod><<C <todo sym>>> < ()
    class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    end
  end
end
