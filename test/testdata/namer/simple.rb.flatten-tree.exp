begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::NormalClass)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::ANamespace)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::ANamespace::ClassInNamespace)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Mixin)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::OtherMixin)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Child)
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::NormalClass<<C NormalClass>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_method_def(<self>, :"normal_method")
        ::Sorbet::Private::Static.keep_class_method_def(<self>, :"normal_static_method")
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::NormalClass::InnerClass)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::NormalClass::InnerModule)
          <emptyTree>
        end
        <emptyTree>
      end
    end

    def normal_method(<blk>)
      <emptyTree>
    end

    def self.normal_static_method(<blk>)
      <emptyTree>
    end
  end
  class ::NormalClass::InnerClass<<C InnerClass>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  module ::NormalClass::InnerModule<<C InnerModule>> < ()
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  module ::ANamespace<<C ANamespace>> < ()
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::ANamespace::ObviousChild)
        <emptyTree>
      end
    end
  end
  class ::ANamespace::ObviousChild<<C ObviousChild>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::ANamespace::ClassInNamespace<<C ClassInNamespace>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Parent<<C Parent>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  module ::Mixin<<C Mixin>> < ()
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  module ::OtherMixin<<C OtherMixin>> < ()
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Child<<C Child>> < (::Parent, ::Mixin)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      begin
        <self>.include(::Mixin)
        <self>.include(<emptyTree>)
        <self>.include(::Mixin) do ||
          <emptyTree>
        end
        <self>.whatever().include(::OtherMixin)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
