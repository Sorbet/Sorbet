begin
  class <emptyTree><<C <U <root>>>> < ()
    def self.<U <static-init>><<N <U <static-init>> $3>>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::Main)
          <emptyTree>
        end
        ::Main.<U new>().<U main>()
        <emptyTree>
      end
    end
  end
  class ::Main<<C <U Main>>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def <U yielder><<U yielder>>(<blk>)
      begin
        <U a> = <U <blk>>.<U call>(1)
        <U <blk>>.<U call>(<U a>)
      end
    end

    def <U blockpass><<U blockpass>>(&blk)
      begin
        <U a> = <U blk>.<U call>(1)
        <U blk>.<U call>(<U a>)
      end
    end

    def <U mixed><<U mixed>>(&blk)
      begin
        <U a> = <U blk>.<U call>(1)
        <U blk>.<U call>(<U a>)
      end
    end

    def <U blockyield><<U blockyield>>(<blk>)
      <U <self>>.<U yielder>() do |i|
        <U <blk>>.<U call>(<U i>$1)
      end
    end

    def <U main><<U main>>(<blk>)
      begin
        <U l> = <U <self>>.<U lambda>() do |x|
          begin
            <U <self>>.<U puts>(<U x>$1)
            3
          end
        end
        ::<Magic>.<U <call-with-block>>(<U <self>>, :"yielder", <U l>)
        ::<Magic>.<U <call-with-block>>(<U <self>>, :"blockpass", <U l>)
        ::<Magic>.<U <call-with-block>>(<U <self>>, :"mixed", <U l>)
        ::<Magic>.<U <call-with-block>>(<U <self>>, :"blockyield", <U l>)
      end
    end
  end
  <emptyTree>
end
