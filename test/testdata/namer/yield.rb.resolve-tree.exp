begin
  class <emptyTree><<constant:<root>>> < ()
    def self.<static-init><<static-init>$109>()
      begin
        begin
          ::RubyTyper.keep_for_ide(::Main)
          <emptyTree>
        end
        ::Main.new().main()
        <emptyTree>
      end
    end
  end
  class ::Main<<constant:Main>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def yielder<yielder>(<blk>)
      begin
        a = <blk>.call(1)
        <blk>.call(a)
      end
    end

    def blockpass<blockpass>(blk)
      begin
        a = blk.call(1)
        blk.call(a)
      end
    end

    def mixed<mixed>(blk)
      begin
        a = blk.call(1)
        blk.call(a)
      end
    end

    def blockyield<blockyield>(<blk>)
      self(<constant:Main>).yielder() do |i$5|
        <blk>.call(i$5)
      end
    end

    def main<main>()
      begin
        l = self(<constant:Main>).lambda() do |x$7|
          begin
            self(<constant:Main>).puts(x$7)
            3
          end
        end
        self(<constant:Main>).yielder() do |*<block-pass>$2$8|
          ::<Magic>.<call-with-splat>(l.to_proc(), :"call", <block-pass>$2$8)
        end
        self(<constant:Main>).blockpass() do |*<block-pass>$3$9|
          ::<Magic>.<call-with-splat>(l.to_proc(), :"call", <block-pass>$3$9)
        end
        self(<constant:Main>).mixed() do |*<block-pass>$4$10|
          ::<Magic>.<call-with-splat>(l.to_proc(), :"call", <block-pass>$4$10)
        end
        self(<constant:Main>).blockyield() do |*<block-pass>$5$11|
          ::<Magic>.<call-with-splat>(l.to_proc(), :"call", <block-pass>$5$11)
        end
      end
    end
  end
  <emptyTree>
end
