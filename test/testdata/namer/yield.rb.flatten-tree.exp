begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Main)
          <emptyTree>
        end
        ::Main.new().main()
        <emptyTree>
      end
    end
  end
  class ::Main<<C Main>> < (::<todo sym>)
    ::Sorbet::Private::Static.keep_class_method_def(<self>, :"<static-init>")

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_method_def(<self>, :"yielder")
        ::Sorbet::Private::Static.keep_method_def(<self>, :"blockpass")
        ::Sorbet::Private::Static.keep_method_def(<self>, :"mixed")
        ::Sorbet::Private::Static.keep_method_def(<self>, :"blockyield")
        ::Sorbet::Private::Static.keep_method_def(<self>, :"main")
        <emptyTree>
      end
    end

    def yielder(<blk>)
      begin
        a = <blk>.call(1)
        <blk>.call(a)
      end
    end

    def blockpass(blk)
      begin
        a = blk.call(1)
        blk.call(a)
      end
    end

    def mixed(blk)
      begin
        a = blk.call(1)
        blk.call(a)
      end
    end

    def blockyield(<blk>)
      <self>.yielder() do |i$1|
        <blk>.call(i$1)
      end
    end

    def main(<blk>)
      begin
        l = <self>.lambda() do |x$1|
          begin
            <self>.puts(x$1)
            3
          end
        end
        ::<Magic>.<call-with-block>(<self>, :"yielder", l)
        ::<Magic>.<call-with-block>(<self>, :"blockpass", l)
        ::<Magic>.<call-with-block>(<self>, :"mixed", l)
        ::<Magic>.<call-with-block>(<self>, :"blockyield", l)
      end
    end
  end
  <emptyTree>
end
