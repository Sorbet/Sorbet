class <emptyTree><<C <root>>> < ()
  begin
    ::Sorbet::Private::Static.keep_for_ide(::NormalClass)
    class ::NormalClass<<C NormalClass>> < (::<todo sym>)
      def normal_method<normal_method>(<blk>)
        <emptyTree>
      end

      def self.normal_static_method<normal_static_method>(<blk>)
        <emptyTree>
      end

      begin
        ::Sorbet::Private::Static.keep_for_ide(::NormalClass::InnerClass)
        class ::NormalClass::InnerClass<<C InnerClass>> < (::<todo sym>)        end
      end

      begin
        ::Sorbet::Private::Static.keep_for_ide(::NormalClass::InnerModule)
        module ::NormalClass::InnerModule<<C InnerModule>> < ()        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::ANamespace)
    module ::ANamespace<<C ANamespace>> < ()
      begin
        ::Sorbet::Private::Static.keep_for_ide(::ANamespace::ObviousChild)
        class ::ANamespace::ObviousChild<<C ObviousChild>> < (::<todo sym>)        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::ANamespace::ClassInNamespace)
    class ::ANamespace::ClassInNamespace<<C ClassInNamespace>> < (::<todo sym>)    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Parent)
    class ::Parent<<C Parent>> < (::<todo sym>)    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Mixin)
    module ::Mixin<<C Mixin>> < ()    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::OtherMixin)
    module ::OtherMixin<<C OtherMixin>> < ()    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Child)
    ::Sorbet::Private::Static.keep_for_ide(::Parent)
    class ::Child<<C Child>> < (::Parent, ::Mixin)
      <self>.include(::Mixin) do ||
        <emptyTree>
      end

      <self>.whatever().include(::OtherMixin)

      ::Sorbet::Private::Static.keep_for_ide(::Mixin)
    end
  end
end
