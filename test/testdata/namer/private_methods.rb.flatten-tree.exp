begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def foo(<blk>)
      <emptyTree>
    end

    def self.<static-init><<static-init>$153>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :"foo")
        begin
          ::<Magic>.<define-top-class-or-module>(::Test)
          ::Sorbet::Private::Static.keep_for_ide(::Test)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::TestChild)
          ::Sorbet::Private::Static.keep_for_ide(::TestChild)
          ::Sorbet::Private::Static.keep_for_ide(::Test)
          <emptyTree>
        end
        ::Object.new().foo()
        ::Test.new().using_symbol()
        ::Test.new().using_symbol_returned_by_def()
        ::Test.new().calling_private()
        ::Test.new().using_symbol() do ||
          123
        end
        ::Test.new().block_call()
        ::Test.new().block_call() do ||
          123
        end
        ::Test.new().block_call() do |<block-pass>$2$3|
          <block-pass>$2$3.foo()
        end
        ::TestChild.new().using_symbol()
        ::T.unsafe(::Test.new()).using_symbol()
        ::<Magic>.<call-with-splat>(::Test.new(), :"splat_call", ::T.unsafe(nil).to_a())
        ::<Magic>.<call-with-splat-and-block>(::Test.new(), :"splat_and_block_call", [1, "a"].to_a(), nil)
        ::<Magic>.<call-with-block>(::Test.new(), :"block_call", nil)
        ::Test.new().subsequent_visibility()
        <emptyTree>
      end
    end
  end
  class ::Test<<C Test>> < (::<todo sym>)
    def using_symbol(<blk>)
      1
    end

    def using_symbol_returned_by_def(<blk>)
      2
    end

    def splat_call(args, <blk>)
      <self>.puts(args)
    end

    def splat_and_block_call(foo, bar, blk)
      <emptyTree>
    end

    def block_call(blk)
      <emptyTree>
    end

    def calling_private(<blk>)
      begin
        <self>.using_symbol()
        <self>.using_symbol()
        assigned_self = <self>
        assigned_self.using_symbol()
      end
    end

    def subsequent_visibility(<blk>)
      3
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :"using_symbol")
        <self>.private(:"using_symbol")
        <self>.private(::Sorbet::Private::Static.keep_def(<self>, :"using_symbol_returned_by_def"))
        <self>.private(::Sorbet::Private::Static.keep_def(<self>, :"splat_call"))
        <self>.private(::Sorbet::Private::Static.keep_def(<self>, :"splat_and_block_call"))
        <self>.private(::Sorbet::Private::Static.keep_def(<self>, :"block_call"))
        ::Sorbet::Private::Static.keep_def(<self>, :"calling_private")
        ::Sorbet::Private::Static.keep_def(<self>, :"subsequent_visibility")
        <self>.private(:"subsequent_visibility")
        <emptyTree>
      end
    end
  end
  class ::TestChild<<C TestChild>> < (::Test)
    def calling_private_in_parent(<blk>)
      begin
        <self>.using_symbol()
        <self>.using_symbol()
        assigned_self = <self>
        assigned_self.using_symbol()
      end
    end

    def self.<static-init>(<blk>)
      ::Sorbet::Private::Static.keep_def(<self>, :"calling_private_in_parent")
    end
  end
  <emptyTree>
end
