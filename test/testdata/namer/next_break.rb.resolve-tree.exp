begin
  ::Sorbet::Private::Static.keep_for_ide(::Test)
  class ::Test<<C Test>> < (::<todo sym>)
    def test_next_break<test_next_break>(<blk>)
      <self>.each() do ||
        begin
          if <self>.rand()
            next(Unresolved: <emptyTree>::<C Foo>)
          else
            <emptyTree>
          end
          if <self>.rand()
            break(Unresolved: <emptyTree>::<C Bar>)
          else
            <emptyTree>
          end
        end
      end
    end
  end
end
