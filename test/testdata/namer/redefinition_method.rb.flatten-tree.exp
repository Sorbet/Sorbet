begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::Main)
        <emptyTree>
      end
    end
  end
  class ::Main<<C Main>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init>(<blk>)
      begin
        <self>.extend(::T::Sig)
        <self>.sig() do ||
          <self>.params({:"a" => ::Integer}).returns(::Integer)
        end
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
      end
    end

    def foo<foo$1>(a, <blk>)
      a
    end

    def foo<foo$2>(a, b, <blk>)
      <emptyTree>
    end

    def foo(a, b, c, <blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
