begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    :"<static-init>"

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::A)
        <emptyTree>
      end
    end
  end
  module ::A<<C A>> < ()
    :"<static-init>"

    def self.<static-init>(<blk>)
      begin
        :"Foo"
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::A::Foo)
          <emptyTree>
        end
        <emptyTree>
      end
    end

    def Foo(<blk>)
      <emptyTree>
    end
  end
  class ::A::Foo<<C Foo>> < (::<todo sym>)
    :"<static-init>"

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
