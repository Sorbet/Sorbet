InsSeq{
  stats = [
    EmptyTree
    ClassDef{
      kind = class
      name = EmptyTree<<C <U <root>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet::Private::Static
          }
          fun = <U keep_class_method_def>
          block = nullptr
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :"<static-init>" }
          ]
        }

        MethodDef{
          flags = self
          name = <U <static-init>><<N <U <static-init>> $CENSORED>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::Sorbet::Private::Static
            }
            fun = <U keep_method_def>
            block = nullptr
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :"foo" }
            ]
          }
        }

        MethodDef{
          flags = 0
          name = <U foo><<U foo>>
          args = [Local{
              localVariable = <U a>
            }, Local{
              localVariable = <U <blk>>
            }]
          rhs = Assign{
            lhs = UnresolvedIdent{
              kind = Instance
              name = <U @a>
            }
            rhs = Local{
              localVariable = <U a>
            }
          }
        }
      ]
    }
  ],
  expr = EmptyTree
}
