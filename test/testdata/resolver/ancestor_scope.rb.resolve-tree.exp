begin
  class <emptyTree><<C <U <root>>>> < ()
    def self.<U <static-init>><<N <U <static-init>> $3>>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::Other)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::Test)
          ::Sorbet::Private::Static.<U keep_for_ide>(::Other)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::Test::Mixin)
          T.<U assert_type!>(::Test.<U new>(), Test::Mixin)
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::Test::Other)
          T.<U assert_type!>(::Test.<U new>(), Test::Other)
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_typechecking>(::Other)
          T.<U assert_type!>(::Test.<U new>(), Other)
        end
        <emptyTree>
      end
    end
  end
  class ::Other<<C <U Other>>> < (::<todo sym>)  end
  class ::Test<<C <U Test>>> < (::Other, ::Test::Mixin, ::Test::Other)
    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::Test::Mixin)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::Test::Other)
          <emptyTree>
        end
        ::Sorbet::Private::Static.<U keep_for_ide>(::Test::Mixin)
        ::Sorbet::Private::Static.<U keep_for_ide>(::Test::Other)
        <emptyTree>
      end
    end
  end
  module ::Test::Mixin<<C <U Mixin>>> < ()  end
  module ::Test::Other<<C <U Other>>> < ()  end
  <emptyTree>
end
