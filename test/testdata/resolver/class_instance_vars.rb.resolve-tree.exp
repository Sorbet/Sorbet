class <emptyTree><<C <root>>> < ()
  begin
    ::Sorbet::Private::Static.keep_for_ide(::Parent)
    class ::Parent<<C Parent>> < (::<todo sym>)
      def initialize<initialize>(<blk>)
        begin
          @ivar = begin
            ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
            T.let(1, Integer)
          end
          @ivar2 = begin
            ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
            T.let(2, Integer)
          end
        end
      end

      @@class_var = begin
        ::Sorbet::Private::Static.keep_for_typechecking(::String)
        T.let("hi", String)
      end

      def hi<hi>(<blk>)
        begin
          @ivar = 1
          @ivar2
        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Mixin)
    module ::Mixin<<C Mixin>> < ()
      @@mixin_cvar = begin
        ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
        T.let(3, Integer)
      end

      @@mixin_cvar
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Child)
    ::Sorbet::Private::Static.keep_for_ide(::Parent)
    class ::Child<<C Child>> < (::Parent, ::Mixin)
      @@class_var

      @@mixin_cvar

      @@undefined_cvar

      def child_method<child_method>(<blk>)
        begin
          @@class_var
          @@mixin_cvar
          @ivar2
          @undefinedivar
        end
      end

      ::Sorbet::Private::Static.keep_for_ide(::Mixin)
    end
  end

  ::Alias = ::Parent

  begin
    ::Sorbet::Private::Static.keep_for_ide(::Child1)
    ::Sorbet::Private::Static.keep_for_ide(::Alias)
    class ::Child1<<C Child1>> < (::Alias)
      @@class_var
    end
  end
end
