digraph "rescue_complex.rb" {
subgraph "cluster_::TestRescue#meth" {
    label = "::TestRescue#meth";
    color = blue;
    "bb::TestRescue#meth_0" [shape = invhouse];
    "bb::TestRescue#meth_1" [shape = parallelogram];

    "bb::TestRescue#meth_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <returnMethodTemp>>$2: Integer(0) = 0\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_0" -> "bb::TestRescue#meth_1" [style="bold"];
    "bb::TestRescue#meth_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_1" -> "bb::TestRescue#meth_1" [style="bold"];
}

subgraph "cluster_::TestRescue#foo" {
    label = "::TestRescue#foo";
    color = blue;
    "bb::TestRescue#foo_0" [shape = invhouse];
    "bb::TestRescue#foo_1" [shape = parallelogram];

    "bb::TestRescue#foo_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <returnMethodTemp>>$2: Integer(1) = 1\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(1)\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_0" -> "bb::TestRescue#foo_1" [style="bold"];
    "bb::TestRescue#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_1" -> "bb::TestRescue#foo_1" [style="bold"];
}

subgraph "cluster_::TestRescue#bar" {
    label = "::TestRescue#bar";
    color = blue;
    "bb::TestRescue#bar_0" [shape = invhouse];
    "bb::TestRescue#bar_1" [shape = parallelogram];

    "bb::TestRescue#bar_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <returnMethodTemp>>$2: Integer(2) = 2\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(2)\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_0" -> "bb::TestRescue#bar_1" [style="bold"];
    "bb::TestRescue#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_1" -> "bb::TestRescue#bar_1" [style="bold"];
}

subgraph "cluster_::TestRescue#baz" {
    label = "::TestRescue#baz";
    color = blue;
    "bb::TestRescue#baz_0" [shape = invhouse];
    "bb::TestRescue#baz_1" [shape = parallelogram];

    "bb::TestRescue#baz_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <returnMethodTemp>>$2: Integer(3) = 3\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(3)\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_0" -> "bb::TestRescue#baz_1" [style="bold"];
    "bb::TestRescue#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_1" -> "bb::TestRescue#baz_1" [style="bold"];
}

subgraph "cluster_::TestRescue#take_arg" {
    label = "::TestRescue#take_arg";
    color = blue;
    "bb::TestRescue#take_arg_0" [shape = invhouse];
    "bb::TestRescue#take_arg_1" [shape = parallelogram];

    "bb::TestRescue#take_arg_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U x>: T.untyped = load_arg(TestRescue#take_arg#x)\l<U <returnMethodTemp>>$2: T.untyped = <U x>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_0" -> "bb::TestRescue#take_arg_1" [style="bold"];
    "bb::TestRescue#take_arg_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_1" -> "bb::TestRescue#take_arg_1" [style="bold"];
}

subgraph "cluster_::TestRescue#initialize" {
    label = "::TestRescue#initialize";
    color = blue;
    "bb::TestRescue#initialize_0" [shape = invhouse];
    "bb::TestRescue#initialize_1" [shape = parallelogram];

    "bb::TestRescue#initialize_0" [
        label = "block[id=0]()\l<U @ex>$3: T.nilable(StandardError) = alias <U @ex>\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <statTemp>>$5: T.class_of(RubyTyper) = alias <C <U RubyTyper>>\l<U <statTemp>>$7: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$8: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <statTemp>>$6: <Type: T.nilable(StandardError)> = <U <statTemp>>$7: T.class_of(T).<U nilable>(<U <statTemp>>$8: T.class_of(StandardError))\l<U <statTemp>>$4: RubyTyper::Void = <U <statTemp>>$5: T.class_of(RubyTyper).<U keep_for_typechecking>(<U <statTemp>>$6: <Type: T.nilable(StandardError)>)\l<U <castTemp>>$9: NilClass = nil\l<U @ex>$3: T.nilable(StandardError) = cast(<U <castTemp>>$9: NilClass, StandardError | NilClass);\l<U <returnMethodTemp>>$2: T.nilable(StandardError) = <U @ex>$3\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.nilable(StandardError)\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_0" -> "bb::TestRescue#initialize_1" [style="bold"];
    "bb::TestRescue#initialize_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_1" -> "bb::TestRescue#initialize_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue" {
    label = "::TestRescue#multiple_rescue";
    color = blue;
    "bb::TestRescue#multiple_rescue_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_1" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_9" [style="tapered"];

    "bb::TestRescue#multiple_rescue_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_6" [style="tapered"];

    "bb::TestRescue#multiple_rescue_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$12: NilClass)\l<U <gotoDeadTemp>>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U baz>()\l<U <gotoDeadTemp>>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $3>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$9: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$10: T.untyped = <D <U <rescueTemp>> $3>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$9: T.class_of(StandardError))\l<U <isaCheckTemp>>$10: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_9" -> "bb::TestRescue#multiple_rescue_10" [style="bold"];
    "bb::TestRescue#multiple_rescue_9" -> "bb::TestRescue#multiple_rescue_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_10" [
        label = "block[id=10](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_10" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_10" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_11" [
        label = "block[id=11](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$12: TrueClass(true) = true\l<U <gotoDeadTemp>>$12: TrueClass(true)\l"
    ];

    "bb::TestRescue#multiple_rescue_11" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_11" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_12" [
        label = "block[id=12](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_12" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue_classes" {
    label = "::TestRescue#multiple_rescue_classes";
    color = blue;
    "bb::TestRescue#multiple_rescue_classes_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_classes_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_classes_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_1" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped)\l<U baz>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.untyped = alias <C <U T.untyped>>\l<U <isaCheckTemp>>$7: T.untyped = <U baz>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.untyped)\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_9" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_6" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$10: NilClass)\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_8" [
        label = "block[id=8](<U baz>: T.untyped)\l<U <returnMethodTemp>>$2: T.untyped = <U baz>\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped, <U baz>: T.untyped)\l<U <exceptionClassTemp>>$8: T.untyped = alias <C <U T.untyped>>\l<U <isaCheckTemp>>$9: T.untyped = <U baz>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$8: T.untyped)\l<U <isaCheckTemp>>$9: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_9" -> "bb::TestRescue#multiple_rescue_classes_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_9" -> "bb::TestRescue#multiple_rescue_classes_10" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$10: TrueClass(true) = true\l<U <gotoDeadTemp>>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_10" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_10" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_11" [
        label = "block[id=11](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_11" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_ensure" {
    label = "::TestRescue#parse_rescue_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_ensure_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_1" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_8" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue, <U <gotoDeadTemp>>$9: T.nilable(TrueClass))\l<U <throwAwayTemp>>$10: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U baz>()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_8" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<U <gotoDeadTemp>>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_9" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_10" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_bug_rescue_empty_else" {
    label = "::TestRescue#parse_bug_rescue_empty_else";
    color = blue;
    "bb::TestRescue#parse_bug_rescue_empty_else_0" [shape = invhouse];
    "bb::TestRescue#parse_bug_rescue_empty_else_1" [shape = parallelogram];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_7" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" [
        label = "block[id=3]()\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$5: T.class_of(LoadError) = alias <C <U LoadError>>\l<U <isaCheckTemp>>$6: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$5: T.class_of(LoadError))\l<U <isaCheckTemp>>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_9" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_6" [
        label = "block[id=6](<U <gotoDeadTemp>>$7: NilClass)\l<U <gotoDeadTemp>>$7: NilClass\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_10" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_7" [
        label = "block[id=7]()\l<U <rescueEndTemp>>$4: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$4: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_7" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_7" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_9" [
        label = "block[id=9]()\l<U <gotoDeadTemp>>$7: TrueClass(true) = true\l<U <gotoDeadTemp>>$7: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_9" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_9" -> "bb::TestRescue#parse_bug_rescue_empty_else_10" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_10" [
        label = "block[id=10]()\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_10" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12686" {
    label = "::TestRescue#parse_ruby_bug_12686";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12686_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12686_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12686_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_1" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" [
        label = "block[id=3](<U <statTemp>>$4: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$8: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$9: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$8: T.class_of(StandardError))\l<U <isaCheckTemp>>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <statTemp>>$4: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <rescueEndTemp>>$7: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_6" [
        label = "block[id=6](<U <statTemp>>$4: T.untyped, <U <self>>: TestRescue, <U <gotoDeadTemp>>$10: NilClass)\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <statTemp>>$4: NilClass = nil\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_8" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_8" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_9" [
        label = "block[id=9](<U <statTemp>>$4: T.untyped, <U <self>>: TestRescue)\l<U <gotoDeadTemp>>$10: TrueClass(true) = true\l<U <gotoDeadTemp>>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_9" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_9" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_10" [
        label = "block[id=10](<U <statTemp>>$4: T.untyped, <U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U take_arg>(<U <statTemp>>$4: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_10" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod" {
    label = "::TestRescue#parse_rescue_mod";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_1" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_8" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$9: NilClass)\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_8" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_8" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$9: TrueClass(true) = true\l<U <gotoDeadTemp>>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_9" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_9" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_10" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_list_var" {
    label = "::TestRescue#parse_resbody_list_var";
    color = blue;
    "bb::TestRescue#parse_resbody_list_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_list_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_list_var_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_1" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<U ex>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.untyped = <U <self>>: TestRescue.<U foo>()\l<U <isaCheckTemp>>$8: T.untyped = <U ex>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.untyped)\l<U <isaCheckTemp>>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_8" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$10: NilClass)\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_8" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_8" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$10: TrueClass(true) = true\l<U <gotoDeadTemp>>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_9" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_9" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_10" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_else_ensure" {
    label = "::TestRescue#parse_rescue_else_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_else_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_else_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_else_ensure_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_1" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$7: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$8: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$7: T.class_of(StandardError))\l<U <isaCheckTemp>>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_8" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U foo>()\l<U <rescueEndTemp>>$6: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue, <U <gotoDeadTemp>>$10: T.nilable(TrueClass))\l<U <throwAwayTemp>>$11: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$10: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U baz>()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_8" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<U <gotoDeadTemp>>$10: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_9" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_10" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue" {
    label = "::TestRescue#parse_rescue";
    color = blue;
    "bb::TestRescue#parse_rescue_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_1" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_8" [style="bold"];
    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$9: NilClass)\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U foo>()\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_8" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_8" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$9: TrueClass(true) = true\l<U <gotoDeadTemp>>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_9" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_9" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_10" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var" {
    label = "::TestRescue#parse_resbody_var";
    color = blue;
    "bb::TestRescue#parse_resbody_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue)\l<U ex>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <U ex>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_8" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$9: NilClass)\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_8" [
        label = "block[id=8](<U <self>>: TestRescue)\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_8" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_8" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$9: TrueClass(true) = true\l<U <gotoDeadTemp>>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_var_9" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_9" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_10" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var_1" {
    label = "::TestRescue#parse_resbody_var_1";
    color = blue;
    "bb::TestRescue#parse_resbody_var_1_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_1_0" [
        label = "block[id=0]()\l<U @ex>$9: T.nilable(StandardError) = alias <U @ex>\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_1" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" [
        label = "block[id=3](<U <returnMethodTemp>>$2: T.untyped, <U <self>>: TestRescue, <U @ex>$9: T.nilable(StandardError))\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$6: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$7: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$6: T.class_of(StandardError))\l<U <isaCheckTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_8" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_4" [
        label = "block[id=4](<U <self>>: TestRescue, <U @ex>$9: T.nilable(StandardError))\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_6" [
        label = "block[id=6](<U <returnMethodTemp>>$2: T.untyped, <U <gotoDeadTemp>>$11: NilClass)\l<U <gotoDeadTemp>>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_8" [
        label = "block[id=8](<U <self>>: TestRescue, <U @ex>$9: T.nilable(StandardError), <D <U <rescueTemp>> $2>: StandardError)\l<U @ex>$9: StandardError = <D <U <rescueTemp>> $2>\l<U <returnMethodTemp>>$2: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_8" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_8" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_9" [
        label = "block[id=9](<U <returnMethodTemp>>$2: T.untyped)\l<U <gotoDeadTemp>>$11: TrueClass(true) = true\l<U <gotoDeadTemp>>$11: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_9" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_9" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_10" [
        label = "block[id=10](<U <returnMethodTemp>>$2: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_10" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod_op_assign" {
    label = "::TestRescue#parse_rescue_mod_op_assign";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_op_assign_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_op_assign_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <statTemp>>$3: NilClass = <U foo>\l<U <rescueStartTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" [
        label = "block[id=3](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: T.untyped, <U <self>>: TestRescue)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$8: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$9: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$8: T.class_of(StandardError))\l<U <isaCheckTemp>>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_8" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" [
        label = "block[id=4](<U <statTemp>>$3: NilClass, <U <self>>: TestRescue)\l<U <statTemp>>$4: T.untyped = <U <self>>: TestRescue.<U meth>()\l<U <rescueEndTemp>>$7: T.untyped = <unanalyzable>\l<U <rescueEndTemp>>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_6" [
        label = "block[id=6](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: T.untyped, <U <gotoDeadTemp>>$11: NilClass)\l<U <gotoDeadTemp>>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_8" [
        label = "block[id=8](<U <statTemp>>$3: NilClass, <U <self>>: TestRescue)\l<U <statTemp>>$4: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <gotoDeadTemp>>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_8" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_8" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_9" [
        label = "block[id=9](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: T.untyped)\l<U <gotoDeadTemp>>$11: TrueClass(true) = true\l<U <gotoDeadTemp>>$11: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_9" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_9" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_10" [
        label = "block[id=10](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: T.untyped)\l<U foo>: T.untyped = <U <statTemp>>$3: NilClass.<U +>(<U <statTemp>>$4: T.untyped)\l<U <returnMethodTemp>>$2: T.untyped = <U foo>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_10" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402" {
    label = "::TestRescue#parse_ruby_bug_12402";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <rescueStartTemp>>$3: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" [
        label = "block[id=3](<U foo>: NilClass)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$8: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$9: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$8: T.class_of(StandardError))\l<U <isaCheckTemp>>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_4" [
        label = "block[id=4](<U <self>>: TestRescue)\l<U <statTemp>>$5: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U foo>: T.noreturn = <U <self>>: TestRescue.<U raise>(<U <statTemp>>$5: T.untyped)\l<U <rescueEndTemp>>$7 = <unanalyzable>\l<U <rescueEndTemp>>$7\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_6" [
        label = "block[id=6](<U <gotoDeadTemp>>$10: NilClass, <U foo>: NilClass)\l<U <gotoDeadTemp>>$10\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_8" [
        label = "block[id=8]()\l<U foo>: NilClass = nil\l<U <gotoDeadTemp>>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_8" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_8" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_9" [
        label = "block[id=9](<U foo>: NilClass)\l<U <gotoDeadTemp>>$10: TrueClass(true) = true\l<U <gotoDeadTemp>>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_9" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_9" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_10" [
        label = "block[id=10](<U foo>: NilClass)\l<U <returnMethodTemp>>$2: NilClass = <U foo>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_10" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_1" {
    label = "::TestRescue#parse_ruby_bug_12402_1";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_1_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<U <statTemp>>$3: NilClass = <U foo>\l<U <rescueStartTemp>>$5: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" [
        label = "block[id=3](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: NilClass)\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$10: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$11: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$10: T.class_of(StandardError))\l<U <isaCheckTemp>>$11: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" [
        label = "block[id=4](<U <statTemp>>$3: NilClass, <U <self>>: TestRescue)\l<U <statTemp>>$7: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <statTemp>>$4: T.noreturn = <U <self>>: TestRescue.<U raise>(<U <statTemp>>$7: T.untyped)\l<U <rescueEndTemp>>$9 = <unanalyzable>\l<U <rescueEndTemp>>$9\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_6" [
        label = "block[id=6](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: NilClass, <U <gotoDeadTemp>>$12: NilClass)\l<U <gotoDeadTemp>>$12\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_8" [
        label = "block[id=8](<U <statTemp>>$3: NilClass)\l<U <statTemp>>$4: NilClass = nil\l<U <gotoDeadTemp>>$12: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_8" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_8" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_9" [
        label = "block[id=9](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: NilClass)\l<U <gotoDeadTemp>>$12: TrueClass(true) = true\l<U <gotoDeadTemp>>$12: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_9" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_9" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_10" [
        label = "block[id=10](<U <statTemp>>$3: NilClass, <U <statTemp>>$4: NilClass)\l<U foo>: T.untyped = <U <statTemp>>$3: NilClass.<U +>(<U <statTemp>>$4: NilClass)\l<U <returnMethodTemp>>$2: T.untyped = <U foo>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_10" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_2" {
    label = "::TestRescue#parse_ruby_bug_12402_2";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_2_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_2_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" [
        label = "block[id=0]()\l<U <self>>: TestRescue = cast(<U <self>>: NilClass, TestRescue);\l<D <U []> $3>: T.untyped = <U <self>>: TestRescue.<U foo>()\l<D <U []> $4>: Integer(0) = 0\l<U <statTemp>>$9: T.untyped = <D <U []> $3>: T.untyped.<U []>(<D <U []> $4>: Integer(0))\l<U <rescueStartTemp>>$13: T.untyped = <unanalyzable>\l<U <rescueStartTemp>>$13: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" [
        label = "block[id=3](<U <statTemp>>$9: T.untyped, <U <statTemp>>$12: NilClass, <D <U []> $3>: T.untyped, <D <U []> $4>: Integer(0))\l<D <U <rescueTemp>> $2>: T.untyped = <unanalyzable>\l<U <exceptionClassTemp>>$18: T.class_of(StandardError) = alias <C <U StandardError>>\l<U <isaCheckTemp>>$19: T.untyped = <D <U <rescueTemp>> $2>: T.untyped.<U is_a?>(<U <exceptionClassTemp>>$18: T.class_of(StandardError))\l<U <isaCheckTemp>>$19: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" [
        label = "block[id=4](<U <statTemp>>$9: T.untyped, <U <self>>: TestRescue, <D <U []> $3>: T.untyped, <D <U []> $4>: Integer(0))\l<U <statTemp>>$15: T.untyped = <U <self>>: TestRescue.<U bar>()\l<U <statTemp>>$12: T.noreturn = <U <self>>: TestRescue.<U raise>(<U <statTemp>>$15: T.untyped)\l<U <rescueEndTemp>>$17 = <unanalyzable>\l<U <rescueEndTemp>>$17\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_6" [
        label = "block[id=6](<U <statTemp>>$9: NilClass, <U <statTemp>>$12: NilClass, <U <gotoDeadTemp>>$20: NilClass, <D <U []> $3>: NilClass, <D <U []> $4>: NilClass)\l<U <gotoDeadTemp>>$20\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_8" [
        label = "block[id=8](<U <statTemp>>$9: T.untyped, <D <U []> $3>: T.untyped, <D <U []> $4>: Integer(0))\l<U <statTemp>>$12: NilClass = nil\l<U <gotoDeadTemp>>$20: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_8" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_8" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_9" [
        label = "block[id=9](<U <statTemp>>$9: T.untyped, <U <statTemp>>$12: NilClass, <D <U []> $3>: T.untyped, <D <U []> $4>: Integer(0))\l<U <gotoDeadTemp>>$20: TrueClass(true) = true\l<U <gotoDeadTemp>>$20: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_9" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_9" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_10" [
        label = "block[id=10](<U <statTemp>>$9: T.untyped, <U <statTemp>>$12: NilClass, <D <U []> $3>: T.untyped, <D <U []> $4>: Integer(0))\l<U <statTemp>>$8: T.untyped = <U <statTemp>>$9: T.untyped.<U +>(<U <statTemp>>$12: NilClass)\l<U <returnMethodTemp>>$2: T.untyped = <D <U []> $3>: T.untyped.<U []=>(<D <U []> $4>: Integer(0), <U <statTemp>>$8: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_10" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
}

}

