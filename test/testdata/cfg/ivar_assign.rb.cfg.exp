digraph "ivar_assign.rb" {
subgraph "cluster_::TestIVar#initialize" {
    label = "::TestIVar#initialize";
    color = blue;
    "bb::TestIVar#initialize_0" [shape = invhouse];
    "bb::TestIVar#initialize_1" [shape = parallelogram];

    "bb::TestIVar#initialize_0" [
        label = "block[id=0]()\l<U @foo>$3: Integer = alias <U @foo>\l<U <self>>: TestIVar = cast(<U <self>>: NilClass, TestIVar);\l<U <statTemp>>$5: T.class_of(Sorbet::Private::Static) = alias <C <U Static>>\l<U <statTemp>>$6: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$4: Sorbet::Private::Static::Void = <U <statTemp>>$5: T.class_of(Sorbet::Private::Static).<U keep_for_typechecking>(<U <statTemp>>$6: T.class_of(Integer))\l<U <castTemp>>$7: Integer(0) = 0\l<U @foo>$3: Integer = cast(<U <castTemp>>$7: Integer(0), Integer);\l<U <returnMethodTemp>>$2: Integer = <U @foo>$3\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer\l<unconditional>\l"
    ];

    "bb::TestIVar#initialize_0" -> "bb::TestIVar#initialize_1" [style="bold"];
    "bb::TestIVar#initialize_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestIVar#initialize_1" -> "bb::TestIVar#initialize_1" [style="bold"];
}

subgraph "cluster_::TestIVar#test" {
    label = "::TestIVar#test";
    color = blue;
    "bb::TestIVar#test_0" [shape = invhouse];
    "bb::TestIVar#test_1" [shape = parallelogram];

    "bb::TestIVar#test_0" [
        label = "block[id=0]()\l<U @foo>$3: Integer = alias <U @foo>\l<U <self>>: TestIVar = cast(<U <self>>: NilClass, TestIVar);\l<U @foo>$3: Integer = nil\l<U <returnMethodTemp>>$2: Integer = <U @foo>$3\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer\l<unconditional>\l"
    ];

    "bb::TestIVar#test_0" -> "bb::TestIVar#test_1" [style="bold"];
    "bb::TestIVar#test_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestIVar#test_1" -> "bb::TestIVar#test_1" [style="bold"];
}

}

