begin
  ::Sorbet::Private::Static.<U keep_for_ide>(::OpEq)
  class ::OpEq<<C <U OpEq>>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def <U b><<U b>>(<blk>)
      <emptyTree>
    end

    def <U b=><<U b=>>(_, <blk>)
      <emptyTree>
    end

    def <U y><<U y>>(<blk>)
      <emptyTree>
    end

    def <U z><<U z>>(<blk>)
      <emptyTree>
    end

    def <U example><<U example>>(a, <blk>)
      begin
        if <U a>
          <U a> = :"a"
        else
          <U a>
        end
        begin
          <D <U b> $2> = <U <self>>
          <D <U b> $3> = <D <U b> $2>.<U b>()
          if <D <U b> $3>
            <D <U b> $2>.<U b=>(:"b")
          else
            <D <U b> $3>
          end
        end
        begin
          <D <U []> $4> = <U a>
          <D <U []> $5> = <U <self>>.<U y>()
          <D <U []> $6> = <U <self>>.<U z>()
          <D <U []> $7> = <D <U []> $4>.<U []>(<D <U []> $5>, <D <U []> $6>)
          if <D <U []> $7>
            <D <U []> $4>.<U []=>(<D <U []> $5>, <D <U []> $6>, 1)
          else
            <D <U []> $7>
          end
        end
        if <U a>
          <U a>
        else
          <U a> = :"a"
        end
        begin
          <D <U b> $8> = <U <self>>
          <D <U b> $9> = <D <U b> $8>.<U b>()
          if <D <U b> $9>
            <D <U b> $9>
          else
            <D <U b> $8>.<U b=>(:"b")
          end
        end
        begin
          <D <U []> $10> = <U a>
          <D <U []> $11> = <U <self>>.<U y>()
          <D <U []> $12> = <U <self>>.<U z>()
          <D <U []> $13> = <D <U []> $10>.<U []>(<D <U []> $11>, <D <U []> $12>)
          if <D <U []> $13>
            <D <U []> $13>
          else
            <D <U []> $10>.<U []=>(<D <U []> $11>, <D <U []> $12>, 1)
          end
        end
      end
    end
  end
  <emptyTree>
end
