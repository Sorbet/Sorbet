begin
  class <emptyTree><<constant:<root>>> < ()
    <emptyTree>

    <emptyTree>

    def main<main>()
      begin
        self(<constant:Object>).puts(::A.newer())
        self(<constant:Object>).puts(::B.newer())
      end
    end

    def self.<static-init><<static-init>$76>()
      begin
        begin
          ::RubyTyper.keep_for_ide(::MM)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::B)
          <emptyTree>
        end
        self(<singleton class:<constant:<root>>>).main()
        <emptyTree>
      end
    end
  end
  module ::MM<<constant:MM>> < ()  end
  class ::A<<constant:A>> < (::<todo sym>)
    def self.<static-init><<static-init>>()
      begin
        ::RubyTyper.keep_for_ide(::MM)
        <emptyTree>
      end
    end
  end
  class <singleton class><<singleton class:<constant:A>>> < (::MM)
    def newer<newer>()
      self(<singleton class:<constant:A>>).new()
    end
  end
  class ::B<<constant:B>> < (::<todo sym>)
    def self.newer<newer>()
      self(<singleton class:<constant:B>>).new()
    end
  end
  <emptyTree>
end
