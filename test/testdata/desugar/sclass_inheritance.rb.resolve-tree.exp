class <emptyTree><<C <root>>> < ()
  begin
    ::Sorbet::Private::Static.keep_for_ide(::MM)
    module ::MM<<C MM>> < ()    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::A)
    class ::A<<C A>> < (::<todo sym>)
      begin
        ::Sorbet::Private::Static.keep_for_ide(::MM)
        class <singleton class><<Class:A>> < (::MM)
          def newer<newer>(<blk>)
            <self>.new()
          end
        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::B)
    class ::B<<C B>> < (::<todo sym>)
      def self.newer<newer>(<blk>)
        <self>.new()
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::C)
    ::Sorbet::Private::Static.keep_for_ide(::A)
    class ::C<<C C>> < (::A)
      class <singleton class><<Class:C>> < ()
        def newerer<newerer>(<blk>)
          <self>.newer()
        end
      end
    end
  end

  def main<main>(<blk>)
    begin
      <self>.puts(::A.newer())
      <self>.puts(::B.newer())
      <self>.puts(::C.newerer())
    end
  end

  <self>.main()
end
