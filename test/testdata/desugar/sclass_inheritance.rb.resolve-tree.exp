begin
  class <emptyTree><<C <U <root>>>> < ()
    <emptyTree>

    <emptyTree>

    def <U main><<U main>>(<blk>)
      begin
        <U <self>>.<U puts>(::A.<U newer>())
        <U <self>>.<U puts>(::B.<U newer>())
        <U <self>>.<U puts>(::C.<U newerer>())
      end
    end

    def self.<U <static-init>><<N <U <static-init>> $3>>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::MM)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::A)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::B)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.<U keep_for_ide>(::C)
          ::Sorbet::Private::Static.<U keep_for_ide>(::A)
          <emptyTree>
        end
        <U <self>>.<U main>()
        <emptyTree>
      end
    end
  end
  module ::MM<<C <U MM>>> < ()  end
  class ::A<<C <U A>>> < (::<todo sym>)
    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        ::Sorbet::Private::Static.<U keep_for_ide>(::MM)
        <emptyTree>
      end
    end
  end
  class <U <singleton class>><<S <C <U A>> $1>> < (::MM)
    def <U newer><<U newer>>(<blk>)
      <U <self>>.<U new>()
    end
  end
  class ::B<<C <U B>>> < (::<todo sym>)
    def self.<U newer><<U newer>>(<blk>)
      <U <self>>.<U new>()
    end
  end
  class ::C<<C <U C>>> < (::A)
    <emptyTree>
  end
  class <U <singleton class>><<S <C <U C>> $1>> < ()
    def <U newerer><<U newerer>>(<blk>)
      <U <self>>.<U newer>()
    end
  end
  <emptyTree>
end
