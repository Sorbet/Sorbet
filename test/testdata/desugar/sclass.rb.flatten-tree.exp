begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::B)
          <emptyTree>
        end
        $c = ::Object.new()
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::D)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::E)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::F)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::G)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::H)
          <emptyTree>
        end
        <emptyTree>
        <self>.main()
        <emptyTree>
      end
    end

    def main(<blk>)
      begin
        <self>.puts(::A.a())
        <self>.puts(::B.b())
        <self>.puts($c.c())
        <self>.puts(::D.singleton_class().d())
        <self>.puts(::E.e())
        <self>.puts(::F.f=(91))
        <self>.puts(::G.new().wrapper())
        <self>.puts(::T.untyped.h())
      end
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::B<<C B>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:B>> < ()
    <emptyTree>

    def self.<static-init>(<blk>)
      <emptyTree>
    end

    def b(<blk>)
      "b"
    end
  end
  class ::D<<C D>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:D>> < ()
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:<Class:D>>> < ()
    <emptyTree>

    def self.<static-init>(<blk>)
      <emptyTree>
    end

    def d(<blk>)
      "d"
    end
  end
  class ::E<<C E>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init>(<blk>)
      begin
        begin
          <emptyTree>
          <emptyTree>
        end
        <self>.wrapper()
        <emptyTree>
        <emptyTree>
      end
    end

    def self.e(<blk>)
      "e"
    end
  end
  class <singleton class><<Class:E>> < ()
    <emptyTree>

    def self.<static-init>(<blk>)
      <emptyTree>
    end

    def wrapper(<blk>)
      :"e"
    end
  end
  class ::F<<C F>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:F>> < ()
    <emptyTree>

    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <self>.extend(::T::Sig)
        <self>.sig() do ||
          <self>.params({:"f" => ::Integer}).returns(::Integer)
        end
        <emptyTree>
        <emptyTree>
      end
    end

    def initialize(<blk>)
      @f = begin
        ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
        T.let(0, Integer)
      end
    end

    def f=(f, <blk>)
      @f = f
    end
  end
  class ::G<<C G>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
        begin
          <emptyTree>
          <emptyTree>
        end
        <emptyTree>
        <emptyTree>
      end
    end

    def wrapper(<blk>)
      <self>.inner()
    end

    def self.g(<blk>)
      "g"
    end

    def inner(<blk>)
      ::T.reveal_type(<self>)
    end
  end
  class <singleton class><<Class:G>> < ()
    def self.<static-init>(<blk>)
      :"inner"
    end
  end
  class ::H<<C H>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:H>> < ()
    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::<Class:H>::H2)
        <emptyTree>
      end
    end
  end
  class ::<Class:H>::H2<<C H2>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init>(<blk>)
      <emptyTree>
    end

    def self.h(<blk>)
      "h"
    end
  end
  <emptyTree>
end
