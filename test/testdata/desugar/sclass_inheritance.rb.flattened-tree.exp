begin
  class <emptyTree><<C <root>>> < ()
    <emptyTree>

    <emptyTree>

    def main<main>(<blk>)
      begin
        <self>.puts(::A.newer())
        <self>.puts(::B.newer())
        <self>.puts(::C.newerer())
      end
    end

    def self.<static-init><<static-init>$108>(<blk>)
      begin
        begin
          ::Sorbet::Private::Static.keep_for_ide(::MM)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.keep_for_ide(::B)
          <emptyTree>
        end
        begin
          ::Sorbet::Private::Static.keep_for_ide(::C)
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        <self>.main()
        <emptyTree>
      end
    end
  end
  module ::MM<<C MM>> < ()  end
  class ::A<<C A>> < (::<todo sym>)
    def self.<static-init><<static-init>>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_for_ide(::MM)
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:A>> < (::MM)
    def newer<newer>(<blk>)
      <self>.new()
    end
  end
  class ::B<<C B>> < (::<todo sym>)
    def self.newer<newer>(<blk>)
      <self>.new()
    end
  end
  class ::C<<C C>> < (::A)
    <emptyTree>
  end
  class <singleton class><<Class:C>> < ()
    def newerer<newerer>(<blk>)
      <self>.newer()
    end
  end
  <emptyTree>
end
