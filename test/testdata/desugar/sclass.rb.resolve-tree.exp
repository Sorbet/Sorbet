class <emptyTree><<C <root>>> < ()
  begin
    ::Sorbet::Private::Static.keep_for_ide(::A)
    class ::A<<C A>> < (::<todo sym>)    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::B)
    class ::B<<C B>> < (::<todo sym>)
      class <singleton class><<Class:B>> < ()
        def b<b>(<blk>)
          "b"
        end
      end
    end
  end

  #$c = ::Object.new()

  begin
    ::Sorbet::Private::Static.keep_for_ide(::D)
    class ::D<<C D>> < (::<todo sym>)
      class <singleton class><<Class:D>> < ()
        class <singleton class><<Class:<Class:D>>> < ()
          def d<d>(<blk>)
            "d"
          end
        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::E)
    class ::E<<C E>> < (::<todo sym>)
      class <singleton class><<Class:E>> < ()
        def wrapper<wrapper>(<blk>)
          def e<e>(<blk>)
            "e"
          end
        end
      end

      <self>.wrapper()
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::F)
    class ::F<<C F>> < (::<todo sym>)
      class <singleton class><<Class:F>> < ()
        def initialize<initialize>(<blk>)
          @f = begin
            ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
            T.let(0, Integer)
          end
        end

        <self>.sig() do ||
          <self>.params({:"f" => ::Integer}).returns(::Integer)
        end

        def f=<f=>(f, <blk>)
          @f = f
        end
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::G)
    class ::G<<C G>> < (::<todo sym>)
      def wrapper<wrapper>(<blk>)
        begin
          class <singleton class><<Class:G>> < ()
            def inner<inner>(<blk>)
              ::T.reveal_type(<self>)
            end
          end
          <self>.inner()
        end
      end

      def self.g<g>(<blk>)
        "g"
      end
    end
  end

  begin
    ::Sorbet::Private::Static.keep_for_ide(::H)
    class ::H<<C H>> < (::<todo sym>)
      class <singleton class><<Class:H>> < ()
        begin
          ::Sorbet::Private::Static.keep_for_ide(::<Class:H>::H2)
          class ::<Class:H>::H2<<C H2>> < (::<todo sym>)
            def self.h<h>(<blk>)
              "h"
            end
          end
        end
      end
    end
  end

  def main<main>(<blk>)
    begin
      <self>.puts(::A.a())
      <self>.puts(::B.b())
      <self>.puts(#$c.c())
      <self>.puts(::D.singleton_class().d())
      <self>.puts(::E.e())
      <self>.puts(::F.f=(91))
      <self>.puts(::G.new().wrapper())
      <self>.puts(::T.untyped.h())
    end
  end

  <self>.main()
end
