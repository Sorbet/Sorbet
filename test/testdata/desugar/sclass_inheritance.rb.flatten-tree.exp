begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    :"<static-init>"

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::MM)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::B)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::C)
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        :"main"
        <self>.main()
        <emptyTree>
      end
    end

    def main(<blk>)
      begin
        <self>.puts(::A.newer())
        <self>.puts(::B.newer())
        <self>.puts(::C.newerer())
      end
    end
  end
  module ::MM<<C MM>> < ()
    :"<static-init>"

    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    :"<static-init>"

    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::MM)
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:A>> < (::MM)
    :"<static-init>"

    def self.<static-init>(<blk>)
      begin
        <self>.include(::MM)
        :"newer"
        <emptyTree>
      end
    end

    def newer(<blk>)
      ::<Magic>.<self-new>(<self>)
    end
  end
  class ::B<<C B>> < (::<todo sym>)
    :"<static-init>"

    def self.<static-init>(<blk>)
      begin
        <self>.extend(::MM)
        :"newer"
        <emptyTree>
      end
    end

    def self.newer(<blk>)
      ::<Magic>.<self-new>(<self>)
    end
  end
  class ::C<<C C>> < (::A)
    :"<static-init>"

    def self.<static-init>(<blk>)
      begin
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <singleton class><<Class:C>> < ()
    :"<static-init>"

    def self.<static-init>(<blk>)
      :"newerer"
    end

    def newerer(<blk>)
      <self>.newer()
    end
  end
  <emptyTree>
end
