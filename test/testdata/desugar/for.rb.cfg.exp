digraph "for.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(A))\l<statTemp>$9: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$10: T.class_of(E) = alias <C E>\l<statTemp>$8: Sorbet::Private::Static::Void = <statTemp>$9: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$10: T.class_of(E))\l<statTemp>$13: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$14: T.class_of(Main) = alias <C Main>\l<statTemp>$12: Sorbet::Private::Static::Void = <statTemp>$13: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$14: T.class_of(Main))\l<statTemp>$16: T.class_of(Main) = alias <C Main>\l<statTemp>$15: T.untyped = <statTemp>$16: T.class_of(Main).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));\l<blk>: T.untyped = load_arg(A.each#<blk>)\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<statTemp>$7: Integer(3) = 3\l<statTemp>$8: Integer(4) = 4\l<statTemp>$9: Integer(5) = 5\l<statTemp>$3: T.untyped = <blk>: T.untyped.call(<statTemp>$5: Integer(1), <statTemp>$6: Integer(2), <statTemp>$7: Integer(3), <statTemp>$8: Integer(4), <statTemp>$9: Integer(5))\l<statTemp>$11: Integer(6) = 6\l<statTemp>$12: Integer(7) = 7\l<statTemp>$13: Integer(8) = 8\l<statTemp>$14: Integer(9) = 9\l<statTemp>$15: Integer(0) = 0\l<returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(<statTemp>$11: Integer(6), <statTemp>$12: Integer(7), <statTemp>$13: Integer(8), <statTemp>$14: Integer(9), <statTemp>$15: Integer(0))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>>\l<self>: T.class_of(E) = cast(<self>: NilClass, T.class_of(E));\le: T.untyped = load_arg(E.e=#e)\l@e$3: T.untyped = e\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>>\l<self>: T.class_of(E) = cast(<self>: NilClass, T.class_of(E));\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l@a$116: T.untyped = alias <C <undeclared-field-stub>>\l@@b$120: T.untyped = alias <C <undeclared-field-stub>>\l$c$124: T.untyped = alias $c\l<self>: T.class_of(Main) = cast(<self>: NilClass, T.class_of(Main));\l<statTemp>$4: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$5: T.untyped = <statTemp>$4: T.class_of(A).each()\l<selfRestore>$6: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](<self>: T.class_of(Main), <selfRestore>$6: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](<selfRestore>$6: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\l<statTemp>$3: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$6\l<statTemp>$24: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$25: T.untyped = <statTemp>$24: T.class_of(A).each()\l<selfRestore>$26: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](<self>: T.class_of(Main), <selfRestore>$6: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$7: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$12: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$14: Integer(1) = 1\l<statTemp>$15: Integer(0) = 0\l<assignTemp>$3$1: T.untyped = <statTemp>$12: T.class_of(<Magic>).<expand-splat>(<blk>$7: T.untyped, <statTemp>$14: Integer(1), <statTemp>$15: Integer(0))\l<statTemp>$18: Integer(0) = 0\la$1: T.untyped = <assignTemp>$3$1: T.untyped.[](<statTemp>$18: Integer(0))\l<statTemp>$20: T.untyped = a$1: T.untyped.inspect()\l<blockReturnTemp>$9: NilClass = <self>: T.class_of(Main).puts(<statTemp>$20: T.untyped)\l<blockReturnTemp>$22: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$9: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_6" [
        label = "block[id=6](<self>: T.class_of(Main), <selfRestore>$26: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_9" [style="bold"];
    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_7" [style="tapered"];

    "bb::<Class:Main>#main_7" [
        label = "block[id=7](<selfRestore>$26: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\l<statTemp>$23: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$26\l<statTemp>$45: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$46: T.untyped = <statTemp>$45: T.class_of(A).each()\l<selfRestore>$47: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_9" [
        label = "block[id=9](<self>: T.class_of(Main), <selfRestore>$26: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$27: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$2: T.untyped = <blk>$27\l<statTemp>$32: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$33: T.untyped = forTemp$2: T.untyped.to_a()\l<statTemp>$35: Integer(1) = 1\l<statTemp>$36: Integer(0) = 0\l<assignTemp>$4$2: T.untyped = <statTemp>$32: T.class_of(<Magic>).<expand-splat>(<statTemp>$33: T.untyped, <statTemp>$35: Integer(1), <statTemp>$36: Integer(0))\l<statTemp>$39: Integer(0) = 0\la$2: T.untyped = <assignTemp>$4$2: T.untyped.[](<statTemp>$39: Integer(0))\l<statTemp>$41: T.untyped = a$2: T.untyped.inspect()\l<blockReturnTemp>$29: NilClass = <self>: T.class_of(Main).puts(<statTemp>$41: T.untyped)\l<blockReturnTemp>$43: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$29: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](<self>: T.class_of(Main), <selfRestore>$47: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_11" [style="tapered"];

    "bb::<Class:Main>#main_11" [
        label = "block[id=11](<selfRestore>$47: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\l<statTemp>$44: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$47\l<statTemp>$72: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$73: T.untyped = <statTemp>$72: T.class_of(A).each()\l<selfRestore>$74: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](<self>: T.class_of(Main), <selfRestore>$47: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$48: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$53: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$55: Integer(2) = 2\l<statTemp>$56: Integer(0) = 0\l<assignTemp>$6$3: T.untyped = <statTemp>$53: T.class_of(<Magic>).<expand-splat>(<blk>$48: T.untyped, <statTemp>$55: Integer(2), <statTemp>$56: Integer(0))\l<statTemp>$59: Integer(0) = 0\la$3: T.untyped = <assignTemp>$6$3: T.untyped.[](<statTemp>$59: Integer(0))\l<statTemp>$62: Integer(1) = 1\lb$3: T.untyped = <assignTemp>$6$3: T.untyped.[](<statTemp>$62: Integer(1))\l<statTemp>$65: T.untyped = a$3: T.untyped.inspect()\l<statTemp>$63: NilClass = <self>: T.class_of(Main).puts(<statTemp>$65: T.untyped)\l<statTemp>$68: T.untyped = b$3: T.untyped.inspect()\l<blockReturnTemp>$50: NilClass = <self>: T.class_of(Main).puts(<statTemp>$68: T.untyped)\l<blockReturnTemp>$70: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$50: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](<self>: T.class_of(Main), <selfRestore>$74: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](<selfRestore>$74: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\l<statTemp>$71: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$74\l<statTemp>$101: String(\"main\") = \"main\"\l<statTemp>$99: NilClass = <self>: T.class_of(Main).puts(<statTemp>$101: String(\"main\"))\l<statTemp>$103: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$104: T.untyped = <statTemp>$103: T.class_of(A).each()\l<selfRestore>$105: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](<self>: T.class_of(Main), <selfRestore>$74: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$75: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$4: T.untyped = <blk>$75\l<statTemp>$80: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$81: T.untyped = forTemp$4: T.untyped.to_a()\l<statTemp>$83: Integer(2) = 2\l<statTemp>$84: Integer(0) = 0\l<assignTemp>$7$4: T.untyped = <statTemp>$80: T.class_of(<Magic>).<expand-splat>(<statTemp>$81: T.untyped, <statTemp>$83: Integer(2), <statTemp>$84: Integer(0))\l<statTemp>$87: Integer(0) = 0\la$4: T.untyped = <assignTemp>$7$4: T.untyped.[](<statTemp>$87: Integer(0))\l<statTemp>$90: Integer(1) = 1\lb$4: T.untyped = <assignTemp>$7$4: T.untyped.[](<statTemp>$90: Integer(1))\l<statTemp>$93: T.untyped = a$4: T.untyped.inspect()\l<statTemp>$91: NilClass = <self>: T.class_of(Main).puts(<statTemp>$93: T.untyped)\l<statTemp>$96: T.untyped = b$4: T.untyped.inspect()\l<blockReturnTemp>$77: NilClass = <self>: T.class_of(Main).puts(<statTemp>$96: T.untyped)\l<blockReturnTemp>$98: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$77: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_18" [
        label = "block[id=18](<self>: T.class_of(Main), <selfRestore>$105: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_21" [style="bold"];
    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_19" [style="tapered"];

    "bb::<Class:Main>#main_19" [
        label = "block[id=19](<selfRestore>$105: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\l<statTemp>$102: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$105\l<statTemp>$156: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$157: T.untyped = <statTemp>$156: T.class_of(A).each()\l<selfRestore>$158: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_22" [style="bold"];
    "bb::<Class:Main>#main_21" [
        label = "block[id=21](<self>: T.class_of(Main), <selfRestore>$105: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$106: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$111: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$113: Integer(5) = 5\l<statTemp>$114: Integer(0) = 0\l<assignTemp>$9$5: T.untyped = <statTemp>$111: T.class_of(<Magic>).<expand-splat>(<blk>$106: T.untyped, <statTemp>$113: Integer(5), <statTemp>$114: Integer(0))\l<statTemp>$118: Integer(0) = 0\l@a$116: T.untyped = <assignTemp>$9$5: T.untyped.[](<statTemp>$118: Integer(0))\l<statTemp>$122: Integer(1) = 1\l@@b$120: T.untyped = <assignTemp>$9$5: T.untyped.[](<statTemp>$122: Integer(1))\l<statTemp>$126: Integer(2) = 2\l$c$124: T.untyped = <assignTemp>$9$5: T.untyped.[](<statTemp>$126: Integer(2))\l<statTemp>$129: Integer(3) = 3\ld$5: T.untyped = <assignTemp>$9$5: T.untyped.[](<statTemp>$129: Integer(3))\l<statTemp>$131: T.class_of(E) = alias <C E>\l<statTemp>$134: Integer(4) = 4\l<statTemp>$132: T.untyped = <assignTemp>$9$5: T.untyped.[](<statTemp>$134: Integer(4))\l<statTemp>$130: T.untyped = <statTemp>$131: T.class_of(E).e=(<statTemp>$132: T.untyped)\l<statTemp>$137: T.untyped = @a$116: T.untyped.inspect()\l<statTemp>$135: NilClass = <self>: T.class_of(Main).puts(<statTemp>$137: T.untyped)\l<statTemp>$141: T.untyped = @@b$120: T.untyped.inspect()\l<statTemp>$139: NilClass = <self>: T.class_of(Main).puts(<statTemp>$141: T.untyped)\l<statTemp>$145: T.untyped = $c$124: T.untyped.inspect()\l<statTemp>$143: NilClass = <self>: T.class_of(Main).puts(<statTemp>$145: T.untyped)\l<statTemp>$149: T.untyped = d$5: T.untyped.inspect()\l<statTemp>$147: NilClass = <self>: T.class_of(Main).puts(<statTemp>$149: T.untyped)\l<statTemp>$154: T.class_of(E) = alias <C E>\l<statTemp>$153: T.untyped = <statTemp>$154: T.class_of(E).e()\l<statTemp>$152: T.untyped = <statTemp>$153: T.untyped.inspect()\l<blockReturnTemp>$108: NilClass = <self>: T.class_of(Main).puts(<statTemp>$152: T.untyped)\l<blockReturnTemp>$155: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$108: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_21" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_22" [
        label = "block[id=22](<self>: T.class_of(Main), <selfRestore>$158: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_25" [style="bold"];
    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_23" [style="tapered"];

    "bb::<Class:Main>#main_23" [
        label = "block[id=23](<selfRestore>$158: T.class_of(Main))\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Main>#main#<block>>\l<self>: T.class_of(Main) = <selfRestore>$158\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_23" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_25" [
        label = "block[id=25](<self>: T.class_of(Main), <selfRestore>$158: T.class_of(Main), @a$116: T.untyped, @@b$120: T.untyped, $c$124: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$159: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$6: T.untyped = <blk>$159\l<statTemp>$164: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$165: T.untyped = forTemp$6: T.untyped.to_a()\l<statTemp>$167: Integer(5) = 5\l<statTemp>$168: Integer(0) = 0\l<assignTemp>$10$6: T.untyped = <statTemp>$164: T.class_of(<Magic>).<expand-splat>(<statTemp>$165: T.untyped, <statTemp>$167: Integer(5), <statTemp>$168: Integer(0))\l<statTemp>$171: Integer(0) = 0\l@a$116: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$171: Integer(0))\l<statTemp>$174: Integer(1) = 1\l@@b$120: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$174: Integer(1))\l<statTemp>$177: Integer(2) = 2\l$c$124: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$177: Integer(2))\l<statTemp>$180: Integer(3) = 3\ld$6: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$180: Integer(3))\l<statTemp>$182: T.class_of(E) = alias <C E>\l<statTemp>$185: Integer(4) = 4\l<statTemp>$183: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$185: Integer(4))\l<statTemp>$181: T.untyped = <statTemp>$182: T.class_of(E).e=(<statTemp>$183: T.untyped)\l<statTemp>$188: T.untyped = @a$116: T.untyped.inspect()\l<statTemp>$186: NilClass = <self>: T.class_of(Main).puts(<statTemp>$188: T.untyped)\l<statTemp>$192: T.untyped = @@b$120: T.untyped.inspect()\l<statTemp>$190: NilClass = <self>: T.class_of(Main).puts(<statTemp>$192: T.untyped)\l<statTemp>$196: T.untyped = $c$124: T.untyped.inspect()\l<statTemp>$194: NilClass = <self>: T.class_of(Main).puts(<statTemp>$196: T.untyped)\l<statTemp>$200: T.untyped = d$6: T.untyped.inspect()\l<statTemp>$198: NilClass = <self>: T.class_of(Main).puts(<statTemp>$200: T.untyped)\l<statTemp>$205: T.class_of(E) = alias <C E>\l<statTemp>$204: T.untyped = <statTemp>$205: T.class_of(E).e()\l<statTemp>$203: T.untyped = <statTemp>$204: T.untyped.inspect()\l<blockReturnTemp>$161: NilClass = <self>: T.class_of(Main).puts(<statTemp>$203: T.untyped)\l<blockReturnTemp>$206: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$161: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_25" -> "bb::<Class:Main>#main_22" [style="bold"];
}

}

