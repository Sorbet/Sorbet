class <emptyTree><<constant:<root>>> < ()
  class <emptyTree>::<constant:A><<constant:<todo sym>>> < (::<todo sym>)
    <emptyTree>
  end

  module <emptyTree>::<constant:MM><<constant:<todo sym>>> < ()
    <emptyTree>
  end

  <emptyTree>

  class <emptyTree>::<constant:B><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      def b<<constant:<todo sym>>>()
        "b"
      end
    end
  end

  $c = <emptyTree>::<constant:Object>.new()

  <emptyTree>

  class <emptyTree>::<constant:D><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      class <singleton class><<constant:<todo sym>>> < ()
        def d<<constant:<todo sym>>>()
          "d"
        end
      end
    end
  end

  class <emptyTree>::<constant:E><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      def wrapper<<constant:<todo sym>>>()
        def e<<constant:<todo sym>>>()
          "e"
        end
      end
    end

    self(<constant:<todo sym>>).wrapper()
  end

  class <emptyTree>::<constant:F><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      def initialize<<constant:<todo sym>>>()
        @f = <emptyTree>::<constant:T>.let(0, <emptyTree>::<constant:Integer>)
      end

      self(<constant:<todo sym>>).extend(<emptyTree>::<constant:T>::<constant:Helpers>)

      self(<constant:<todo sym>>).sig() do ||
        self(<constant:<todo sym>>).params({:"f" => <emptyTree>::<constant:Integer>}).returns(<emptyTree>::<constant:Integer>)
      end

      self(<constant:<todo sym>>).attr_writer(:"f")
    end
  end

  class <emptyTree>::<constant:G><<constant:<todo sym>>> < (::<todo sym>)
    def wrapper<<constant:<todo sym>>>()
      begin
        class <singleton class><<constant:<todo sym>>> < ()
          def inner<<constant:<todo sym>>>()
            <emptyTree>::<constant:T>.reveal_type(self(<constant:<todo sym>>))
          end
        end
        self(<constant:<todo sym>>).inner()
      end
    end

    def self.g<<constant:<todo sym>>>()
      "g"
    end
  end

  class <emptyTree>::<constant:H><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      class <emptyTree>::<constant:H2><<constant:<todo sym>>> < (::<todo sym>)
        def self.h<<constant:<todo sym>>>()
          "h"
        end
      end
    end
  end

  class <emptyTree>::<constant:I><<constant:<todo sym>>> < (::<todo sym>)
    class <singleton class><<constant:<todo sym>>> < ()
      self(<constant:<todo sym>>).include(<emptyTree>::<constant:MM>)

      def newer<<constant:<todo sym>>>()
        self(<constant:<todo sym>>).new()
      end
    end
  end

  class <emptyTree>::<constant:J><<constant:<todo sym>>> < (::<todo sym>)
    self(<constant:<todo sym>>).extend(<emptyTree>::<constant:MM>)

    def self.newer<<constant:<todo sym>>>()
      self(<constant:<todo sym>>).new()
    end
  end

  def main<<constant:<todo sym>>>()
    begin
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:A>.a())
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:B>.b())
      self(<constant:<todo sym>>).puts($c.c())
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:D>.singleton_class().d())
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:E>.e())
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:F>.f=(91))
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:G>.new().wrapper())
      self(<constant:<todo sym>>).puts(<emptyTree>::<constant:H>.singleton_class()::<constant:H2>.h())
    end
  end

  self(<constant:<todo sym>>).main()
end
