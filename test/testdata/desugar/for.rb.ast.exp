class <emptyTree><<C <root>>> < ()
  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    def self.each<<C <todo sym>>>(&<blk>)
      begin
        <blk>.call(1, 2, 3, 4, 5)
        <blk>.call(6, 7, 8, 9, 0)
      end
    end
  end

  class <emptyTree>::<C E><<C <todo sym>>> < (::<todo sym>)
    def self.e=<<C <todo sym>>>(e, &<blk>)
      @e = e
    end

    def self.e<<C <todo sym>>>(&<blk>)
      @e
    end
  end

  class <emptyTree>::<C Main><<C <todo sym>>> < (::<todo sym>)
    def self.main<<C <todo sym>>>(&<blk>)
      begin
        <emptyTree>::<C A>.each() do |*forTemp$2|
          begin
            begin
              <assignTemp>$3 = ::<Magic>.<expand-splat>(forTemp$2, 1, 0)
              a = <assignTemp>$3.[](0)
              <assignTemp>$3
            end
            <self>.puts(a.inspect())
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$4 = ::<Magic>.<expand-splat>(forTemp.to_a(), 1, 0)
              a = <assignTemp>$4.[](0)
              <assignTemp>$4
            end
            <self>.puts(a.inspect())
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp$5|
          begin
            begin
              <assignTemp>$6 = ::<Magic>.<expand-splat>(forTemp$5, 2, 0)
              a = <assignTemp>$6.[](0)
              b = <assignTemp>$6.[](1)
              <assignTemp>$6
            end
            begin
              <self>.puts(a.inspect())
              <self>.puts(b.inspect())
            end
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$7 = ::<Magic>.<expand-splat>(forTemp.to_a(), 2, 0)
              a = <assignTemp>$7.[](0)
              b = <assignTemp>$7.[](1)
              <assignTemp>$7
            end
            <self>.puts(a.inspect())
            <self>.puts(b.inspect())
          end
        end
        <self>.puts("main")
        <emptyTree>::<C A>.each() do |*forTemp$8|
          begin
            begin
              <assignTemp>$9 = ::<Magic>.<expand-splat>(forTemp$8, 5, 0)
              @a = <assignTemp>$9.[](0)
              @@b = <assignTemp>$9.[](1)
              $c = <assignTemp>$9.[](2)
              d = <assignTemp>$9.[](3)
              <emptyTree>::<C E>.e=(<assignTemp>$9.[](4))
              <assignTemp>$9
            end
            begin
              <self>.puts(@a.inspect())
              <self>.puts(@@b.inspect())
              <self>.puts($c.inspect())
              <self>.puts(d.inspect())
              <self>.puts(<emptyTree>::<C E>.e().inspect())
            end
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$10 = ::<Magic>.<expand-splat>(forTemp.to_a(), 5, 0)
              @a = <assignTemp>$10.[](0)
              @@b = <assignTemp>$10.[](1)
              $c = <assignTemp>$10.[](2)
              d = <assignTemp>$10.[](3)
              <emptyTree>::<C E>.e=(<assignTemp>$10.[](4))
              <assignTemp>$10
            end
            <self>.puts(@a.inspect())
            <self>.puts(@@b.inspect())
            <self>.puts($c.inspect())
            <self>.puts(d.inspect())
            <self>.puts(<emptyTree>::<C E>.e().inspect())
          end
        end
      end
    end
  end

  <emptyTree>::<C Main>.main()
end
