class <emptyTree><<constant:<root>>> < ()
  self(<constant:<todo sym>>).alias_method(:"afoo", :"bar")

  @iv = 1

  @@cv = 1

  $gv = 1

  begin
    <assignTemp>$2 = ::<Magic>.<expand-splat>([nil, nil], 2, 0)
    self(<constant:<todo sym>>).x().var=(<assignTemp>$2.[](0))
    y = <assignTemp>$2.[](1)
    <assignTemp>$2
  end

  begin
    <assignTemp>$3 = ::<Magic>.<expand-splat>(self(<constant:<todo sym>>).zaaaz(), 2, 0)
    baaaar = <assignTemp>$3.[](0)
    naaar = <assignTemp>$3.[](1)
    <assignTemp>$3
  end

  xaaaaz = [self(<constant:<todo sym>>).yayayaya(), self(<constant:<todo sym>>).tutututu()]

  <emptyTree>

  nil

  begin
    self(<constant:<todo sym>>).a()
    self(<constant:<todo sym>>).b()
  end

  def bfoo<<constant:<todo sym>>>(&x)
    <emptyTree>
  end

  self(<constant:<todo sym>>).lambda() do ||
    <emptyTree>
  end

  begin
    <assignTemp>$4 = self(<constant:<todo sym>>).x()
    if y.===(<assignTemp>$4)
      1
    else
      self(<constant:<todo sym>>).z()
    end
  end

  "x"

  1.+(::Kernel.Complex(0, "4"))

  0.500000

  ::Kernel.Complex(0, "1.5")

  def self.classmeth<<constant:<todo sym>>>()
    <emptyTree>
  end

  class <singleton class><<constant:<todo sym>>> < ()
    <emptyTree>
  end

  begin
    ||$5 = true
    if ||$5
      ||$5
    else
      false
    end
  end

  self(<constant:<todo sym>>).arr().each() do |*forTemp$6|
    begin
      begin
        <assignTemp>$7 = ::<Magic>.<expand-splat>(forTemp$6, 1, 0)
        x = <assignTemp>$7.[](0)
        <assignTemp>$7
      end
      <emptyTree>
    end
  end

  while 0.!=(1)
    <emptyTree>
  end

  x.[]=(1, 0)

  break(<emptyTree>)

  break(1)

  break([1, 2])

  next(<emptyTree>)

  next(1)

  next([1, 2])

  ::<Magic>.defined?(<emptyTree>::<constant:X>)

  self(<constant:<todo sym>>).super(ZSuperArgs)

  def kwfoo<<constant:<todo sym>>>(x:, y: = 1, *z:)
    <emptyTree>
  end

  x.to_hash()

  86

  while true
    nil
  end

  while true
    nil
  end

  while true.!()
    nil
  end

  while true.!()
    nil
  end

  while true
    begin
      forTemp$8 = self(<constant:<todo sym>>).puts(1)
      if false.!()
        break(forTemp$8)
      else
        <emptyTree>
      end
    end
  end

  while true
    begin
      forTemp$9 = self(<constant:<todo sym>>).puts(1)
      if true
        break(forTemp$9)
      else
        <emptyTree>
      end
    end
  end

  begin
    <assignTemp>$10 = ::<Magic>.<expand-splat>(1, 2, 0)
    a = <assignTemp>$10.[](0)
    begin
      <assignTemp>$11 = ::<Magic>.<expand-splat>(<assignTemp>$10.[](1), 1, 0)
      x = <assignTemp>$11.[](0)
      <assignTemp>$11
    end
    <assignTemp>$10
  end

  4

  def optfoo<<constant:<todo sym>>>(x = 1, *y)
    <emptyTree>
  end

  {x => y, "foo".intern() => 1}

  <emptyTree>

  <emptyTree>

  ::Kernel.<constant:Rational>("4")

  ::Kernel.Complex(0, "5")

  <emptyTree>
rescue <emptyTree>::<constant:E> => x
  nil

  begin
    <assignTemp>$12 = ::<Magic>.<expand-splat>(y.to_a(), 0, 0)
    x = <assignTemp>$12.slice(::Range.new(0, -1, false))
    <assignTemp>$12
  end

  "foo".concat(self(<constant:<todo sym>>).bar().to_s()).intern()

  [:"sym"]

  if x
    1
  else
    7
  end

  <emptyTree>

  ["a", "b"]

  ["a", "b"]

  self(<constant:<todo sym>>).`("true")

  self(<constant:<todo sym>>).proc() do |x|
    <emptyTree>
  end

  break(self(<constant:<todo sym>>).cfoo(1) do ||
      <emptyTree>
    end)

  def sfoo<<constant:<todo sym>>>(**$2)
    <emptyTree>
  end

  def ssfoo<<constant:<todo sym>>>(***$3:)
    <emptyTree>
  end
end
