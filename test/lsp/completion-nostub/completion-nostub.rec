Read: {"jsonrpc":"2.0", "method":"initialize", "params":{"processId":52385, "rootPath":"/Users/nelhage/stripe/pay-server", "rootUri":"file:///Users/nelhage/stripe/pay-server", "capabilities":{"workspace":{"applyEdit":true, "executeCommand":{"dynamicRegistration":true}, "workspaceFolders":true}, "textDocument":{"synchronization":{"willSave":true, "didSave":true, "willSaveWaitUntil":true}, "documentSymbol":{"symbolKind":{"valueSet":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]}, "hierarchicalDocumentSymbolSupport":true}, "formatting":{"dynamicRegistration":true}, "codeAction":{"dynamicRegistration":true}}}, "initializationOptions":null}, "id":1}
Write: {"jsonrpc":"2.0","result":{"capabilities":{"textDocumentSync":2,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"definitionProvider":true,"hoverProvider":true,"referencesProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"completionProvider":{"triggerCharacters":["."]}}},"id":1}
Read: {"jsonrpc":"2.0", "method":"initialized", "params":{}}
Read: {"jsonrpc":"2.0", "method":"textDocument/didOpen", "params":{"textDocument":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb", "languageId":"Ruby", "version":0, "text":"# typed: true\nclass TestCompletion\n  def method_a(x, y); end\n  def method_b(x); end\nend\n\nTestCompletion.new.m\n"}}}
Read: {"jsonrpc":"2.0", "method":"textDocument/completion", "params":{"textDocument":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb"}, "position":{"line":6, "character":20}}, "id":88}
Write: {"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/nelhage/stripe/pay-server/COMPLETE.rb","diagnostics":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":20}},"code":7003,"message":"Method `m` does not exist on `TestCompletion`","relatedInformation":[]}]},"jsonrpc":"2.0"}
Write: {"jsonrpc":"2.0","result":{"isIncomplete":"false","items":[{"label":"BigDecimal","kind":3,"detail":"sig {params(initial: T.any(Integer, Float, Rational, BigDecimal, String), digits: Integer).returns(RubyTyper::Void)}","insertTextFormat":1,"insertText":"BigDecimal"},{"label":"Complex","kind":3,"detail":"sig {params(x: String).returns(Complex)}","insertTextFormat":1,"insertText":"Complex"},{"label":"Complex","kind":3,"detail":"sig {params(x: T.any(Numeric, String), y: T.any(Numeric, String)).returns(Complex)}","insertTextFormat":1,"insertText":"Complex"},{"label":"__method__","kind":3,"detail":"sig {params().returns(T.nilable(Symbol))}","insertTextFormat":1,"insertText":"__method__"},{"label":"enum_for","kind":3,"detail":"sig {params(method: Symbol, args: BasicObject, blk: BasicObject).returns(Enumerator[T.untyped])}","insertTextFormat":1,"insertText":"enum_for"},{"label":"enum_for","kind":3,"detail":"sig {params(method: Symbol, args: BasicObject).returns(Enumerator[T.untyped])}","insertTextFormat":1,"insertText":"enum_for"},{"label":"format","kind":3,"detail":"sig {params(format: String, args: BasicObject).returns(String)}","insertTextFormat":1,"insertText":"format"},{"label":"lambda","kind":3,"detail":"sig {params(blk: BasicObject).returns(Proc)}","insertTextFormat":1,"insertText":"lambda"},{"label":"method","kind":3,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertTextFormat":1,"insertText":"method"},{"label":"method_a","kind":3,"detail":"sig {params(x: T.untyped, y: T.untyped).returns(T.untyped)}","insertTextFormat":1,"insertText":"method_a"},{"label":"method_b","kind":3,"detail":"sig {params(x: T.untyped).returns(T.untyped)}","insertTextFormat":1,"insertText":"method_b"},{"label":"methods","kind":3,"detail":"sig {params(regular: T.any(TrueClass, FalseClass)).returns(T::Array[Symbol])}","insertTextFormat":1,"insertText":"methods"},{"label":"private_methods","kind":3,"detail":"sig {params(all: T.any(TrueClass, FalseClass)).returns(T::Array[Symbol])}","insertTextFormat":1,"insertText":"private_methods"},{"label":"protected_methods","kind":3,"detail":"sig {params(all: T.any(TrueClass, FalseClass)).returns(T::Array[Symbol])}","insertTextFormat":1,"insertText":"protected_methods"},{"label":"public_method","kind":3,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertTextFormat":1,"insertText":"public_method"},{"label":"public_methods","kind":3,"detail":"sig {params(all: T.any(TrueClass, FalseClass)).returns(T::Array[Symbol])}","insertTextFormat":1,"insertText":"public_methods"},{"label":"remove_instance_variable","kind":3,"detail":"sig {params(arg0: Symbol).returns(T.untyped)}","insertTextFormat":1,"insertText":"remove_instance_variable"},{"label":"singleton_method","kind":3,"detail":"sig {params(arg0: Symbol).returns(Method)}","insertTextFormat":1,"insertText":"singleton_method"},{"label":"singleton_methods","kind":3,"detail":"sig {params(all: T.any(TrueClass, FalseClass)).returns(T::Array[Symbol])}","insertTextFormat":1,"insertText":"singleton_methods"},{"label":"to_enum","kind":3,"detail":"sig {params(method: Symbol, args: BasicObject, blk: BasicObject).returns(Enumerator[T.untyped])}","insertTextFormat":1,"insertText":"to_enum"},{"label":"to_enum","kind":3,"detail":"sig {params(method: Symbol, args: BasicObject).returns(Enumerator[T.untyped])}","insertTextFormat":1,"insertText":"to_enum"}]},"id":88}
