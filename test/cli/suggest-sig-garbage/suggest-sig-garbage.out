suggest-sig-garbage.rb:5: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     5 |def hazTwoArgs(a, b); 1; end;
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:5: Inserted `sig {generated.params(a: ::T::Utils::RuntimeProfiled, b: ::T::Utils::RuntimeProfiled).returns(Integer)}
`
     5 |def hazTwoArgs(a, b); 1; end;
        ^

suggest-sig-garbage.rb:8: Method `someCondition` does not exist on `Object` https://sorbet.org/docs/error-reference#7003
     8 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig-garbage.rb:7: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     7 |def baz
        ^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:7: Inserted `sig {generated.returns(T.any(T::Array[T.untyped], String))}
`
     7 |def baz
        ^

suggest-sig-garbage.rb:18: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    18 |def bla; give_me_void; end
        ^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:18: Inserted `sig {generated.void}
`
    18 |def bla; give_me_void; end
        ^

suggest-sig-garbage.rb:21: Method `someCondition` does not exist on `Object` https://sorbet.org/docs/error-reference#7003
    21 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig-garbage.rb:20: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    20 |def bbq
        ^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:20: Inserted `sig {generated.void}
`
    20 |def bbq
        ^

suggest-sig-garbage.rb:28: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    28 |def idk(a); a / a + a * a; end
        ^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:28: Inserted `sig {generated.params(a: ::T::Utils::RuntimeProfiled).returns(::T::Utils::RuntimeProfiled)}
`
    28 |def idk(a); a / a + a * a; end
        ^

suggest-sig-garbage.rb:30: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    30 |def give_me_literal; 1; end;
        ^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:30: Inserted `sig {generated.returns(Integer)}
`
    30 |def give_me_literal; 1; end;
        ^

suggest-sig-garbage.rb:32: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    32 |def give_me_literal_nested; [[1]]; end;
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:32: Inserted `sig {generated.returns(T::Array[T::Array[Integer]])}
`
    32 |def give_me_literal_nested; [[1]]; end;
        ^

suggest-sig-garbage.rb:34: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    34 |private def root_private; end
                ^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:34: Inserted `sig {generated.returns(NilClass)}
`
    34 |private def root_private; end
        ^

suggest-sig-garbage.rb:36: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    36 |protected def root_protected; end
                  ^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:36: Inserted `sig {generated.returns(NilClass)}
`
    36 |protected def root_protected; end
        ^

suggest-sig-garbage.rb:46: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    46 |def foo(a)
        ^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:46: Inserted `sig {generated.params(a: Integer).returns(Integer)}
`
    46 |def foo(a)
        ^

suggest-sig-garbage.rb:56: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    56 |def fooCond(a, cond)
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:56: Inserted `sig {generated.params(a: T.any(Integer, String), cond: ::T::Utils::RuntimeProfiled).void}
`
    56 |def fooCond(a, cond)
        ^

suggest-sig-garbage.rb:64: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    64 |def fooWhile(a, cond1, cond2)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:64: Inserted `sig {generated.params(a: T.any(Integer, String), cond1: ::T::Utils::RuntimeProfiled, cond2: ::T::Utils::RuntimeProfiled).returns(NilClass)}
`
    64 |def fooWhile(a, cond1, cond2)
        ^

suggest-sig-garbage.rb:74: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    74 |def takesBlock
        ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:74: Inserted `sig {generated.returns(Integer)}
`
    74 |def takesBlock
        ^

suggest-sig-garbage.rb:79: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    79 |def list_ints_or_empty_list
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:79: Inserted `sig {generated.returns(T::Array[T.untyped])}
`
    79 |def list_ints_or_empty_list
        ^

suggest-sig-garbage.rb:85: This code is unreachable https://sorbet.org/docs/error-reference#7006
    85 |  if true || qux || blah
                     ^^^

suggest-sig-garbage.rb:85: This code is unreachable https://sorbet.org/docs/error-reference#7006
    85 |  if true || qux || blah
                            ^^^^

suggest-sig-garbage.rb:88: This code is unreachable https://sorbet.org/docs/error-reference#7006
    88 |    takesString(x)
            ^^^^^^^^^^^^^^

suggest-sig-garbage.rb:84: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    84 |def dead(x)
        ^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:84: Inserted `sig {generated.params(x: Integer).void}
`
    84 |def dead(x)
        ^

suggest-sig-garbage.rb:92: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    92 |def with_block
        ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:92: Inserted `sig {generated.returns(NilClass)}
`
    92 |def with_block
        ^

suggest-sig-garbage.rb:98: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    98 |def takesRepated(*a); end;
        ^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:99: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    99 |def hasNoName(*); end;
        ^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:118: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     118 |def cantRun(a)
          ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:118: Inserted `sig {generated.params(a: ::T::Utils::RuntimeProfiled).returns(Integer)}
`
     118 |def cantRun(a)
          ^

suggest-sig-garbage.rb:125: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     125 |def fooCondGeneratedCurly(a, cond)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:124: Replaced with `sig {generated.params(a: T.any(Integer, String), cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
`
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated}
     125 |def fooCondGeneratedCurly(a, cond)

suggest-sig-garbage.rb:139: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     139 |def fooCondGeneratedDo(a, cond)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:134: Replaced with `sig {generated.params(a: T.any(Integer, String), cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
`
     134 |sig do
     135 |  params(a: T.untyped, cond: T::Boolean).
     136 |  returns(T.untyped).
     137 |  generated
     138 |end
     139 |def fooCondGeneratedDo(a, cond)

suggest-sig-garbage.rb:148: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     148 |def updatesUntypedToProfiled(a, cond)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:147: Replaced with `sig {generated.params(a: ::T::Utils::RuntimeProfiled, cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
`
     147 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated}
     148 |def updatesUntypedToProfiled(a, cond)

suggest-sig-garbage.rb:152: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     152 |def recur
          ^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:152: Inserted `sig {generated.returns(::T::Utils::RuntimeProfiled)}
`
     152 |def recur
          ^

suggest-sig-garbage.rb:41: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    41 |  private def a_private; end
                  ^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:41: Inserted `sig {generated.returns(NilClass)}
  `
    41 |  private def a_private; end
          ^

suggest-sig-garbage.rb:43: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
    43 |  protected def a_protected; end
                    ^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:43: Inserted `sig {generated.returns(NilClass)}
  `
    43 |  protected def a_protected; end
          ^

suggest-sig-garbage.rb:102: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:102: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:102: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:102: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:112: This function does not have a `sig` https://sorbet.org/docs/error-reference#7017
     112 |  def self.load_account_business_profile(merchant)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig-garbage.rb:112: Inserted `sig {generated.params(merchant: ::T::Utils::RuntimeProfiled).returns(Integer)}
  `
     112 |  def self.load_account_business_profile(merchant)
            ^
  Autocorrect: Done
    suggest-sig-garbage.rb:105: Inserted `  extend T::Sig
`
     105 |  class Merchant
          ^

suggest-sig-garbage.rb:108: Method `sig` does not exist on `T.class_of(TestCarash)` https://sorbet.org/docs/error-reference#7003
     108 |  sig {params(merchant: Merchant).void}
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig-garbage.rb:108: Method `params` does not exist on `T.class_of(TestCarash)` https://sorbet.org/docs/error-reference#7003
     108 |  sig {params(merchant: Merchant).void}
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
Errors: 37

--------------------------------------------------------------------------

# typed: strict

extend T::Sig

sig {generated.params(a: ::T::Utils::RuntimeProfiled, b: ::T::Utils::RuntimeProfiled).returns(Integer)}
def hazTwoArgs(a, b); 1; end;

sig {generated.returns(T.any(T::Array[T.untyped], String))}
def baz
  if someCondition
    []
  else
    "[]"
  end
end

sig {void}
def give_me_void; end

sig {generated.void}
def bla; give_me_void; end

sig {generated.void}
def bbq
  if someCondition
    give_me_void
  else
    nil
  end
end

sig {generated.params(a: ::T::Utils::RuntimeProfiled).returns(::T::Utils::RuntimeProfiled)}
def idk(a); a / a + a * a; end

sig {generated.returns(Integer)}
def give_me_literal; 1; end;

sig {generated.returns(T::Array[T::Array[Integer]])}
def give_me_literal_nested; [[1]]; end;

sig {generated.returns(NilClass)}
private def root_private; end

sig {generated.returns(NilClass)}
protected def root_protected; end

class A
  extend T::Sig

  sig {generated.returns(NilClass)}
  private def a_private; end

  sig {generated.returns(NilClass)}
  protected def a_protected; end
end

sig {generated.params(a: Integer).returns(Integer)}
def foo(a)
 1 + a
end

sig {params(a: Integer).void}
def takesInt(a); end;

sig {params(a: String).void}
def takesString(a); end;

sig {generated.params(a: T.any(Integer, String), cond: ::T::Utils::RuntimeProfiled).void}
def fooCond(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end

sig {generated.params(a: T.any(Integer, String), cond1: ::T::Utils::RuntimeProfiled, cond2: ::T::Utils::RuntimeProfiled).returns(NilClass)}
def fooWhile(a, cond1, cond2)
  while cond2
    if cond1
      takesInt(a)
    else
      takesString(a)
    end
  end
end

sig {generated.returns(Integer)}
def takesBlock
  yield 1
  2
end

sig {generated.returns(T::Array[T.untyped])}
def list_ints_or_empty_list
  x = T.let(1, T.nilable(Integer))
  x.nil? ? [x] : []
end

sig {generated.params(x: Integer).void}
def dead(x)
  if true || qux || blah
    takesInt(x)
  else
    takesString(x)
  end
end

sig {generated.returns(NilClass)}
def with_block
  yield
  nil
end


def takesRepated(*a); end;
def hasNoName(*); end;

# We used to generate multiple sigs for dsl'd methods here
Foo = Struct.new(:a, :b)

class TestCarash
  extend T::Sig
  class Merchant
  end

  sig {params(merchant: Merchant).void}
  def self.blar(merchant:)
  end

  sig {generated.params(merchant: ::T::Utils::RuntimeProfiled).returns(Integer)}
  def self.load_account_business_profile(merchant)
    blar(merchant: merchant)
    1
  end
end

sig {generated.params(a: ::T::Utils::RuntimeProfiled).returns(Integer)}
def cantRun(a)
  takesInt(a)
  takesString(a)
  1
end

sig {generated.params(a: T.any(Integer, String), cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
def fooCondGeneratedCurly(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end


sig {generated.params(a: T.any(Integer, String), cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
def fooCondGeneratedDo(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end

sig {generated.params(a: ::T::Utils::RuntimeProfiled, cond: T::Boolean).returns(::T::Utils::RuntimeProfiled)}
def updatesUntypedToProfiled(a, cond)
  a.baz
end

sig {generated.returns(::T::Utils::RuntimeProfiled)}
def recur
  recur
end
