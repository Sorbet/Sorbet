syntax = "proto3";

package com.stripe.rubytyper;
import "proto/Loc.proto";
import "proto/Type.proto";

message LocalVariable {
    string unique_name = 1;
    Type type = 2; // optional
}

message Instruction {
    message Block {
        // TODO later
        // We don't currently have any use for information about a block,
        // but we do need to know whether one exists or not. Use an empty
        // message for this, and later we can fill it in with fields.
    }

    message Send {
        LocalVariable receiver = 1;
        string method = 2;
        repeated LocalVariable arguments = 3;
        Block block = 4; // optional
    }

    message Cast {
        LocalVariable value = 1;
        Type type = 2;
    }

    enum Kind {
        UNKNOWN = 0;
        IDENT = 1;
        ALIAS = 2;
        SEND = 3;
        RETURN = 4;
        LITERAL = 5;
        UNANALYZABLE = 6;
        LOAD_ARG = 7;
        CAST = 8;
    }

    Kind kind = 1;

    oneof instr {
        LocalVariable ident = 100;
        string alias_full_name = 101;
        Send send = 102;
        LocalVariable return = 103;
        Type literal = 104;
        string load_arg_name = 105;
        Cast cast = 106;
    }
}

message Binding {
    LocalVariable bind = 1;
    Instruction instruction = 2;
    Loc location = 3;
}

message Block {
    message BlockExit {
        LocalVariable cond = 1; // optional
        int32 then_block = 2;
        int32 else_block = 3;
        Loc location = 4;
    }

    int32 id = 1;
    repeated Binding bindings = 2;
    BlockExit block_exit = 3;
}

message CFG {
    message Argument {
        string name = 1;
        Type type = 2;
    }

    string definition_full_name = 1;
    Loc location = 2;
    Type return_type = 3;
    repeated Argument arguments = 4;
    repeated Block blocks = 5;
}

message MultiCFG {
    repeated CFG cfg = 1;
}
