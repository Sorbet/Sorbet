# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stripe/all/stripe.rbi
#
# stripe-4.18.1
module Stripe
  def self._deprecated_uri_encode(params); end
  def self.api_base; end
  def self.api_base=(arg0); end
  def self.api_key; end
  def self.api_key=(arg0); end
  def self.api_version; end
  def self.api_version=(arg0); end
  def self.app_info; end
  def self.app_info=(info); end
  def self.ca_bundle_path; end
  def self.ca_bundle_path=(path); end
  def self.ca_store; end
  def self.client_id; end
  def self.client_id=(arg0); end
  def self.connect_base; end
  def self.connect_base=(arg0); end
  def self.enable_telemetry=(val); end
  def self.enable_telemetry?; end
  def self.initial_network_retry_delay; end
  def self.log_level; end
  def self.log_level=(val); end
  def self.logger; end
  def self.logger=(val); end
  def self.max_network_retries; end
  def self.max_network_retries=(val); end
  def self.max_network_retry_delay; end
  def self.open_timeout; end
  def self.open_timeout=(arg0); end
  def self.proxy; end
  def self.proxy=(arg0); end
  def self.read_timeout; end
  def self.read_timeout=(arg0); end
  def self.set_app_info(name, partner_id: nil, url: nil, version: nil); end
  def self.stripe_account; end
  def self.stripe_account=(arg0); end
  def self.uploads_base; end
  def self.uploads_base=(arg0); end
  def self.uri_encode(*args, &block); end
  def self.verify_ssl_certs; end
  def self.verify_ssl_certs=(arg0); end
end
module Stripe::APIOperations
end
module Stripe::APIOperations::Create
  def create(params = nil, opts = nil); end
end
module Stripe::APIOperations::Delete
  def delete(params = nil, opts = nil); end
  def self.included(base); end
end
module Stripe::APIOperations::Delete::ClassMethods
  def delete(id, params = nil, opts = nil); end
end
module Stripe::APIOperations::List
  def all(filters = nil, opts = nil); end
  def list(filters = nil, opts = nil); end
end
module Stripe::APIOperations::NestedResource
  def nested_resource_class_methods(resource, path: nil, operations: nil, resource_plural: nil); end
end
module Stripe::APIOperations::Request
  def request(method, url, params = nil, opts = nil); end
  def self.included(base); end
end
module Stripe::APIOperations::Request::ClassMethods
  def request(method, url, params = nil, opts = nil); end
  def warn_on_opts_in_params(params); end
end
module Stripe::APIOperations::Save
  def save(params = nil, opts = nil); end
  def save_url; end
  def self.included(base); end
end
module Stripe::APIOperations::Save::ClassMethods
  def update(id, params = nil, opts = nil); end
end
class Stripe::StripeError < StandardError
  def code; end
  def http_body; end
  def http_headers; end
  def http_status; end
  def initialize(message = nil, http_status: nil, http_body: nil, json_body: nil, http_headers: nil, code: nil); end
  def json_body; end
  def message; end
  def request_id; end
  def response; end
  def response=(arg0); end
  def to_s; end
end
class Stripe::AuthenticationError < Stripe::StripeError
end
class Stripe::APIConnectionError < Stripe::StripeError
end
class Stripe::APIError < Stripe::StripeError
end
class Stripe::CardError < Stripe::StripeError
  def initialize(message, param, code, http_status: nil, http_body: nil, json_body: nil, http_headers: nil); end
  def param; end
end
class Stripe::IdempotencyError < Stripe::StripeError
end
class Stripe::InvalidRequestError < Stripe::StripeError
  def initialize(message, param, http_status: nil, http_body: nil, json_body: nil, http_headers: nil, code: nil); end
  def param; end
  def param=(arg0); end
end
class Stripe::PermissionError < Stripe::StripeError
end
class Stripe::RateLimitError < Stripe::StripeError
end
class Stripe::SignatureVerificationError < Stripe::StripeError
  def initialize(message, sig_header, http_body: nil); end
  def sig_header; end
  def sig_header=(arg0); end
end
module Stripe::OAuth
  def self.authorize_url(params = nil, opts = nil); end
  def self.deauthorize(params = nil, opts = nil); end
  def self.get_client_id(params = nil); end
  def self.token(params = nil, opts = nil); end
end
class Stripe::OAuth::OAuthError < Stripe::StripeError
  def initialize(code, description, http_status: nil, http_body: nil, json_body: nil, http_headers: nil); end
end
class Stripe::OAuth::InvalidClientError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidGrantError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidRequestError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidScopeError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::UnsupportedGrantTypeError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::UnsupportedResponseTypeError < Stripe::OAuth::OAuthError
end
module Stripe::Util
  def self.check_api_key!(key); end
  def self.check_string_argument!(key); end
  def self.colorize(val, color, isatty); end
  def self.convert_to_stripe_object(data, opts = nil); end
  def self.encode_parameters(params); end
  def self.flatten_params(params, parent_key = nil); end
  def self.flatten_params_array(value, calculated_key); end
  def self.level_name(level); end
  def self.log_debug(message, data = nil); end
  def self.log_error(message, data = nil); end
  def self.log_info(message, data = nil); end
  def self.log_internal(message, data = nil, color: nil, level: nil, logger: nil, out: nil); end
  def self.normalize_headers(headers); end
  def self.normalize_id(id); end
  def self.normalize_opts(opts); end
  def self.object_classes; end
  def self.objects_to_ids(obj); end
  def self.request_id_dashboard_url(request_id, api_key); end
  def self.secure_compare(str_a, str_b); end
  def self.symbolize_names(object); end
  def self.url_encode(key); end
  def self.wrap_logfmt_value(val); end
end
class Stripe::StripeClient
  def api_url(url = nil, api_base = nil); end
  def check_api_key!(api_key); end
  def conn; end
  def conn=(arg0); end
  def execute_request(method, path, api_base: nil, api_key: nil, headers: nil, params: nil); end
  def execute_request_with_rescues(api_base, context); end
  def format_app_info(info); end
  def general_api_error(status, body); end
  def handle_error_response(http_resp, context); end
  def handle_network_error(error, context, num_retries, api_base = nil); end
  def initialize(conn = nil); end
  def log_request(context, num_retries); end
  def log_response(context, request_start, status, body); end
  def log_response_error(context, request_start, error); end
  def request; end
  def request_headers(api_key, method); end
  def self.active_client; end
  def self.default_client; end
  def self.default_conn; end
  def self.should_retry?(error, num_retries); end
  def self.sleep_time(num_retries); end
  def specific_api_error(resp, error_data, context); end
  def specific_oauth_error(resp, error_code, context); end
end
class Stripe::StripeClient::FaradayStripeEncoder
  def decode(_str); end
  def encode(hash); end
  def initialize; end
end
class Stripe::StripeClient::RequestLogContext
  def account; end
  def account=(arg0); end
  def api_key; end
  def api_key=(arg0); end
  def api_version; end
  def api_version=(arg0); end
  def body; end
  def body=(arg0); end
  def dup_from_response(resp); end
  def idempotency_key; end
  def idempotency_key=(arg0); end
  def method; end
  def method=(arg0); end
  def path; end
  def path=(arg0); end
  def query_params; end
  def query_params=(arg0); end
  def request_id; end
  def request_id=(arg0); end
end
class Stripe::StripeClient::SystemProfiler
  def initialize; end
  def self.uname; end
  def self.uname_from_system; end
  def self.uname_from_system_ver; end
  def user_agent; end
end
class Stripe::StripeClient::StripeRequestMetrics
  def initialize(request_id, request_duration_ms); end
  def payload; end
  def request_duration_ms; end
  def request_duration_ms=(arg0); end
  def request_id; end
  def request_id=(arg0); end
end
class Stripe::StripeObject
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def _deprecated_refresh_from(values, opts, partial = nil); end
  def add_accessors(keys, values); end
  def as_json(*opts); end
  def deleted?; end
  def dirty!; end
  def dirty_value!(value); end
  def each(&blk); end
  def empty_values(obj); end
  def eql?(other); end
  def hash; end
  def initialize(id = nil, opts = nil); end
  def initialize_from(values, opts, partial = nil); end
  def inspect; end
  def keys; end
  def marshal_dump; end
  def marshal_load(data); end
  def metaclass; end
  def method_missing(name, *args); end
  def refresh_from(*args, &block); end
  def remove_accessors(keys); end
  def respond_to_missing?(symbol, include_private = nil); end
  def self._deprecated_serialize_params(obj, options = nil); end
  def self.additive_object_param(name); end
  def self.additive_object_param?(name); end
  def self.construct_from(values, opts = nil); end
  def self.deep_copy(obj); end
  def self.protected_fields; end
  def self.serialize_params(*args, &block); end
  def serialize_params(options = nil); end
  def serialize_params_value(value, original, unsaved, force, key: nil); end
  def to_hash; end
  def to_json(*_opts); end
  def to_s(*_args); end
  def update_attributes(values, opts = nil, dirty: nil); end
  def values; end
  extend Gem::Deprecate
  include Enumerable
end
class Stripe::StripeResponse
  def data; end
  def data=(arg0); end
  def http_body; end
  def http_body=(arg0); end
  def http_headers; end
  def http_headers=(arg0); end
  def http_status; end
  def http_status=(arg0); end
  def request_id; end
  def request_id=(arg0); end
  def self.from_faraday_hash(http_resp); end
  def self.from_faraday_response(http_resp); end
end
class Stripe::ListObject < Stripe::StripeObject
  def [](key); end
  def auto_paging_each(&blk); end
  def each(&blk); end
  def empty?; end
  def filters; end
  def filters=(arg0); end
  def initialize(*args); end
  def next_page(params = nil, opts = nil); end
  def previous_page(params = nil, opts = nil); end
  def resource_url; end
  def retrieve(id, opts = nil); end
  def self.empty_list(opts = nil); end
  extend Stripe::APIOperations::Request::ClassMethods
  include Enumerable
  include Stripe::APIOperations::Create
  include Stripe::APIOperations::List
  include Stripe::APIOperations::Request
end
class Stripe::APIResource < Stripe::StripeObject
  def refresh; end
  def resource_url; end
  def save_with_parent; end
  def save_with_parent=(arg0); end
  def self.class_name; end
  def self.custom_method(name, http_verb:, http_path: nil); end
  def self.resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.save_nested_resource(name); end
  extend Stripe::APIOperations::Request::ClassMethods
  include Stripe::APIOperations::Request
end
class Stripe::SingletonAPIResource < Stripe::APIResource
  def resource_url; end
  def self.resource_url; end
  def self.retrieve(opts = nil); end
end
module Stripe::Webhook
  def self.construct_event(payload, sig_header, secret, tolerance: nil); end
end
module Stripe::Webhook::Signature
  def self.compute_signature(payload, secret); end
  def self.get_timestamp_and_signatures(header, scheme); end
  def self.verify_header(payload, header, secret, tolerance: nil); end
end
class Stripe::Account < Stripe::APIResource
  def _deprecated_bank_account=(value); end
  def bank_account=(*args, &block); end
  def deauthorize(client_id = nil, opts = nil); end
  def external_account=(value); end
  def legal_entity; end
  def legal_entity=(_legal_entity); end
  def persons(params = nil, opts = nil); end
  def reject(params = nil, opts = nil); end
  def resource_url; end
  def self.capabilitys_url(id, nested_id = nil); end
  def self.create_external_account(id, params = nil, opts = nil); end
  def self.create_login_link(id, params = nil, opts = nil); end
  def self.create_person(id, params = nil, opts = nil); end
  def self.delete_external_account(id, nested_id, params = nil, opts = nil); end
  def self.delete_person(id, nested_id, params = nil, opts = nil); end
  def self.external_accounts_url(id, nested_id = nil); end
  def self.list_capabilities(id, params = nil, opts = nil); end
  def self.list_external_accounts(id, params = nil, opts = nil); end
  def self.list_persons(id, params = nil, opts = nil); end
  def self.login_links_url(id, nested_id = nil); end
  def self.persons_url(id, nested_id = nil); end
  def self.protected_fields; end
  def self.reject(id, params = nil, opts = nil); end
  def self.retrieve(id = nil, opts = nil); end
  def self.retrieve_capability(id, nested_id, opts = nil); end
  def self.retrieve_external_account(id, nested_id, opts = nil); end
  def self.retrieve_person(id, nested_id, opts = nil); end
  def self.update_capability(id, nested_id, params = nil, opts = nil); end
  def self.update_external_account(id, nested_id, params = nil, opts = nil); end
  def self.update_person(id, nested_id, params = nil, opts = nil); end
  def serialize_additional_owners(legal_entity, additional_owners); end
  def serialize_params(options = nil); end
  def serialize_params_account(_obj, update_hash, options = nil); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::AccountLink < Stripe::APIResource
  extend Stripe::APIOperations::Create
end
class Stripe::AlipayAccount < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::ApplePayDomain < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::ApplicationFee < Stripe::APIResource
  def refund(params = nil, opts = nil); end
  def self.create_refund(id, params = nil, opts = nil); end
  def self.list_refunds(id, params = nil, opts = nil); end
  def self.refunds_url(id, nested_id = nil); end
  def self.retrieve_refund(id, nested_id, opts = nil); end
  def self.update_refund(id, nested_id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
end
class Stripe::ApplicationFeeRefund < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _api_key = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Balance < Stripe::SingletonAPIResource
end
class Stripe::BalanceTransaction < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::BankAccount < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  def verify(params = nil, opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::BitcoinReceiver < Stripe::APIResource
  def resource_url; end
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::BitcoinTransaction < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::Capability < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Card < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Charge < Stripe::APIResource
  def capture(params = nil, opts = nil); end
  def capture_url; end
  def close_dispute(params = nil, opts = nil); end
  def close_dispute_url; end
  def dispute_url; end
  def mark_as_fraudulent; end
  def mark_as_safe; end
  def refund(params = nil, opts = nil); end
  def refund_url; end
  def self.capture(id, params = nil, opts = nil); end
  def update_dispute(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Checkout
end
class Stripe::Checkout::Session < Stripe::APIResource
  extend Stripe::APIOperations::Create
end
class Stripe::CountrySpec < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::Coupon < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::CreditNote < Stripe::APIResource
  def self.void_credit_note(id, params = nil, opts = nil); end
  def void_credit_note(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Customer < Stripe::APIResource
  def add_invoice_item(params, opts = nil); end
  def cancel_subscription(params = nil, opts = nil); end
  def charges(params = nil, opts = nil); end
  def create_subscription(params = nil, opts = nil); end
  def create_upcoming_invoice(params = nil, opts = nil); end
  def delete_discount; end
  def discount_url; end
  def invoice_items(params = nil, opts = nil); end
  def invoices(params = nil, opts = nil); end
  def self.create_source(id, params = nil, opts = nil); end
  def self.create_tax_id(id, params = nil, opts = nil); end
  def self.delete_discount(id, params = nil, opts = nil); end
  def self.delete_source(id, nested_id, params = nil, opts = nil); end
  def self.delete_tax_id(id, nested_id, params = nil, opts = nil); end
  def self.detach_source(id, nested_id, params = nil, opts = nil); end
  def self.list_sources(id, params = nil, opts = nil); end
  def self.list_tax_ids(id, params = nil, opts = nil); end
  def self.retrieve_source(id, nested_id, opts = nil); end
  def self.retrieve_tax_id(id, nested_id, opts = nil); end
  def self.sources_url(id, nested_id = nil); end
  def self.tax_ids_url(id, nested_id = nil); end
  def self.update_source(id, nested_id, params = nil, opts = nil); end
  def source=(value); end
  def subscription_url; end
  def subscriptions_url; end
  def upcoming_invoice(params = nil, opts = nil); end
  def update_subscription(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Discount < Stripe::StripeObject
end
class Stripe::Dispute < Stripe::APIResource
  def _deprecated_close_url; end
  def close(params = nil, opts = nil); end
  def close_url(*args, &block); end
  def self.close(id, params = nil, opts = nil); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::EphemeralKey < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  include Stripe::APIOperations::Delete
end
class Stripe::Event < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::ExchangeRate < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::File < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::FileLink < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Invoice < Stripe::APIResource
  def finalize_invoice(params = nil, opts = nil); end
  def mark_uncollectible(params = nil, opts = nil); end
  def pay(params = nil, opts = nil); end
  def self.finalize_invoice(id, params = nil, opts = nil); end
  def self.mark_uncollectible(id, params = nil, opts = nil); end
  def self.pay(id, params = nil, opts = nil); end
  def self.send_invoice(id, params = nil, opts = nil); end
  def self.upcoming(params, opts = nil); end
  def self.void_invoice(id, params = nil, opts = nil); end
  def send_invoice(params = nil, opts = nil); end
  def void_invoice(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::InvoiceItem < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::InvoiceLineItem < Stripe::StripeObject
end
class Stripe::IssuerFraudRecord < Stripe::APIResource
  extend Stripe::APIOperations::List
end
module Stripe::Issuing
end
class Stripe::Issuing::Authorization < Stripe::APIResource
  def approve(params = nil, opts = nil); end
  def decline(params = nil, opts = nil); end
  def self.approve(id, params = nil, opts = nil); end
  def self.decline(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Card < Stripe::APIResource
  def details(params = nil, opts = nil); end
  def self.details(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::CardDetails < Stripe::StripeObject
end
class Stripe::Issuing::Cardholder < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Dispute < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Transaction < Stripe::APIResource
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::LoginLink < Stripe::APIResource
  def self.retrieve(_id, _opts = nil); end
end
class Stripe::Order < Stripe::APIResource
  def pay(params = nil, opts = nil); end
  def pay_url; end
  def return_order(params, opts = nil); end
  def returns_url; end
  def self.pay(id, params = nil, opts = nil); end
  def self.return_order(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::OrderReturn < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::PaymentIntent < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def capture(params = nil, opts = nil); end
  def confirm(params = nil, opts = nil); end
  def self.cancel(id, params = nil, opts = nil); end
  def self.capture(id, params = nil, opts = nil); end
  def self.confirm(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::PaymentMethod < Stripe::APIResource
  def attach(params = nil, opts = nil); end
  def detach(params = nil, opts = nil); end
  def self.attach(id, params = nil, opts = nil); end
  def self.detach(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Payout < Stripe::APIResource
  def _deprecated_cancel_url; end
  def cancel(params = nil, opts = nil); end
  def cancel_url(*args, &block); end
  def self.cancel(id, params = nil, opts = nil); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Person < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Plan < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Product < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
module Stripe::Radar
end
class Stripe::Radar::EarlyFraudWarning < Stripe::APIResource
  extend Stripe::APIOperations::List
end
class Stripe::Radar::ValueList < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Radar::ValueListItem < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::Recipient < Stripe::APIResource
  def transfers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::RecipientTransfer < Stripe::StripeObject
end
class Stripe::Refund < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Reporting
end
class Stripe::Reporting::ReportRun < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Reporting::ReportType < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Reversal < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Review < Stripe::APIResource
  def approve(params = nil, opts = nil); end
  def self.approve(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
end
module Stripe::Sigma
end
class Stripe::Sigma::ScheduledQueryRun < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::SKU < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Source < Stripe::APIResource
  def _deprecated_delete(params = nil, opts = nil); end
  def delete(*args, &block); end
  def detach(params = nil, opts = nil); end
  def self.verify(id, params = nil, opts = nil); end
  def source_transactions(params = nil, opts = nil); end
  def verify(params = nil, opts = nil); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::SourceTransaction < Stripe::StripeObject
end
class Stripe::Subscription < Stripe::APIResource
  def delete_discount; end
  def discount_url; end
  def self.delete_discount(id, params = nil, opts = nil); end
  def source=(value); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionItem < Stripe::APIResource
  def usage_record_summaries(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionSchedule < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def release(params = nil, opts = nil); end
  def revisions(params = nil, opts = nil); end
  def self.cancel(id, params = nil, opts = nil); end
  def self.list_revisions(id, params = nil, opts = nil); end
  def self.release(id, params = nil, opts = nil); end
  def self.retrieve_revision(id, nested_id, opts = nil); end
  def self.revisions_url(id, nested_id = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionScheduleRevision < Stripe::APIResource
  def resource_url; end
  def self.list(_id, _opts = nil); end
  def self.retrieve(_id, _opts = nil); end
  extend Stripe::APIOperations::List
end
class Stripe::TaxId < Stripe::APIResource
  def resource_url; end
  def self.retrieve(_id, _opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::TaxRate < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Terminal
end
class Stripe::Terminal::ConnectionToken < Stripe::APIResource
  extend Stripe::APIOperations::Create
end
class Stripe::Terminal::Location < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Terminal::Reader < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::ThreeDSecure < Stripe::APIResource
  def self.resource_url; end
  extend Stripe::APIOperations::Create
end
class Stripe::Token < Stripe::APIResource
  extend Stripe::APIOperations::Create
end
class Stripe::Topup < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Transfer < Stripe::APIResource
  def cancel; end
  def cancel_url; end
  def self.cancel(id, params = nil, opts = nil); end
  def self.create_reversal(id, params = nil, opts = nil); end
  def self.list_reversals(id, params = nil, opts = nil); end
  def self.retrieve_reversal(id, nested_id, opts = nil); end
  def self.reversals_url(id, nested_id = nil); end
  def self.update_reversal(id, nested_id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::UsageRecord < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
end
class Stripe::UsageRecordSummary < Stripe::StripeObject
end
class Stripe::WebhookEndpoint < Stripe::APIResource
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
module Stripe::OAuth::OAuthOperations
  def self.request(method, url, params, opts); end
  extend Stripe::APIOperations::Request::ClassMethods
end
