# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def bsearch(); end

  def bsearch_index(); end

  def collect!(); end

  def dig(*_); end

  def flatten!(*_); end

  def pack(*_); end

  def replace(_); end

  def to_h(); end
end

class Array
  def self.try_convert(_); end
end

BasicObject::BasicObject = BasicObject

class BasicObject
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ClassOverride
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class BigDecimal
  def clone(); end

  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  SIGN_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module BigDecimal::Deprecation
  def new(*args, **kwargs); end
end

module BigDecimal::Deprecation
end

class BigDecimal
  extend ::BigDecimal::Deprecation
  def self._load(_); end

  def self.double_fig(); end

  def self.inherited(subclass); end

  def self.limit(*_); end

  def self.mode(*_); end

  def self.new(*_); end

  def self.save_exception_mode(); end

  def self.save_limit(); end

  def self.save_rounding_mode(); end
end

module BigMath
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Binding
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def clone(); end

  def local_variable_defined?(_); end

  def local_variable_get(_); end

  def local_variable_set(_, _1); end

  def receiver(); end
end

module Bundler
  FREEBSD = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  ORIGINAL_ENV = ::T.let(nil, ::T.untyped)
  SUDO_MUTEX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WINDOWS = ::T.let(nil, ::T.untyped)
end

class Bundler::APIResponseMismatchError
  def status_code(); end
end

class Bundler::APIResponseMismatchError
end

module Bundler::BuildMetadata
end

module Bundler::BuildMetadata
  def self.built_at(); end

  def self.git_commit_sha(); end

  def self.release?(); end

  def self.to_h(); end
end

class Bundler::BundlerError
end

class Bundler::BundlerError
  def self.all_errors(); end

  def self.status_code(code); end
end

class Bundler::CurrentRuby
  def jruby?(); end

  def jruby_18?(); end

  def jruby_19?(); end

  def jruby_1?(); end

  def jruby_20?(); end

  def jruby_21?(); end

  def jruby_22?(); end

  def jruby_23?(); end

  def jruby_24?(); end

  def jruby_25?(); end

  def jruby_26?(); end

  def jruby_27?(); end

  def jruby_2?(); end

  def maglev?(); end

  def maglev_18?(); end

  def maglev_19?(); end

  def maglev_1?(); end

  def maglev_20?(); end

  def maglev_21?(); end

  def maglev_22?(); end

  def maglev_23?(); end

  def maglev_24?(); end

  def maglev_25?(); end

  def maglev_26?(); end

  def maglev_27?(); end

  def maglev_2?(); end

  def mingw?(); end

  def mingw_18?(); end

  def mingw_19?(); end

  def mingw_1?(); end

  def mingw_20?(); end

  def mingw_21?(); end

  def mingw_22?(); end

  def mingw_23?(); end

  def mingw_24?(); end

  def mingw_25?(); end

  def mingw_26?(); end

  def mingw_27?(); end

  def mingw_2?(); end

  def mri?(); end

  def mri_18?(); end

  def mri_19?(); end

  def mri_1?(); end

  def mri_20?(); end

  def mri_21?(); end

  def mri_22?(); end

  def mri_23?(); end

  def mri_24?(); end

  def mri_25?(); end

  def mri_26?(); end

  def mri_27?(); end

  def mri_2?(); end

  def mswin64?(); end

  def mswin64_18?(); end

  def mswin64_19?(); end

  def mswin64_1?(); end

  def mswin64_20?(); end

  def mswin64_21?(); end

  def mswin64_22?(); end

  def mswin64_23?(); end

  def mswin64_24?(); end

  def mswin64_25?(); end

  def mswin64_26?(); end

  def mswin64_27?(); end

  def mswin64_2?(); end

  def mswin?(); end

  def mswin_18?(); end

  def mswin_19?(); end

  def mswin_1?(); end

  def mswin_20?(); end

  def mswin_21?(); end

  def mswin_22?(); end

  def mswin_23?(); end

  def mswin_24?(); end

  def mswin_25?(); end

  def mswin_26?(); end

  def mswin_27?(); end

  def mswin_2?(); end

  def on_18?(); end

  def on_19?(); end

  def on_1?(); end

  def on_20?(); end

  def on_21?(); end

  def on_22?(); end

  def on_23?(); end

  def on_24?(); end

  def on_25?(); end

  def on_26?(); end

  def on_27?(); end

  def on_2?(); end

  def rbx?(); end

  def rbx_18?(); end

  def rbx_19?(); end

  def rbx_1?(); end

  def rbx_20?(); end

  def rbx_21?(); end

  def rbx_22?(); end

  def rbx_23?(); end

  def rbx_24?(); end

  def rbx_25?(); end

  def rbx_26?(); end

  def rbx_27?(); end

  def rbx_2?(); end

  def ruby?(); end

  def ruby_18?(); end

  def ruby_19?(); end

  def ruby_1?(); end

  def ruby_20?(); end

  def ruby_21?(); end

  def ruby_22?(); end

  def ruby_23?(); end

  def ruby_24?(); end

  def ruby_25?(); end

  def ruby_26?(); end

  def ruby_27?(); end

  def ruby_2?(); end

  def truffleruby?(); end

  def truffleruby_18?(); end

  def truffleruby_19?(); end

  def truffleruby_1?(); end

  def truffleruby_20?(); end

  def truffleruby_21?(); end

  def truffleruby_22?(); end

  def truffleruby_23?(); end

  def truffleruby_24?(); end

  def truffleruby_25?(); end

  def truffleruby_26?(); end

  def truffleruby_27?(); end

  def truffleruby_2?(); end

  def x64_mingw?(); end

  def x64_mingw_18?(); end

  def x64_mingw_19?(); end

  def x64_mingw_1?(); end

  def x64_mingw_20?(); end

  def x64_mingw_21?(); end

  def x64_mingw_22?(); end

  def x64_mingw_23?(); end

  def x64_mingw_24?(); end

  def x64_mingw_25?(); end

  def x64_mingw_26?(); end

  def x64_mingw_27?(); end

  def x64_mingw_2?(); end
  KNOWN_MAJOR_VERSIONS = ::T.let(nil, ::T.untyped)
  KNOWN_MINOR_VERSIONS = ::T.let(nil, ::T.untyped)
  KNOWN_PLATFORMS = ::T.let(nil, ::T.untyped)
end

class Bundler::CurrentRuby
end

class Bundler::CyclicDependencyError
  def status_code(); end
end

class Bundler::CyclicDependencyError
end

class Bundler::Definition
  include ::Bundler::GemHelpers
  def add_current_platform(); end

  def add_platform(platform); end

  def current_dependencies(); end

  def dependencies(); end

  def ensure_equivalent_gemfile_and_lockfile(explicit_flag=T.unsafe(nil)); end

  def find_indexed_specs(current_spec); end

  def find_resolved_spec(current_spec); end

  def gem_version_promoter(); end

  def gemfiles(); end

  def groups(); end

  def has_local_dependencies?(); end

  def has_rubygems_remotes?(); end

  def index(); end

  def initialize(lockfile, dependencies, sources, unlock, ruby_version=T.unsafe(nil), optional_groups=T.unsafe(nil), gemfiles=T.unsafe(nil)); end

  def lock(file, preserve_unknown_sections=T.unsafe(nil)); end

  def locked_bundler_version(); end

  def locked_deps(); end

  def locked_gems(); end

  def locked_ruby_version(); end

  def locked_ruby_version_object(); end

  def lockfile(); end

  def missing_specs(); end

  def missing_specs?(); end

  def new_platform?(); end

  def new_specs(); end

  def nothing_changed?(); end

  def platforms(); end

  def remove_platform(platform); end

  def removed_specs(); end

  def requested_specs(); end

  def requires(); end

  def resolve(); end

  def resolve_remotely!(); end

  def resolve_with_cache!(); end

  def ruby_version(); end

  def spec_git_paths(); end

  def specs(); end

  def specs_for(groups); end

  def to_lock(); end

  def unlocking?(); end

  def validate_platforms!(); end

  def validate_ruby!(); end

  def validate_runtime!(); end
end

class Bundler::Definition
  def self.build(gemfile, lockfile, unlock); end
end

class Bundler::DepProxy
  def ==(other); end

  def __platform(); end

  def dep(); end

  def eql?(other); end

  def initialize(dep, platform); end

  def name(); end

  def requirement(); end

  def type(); end
end

class Bundler::DepProxy
end

class Bundler::Dependency
  def autorequire(); end

  def current_env?(); end

  def current_platform?(); end

  def gem_platforms(valid_platforms); end

  def gemfile(); end

  def initialize(name, version, options=T.unsafe(nil), &blk); end

  def platforms(); end

  def should_include?(); end
  PLATFORM_MAP = ::T.let(nil, ::T.untyped)
  REVERSE_PLATFORM_MAP = ::T.let(nil, ::T.untyped)
end

class Bundler::Dependency
end

class Bundler::DeprecatedError
  def status_code(); end
end

class Bundler::DeprecatedError
end

class Bundler::Dsl
  include ::Bundler::RubyDsl
  def dependencies(); end

  def dependencies=(dependencies); end

  def env(name); end

  def eval_gemfile(gemfile, contents=T.unsafe(nil)); end

  def gem(name, *args); end

  def gemspec(opts=T.unsafe(nil)); end

  def gemspecs(); end

  def git(uri, options=T.unsafe(nil), &blk); end

  def git_source(name, &block); end

  def github(repo, options=T.unsafe(nil)); end

  def group(*args, &blk); end

  def install_if(*args); end

  def method_missing(name, *args); end

  def path(path, options=T.unsafe(nil), &blk); end

  def platform(*platforms); end

  def platforms(*platforms); end

  def plugin(*args); end

  def source(source, *args, &blk); end

  def to_definition(lockfile, unlock); end
  VALID_KEYS = ::T.let(nil, ::T.untyped)
  VALID_PLATFORMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Dsl::DSLError
  def contents(); end

  def description(); end

  def dsl_path(); end

  def initialize(description, dsl_path, backtrace, contents=T.unsafe(nil)); end
end

class Bundler::Dsl::DSLError
end

class Bundler::Dsl
  def self.evaluate(gemfile, lockfile, unlock); end
end

class Bundler::EndpointSpecification
  def __swap__(spec); end

  def _local_specification(); end

  def checksum(); end

  def dependencies=(dependencies); end

  def fetch_platform(); end

  def initialize(name, version, platform, dependencies, metadata=T.unsafe(nil)); end
  ILLFORMED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Bundler::EndpointSpecification
end

class Bundler::EnvironmentPreserver
  def backup(); end

  def initialize(env, keys); end

  def restore(); end
  BUNDLER_KEYS = ::T.let(nil, ::T.untyped)
  BUNDLER_PREFIX = ::T.let(nil, ::T.untyped)
  INTENTIONALLY_NIL = ::T.let(nil, ::T.untyped)
end

class Bundler::EnvironmentPreserver
end

class Bundler::FeatureFlag
  def allow_bundler_dependency_conflicts?(); end

  def allow_offline_install?(); end

  def auto_clean_without_path?(); end

  def auto_config_jobs?(); end

  def bundler_10_mode?(); end

  def bundler_1_mode?(); end

  def bundler_2_mode?(); end

  def bundler_3_mode?(); end

  def bundler_4_mode?(); end

  def bundler_5_mode?(); end

  def bundler_6_mode?(); end

  def bundler_7_mode?(); end

  def bundler_8_mode?(); end

  def bundler_9_mode?(); end

  def cache_all?(); end

  def cache_command_is_package?(); end

  def console_command?(); end

  def default_cli_command(); end

  def default_install_uses_path?(); end

  def deployment_means_frozen?(); end

  def disable_multisource?(); end

  def error_on_stderr?(); end

  def forget_cli_options?(); end

  def github_https?(); end

  def global_gem_cache?(); end

  def global_path_appends_ruby_scope?(); end

  def init_gems_rb?(); end

  def initialize(bundler_version); end

  def list_command?(); end

  def lockfile_upgrade_warning?(); end

  def lockfile_uses_separate_rubygems_sources?(); end

  def only_update_to_newer_versions?(); end

  def path_relative_to_cwd?(); end

  def plugins?(); end

  def prefer_gems_rb?(); end

  def print_only_version_number?(); end

  def setup_makes_kernel_gem_public?(); end

  def skip_default_git_sources?(); end

  def specific_platform?(); end

  def suppress_install_using_messages?(); end

  def unlock_source_unlocks_spec?(); end

  def update_requires_all_flag?(); end

  def use_gem_version_promoter_for_major_updates?(); end

  def viz_command?(); end
end

class Bundler::FeatureFlag
end

module Bundler::FileUtils
  include ::Bundler::FileUtils::StreamUtils_
  LOW_METHODS = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  OPT_TABLE = ::T.let(nil, ::T.untyped)
end

module Bundler::FileUtils::DryRun
  include ::Bundler::FileUtils
  include ::Bundler::FileUtils::StreamUtils_
  include ::Bundler::FileUtils::LowMethods
end

module Bundler::FileUtils::DryRun
  extend ::Bundler::FileUtils::DryRun
  extend ::Bundler::FileUtils
  extend ::Bundler::FileUtils::StreamUtils_
  extend ::Bundler::FileUtils::LowMethods
end

class Bundler::FileUtils::Entry_
  include ::Bundler::FileUtils::StreamUtils_
  def blockdev?(); end

  def chardev?(); end

  def chmod(mode); end

  def chown(uid, gid); end

  def copy(dest); end

  def copy_file(dest); end

  def copy_metadata(path); end

  def dereference?(); end

  def directory?(); end

  def door?(); end

  def entries(); end

  def exist?(); end

  def file?(); end

  def initialize(a, b=T.unsafe(nil), deref=T.unsafe(nil)); end

  def lstat(); end

  def lstat!(); end

  def path(); end

  def pipe?(); end

  def platform_support(); end

  def postorder_traverse(); end

  def prefix(); end

  def preorder_traverse(); end

  def rel(); end

  def remove(); end

  def remove_dir1(); end

  def remove_file(); end

  def socket?(); end

  def stat(); end

  def stat!(); end

  def symlink?(); end

  def traverse(); end

  def wrap_traverse(pre, post); end
  DIRECTORY_TERM = ::T.let(nil, ::T.untyped)
  SYSCASE = ::T.let(nil, ::T.untyped)
  S_IF_DOOR = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
end

module Bundler::FileUtils::LowMethods
end

module Bundler::FileUtils::LowMethods
end

module Bundler::FileUtils::NoWrite
  include ::Bundler::FileUtils
  include ::Bundler::FileUtils::StreamUtils_
  include ::Bundler::FileUtils::LowMethods
end

module Bundler::FileUtils::NoWrite
  extend ::Bundler::FileUtils::NoWrite
  extend ::Bundler::FileUtils
  extend ::Bundler::FileUtils::StreamUtils_
  extend ::Bundler::FileUtils::LowMethods
end

module Bundler::FileUtils::StreamUtils_
end

module Bundler::FileUtils::StreamUtils_
end

module Bundler::FileUtils::Verbose
  include ::Bundler::FileUtils
  include ::Bundler::FileUtils::StreamUtils_
end

module Bundler::FileUtils::Verbose
  extend ::Bundler::FileUtils::Verbose
  extend ::Bundler::FileUtils
  extend ::Bundler::FileUtils::StreamUtils_
end

module Bundler::FileUtils
  extend ::Bundler::FileUtils::StreamUtils_
  def self.cd(dir, verbose: T.unsafe(nil), &block); end

  def self.chdir(dir, verbose: T.unsafe(nil), &block); end

  def self.chmod(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chmod_R(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.chown(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chown_R(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.cmp(a, b); end

  def self.collect_method(opt); end

  def self.commands(); end

  def self.compare_file(a, b); end

  def self.compare_stream(a, b); end

  def self.copy(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.copy_entry(src, dest, preserve=T.unsafe(nil), dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end

  def self.copy_file(src, dest, preserve=T.unsafe(nil), dereference=T.unsafe(nil)); end

  def self.copy_stream(src, dest); end

  def self.cp(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.cp_r(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.getwd(); end

  def self.have_option?(mid, opt); end

  def self.identical?(a, b); end

  def self.install(src, dest, mode: T.unsafe(nil), owner: T.unsafe(nil), group: T.unsafe(nil), preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.link(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_s(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_sf(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.makedirs(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkdir(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkdir_p(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkpath(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.move(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.mv(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.options(); end

  def self.options_of(mid); end

  def self.private_module_function(name); end

  def self.pwd(); end

  def self.remove(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.remove_dir(path, force=T.unsafe(nil)); end

  def self.remove_entry(path, force=T.unsafe(nil)); end

  def self.remove_entry_secure(path, force=T.unsafe(nil)); end

  def self.remove_file(path, force=T.unsafe(nil)); end

  def self.rm(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_f(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_r(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.rm_rf(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.rmdir(list, parents: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rmtree(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.safe_unlink(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.symlink(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.touch(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), mtime: T.unsafe(nil), nocreate: T.unsafe(nil)); end

  def self.uptodate?(new, old_list); end
end

module Bundler::GemHelpers
  GENERICS = ::T.let(nil, ::T.untyped)
  GENERIC_CACHE = ::T.let(nil, ::T.untyped)
end

module Bundler::GemHelpers
  def self.generic(p); end

  def self.generic_local_platform(); end

  def self.platform_specificity_match(spec_platform, user_platform); end

  def self.select_best_platform_match(specs, platform); end
end

class Bundler::GemNotFound
  def status_code(); end
end

class Bundler::GemNotFound
end

class Bundler::GemRequireError
  def initialize(orig_exception, msg); end

  def orig_exception(); end

  def status_code(); end
end

class Bundler::GemRequireError
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::GemfileError
  def status_code(); end
end

class Bundler::GemfileError
end

class Bundler::GemfileEvalError
end

class Bundler::GemfileEvalError
end

class Bundler::GemfileLockNotFound
  def status_code(); end
end

class Bundler::GemfileLockNotFound
end

class Bundler::GemfileNotFound
  def status_code(); end
end

class Bundler::GemfileNotFound
end

class Bundler::GemspecError
  def status_code(); end
end

class Bundler::GemspecError
end

class Bundler::GenericSystemCallError
  def initialize(underlying_error, message); end

  def status_code(); end

  def underlying_error(); end
end

class Bundler::GenericSystemCallError
end

class Bundler::GitError
  def status_code(); end
end

class Bundler::GitError
end

class Bundler::HTTPError
  def filter_uri(uri); end

  def status_code(); end
end

class Bundler::HTTPError
end

class Bundler::Index
  include ::Enumerable
  def <<(spec); end

  def ==(other); end

  def [](query, base=T.unsafe(nil)); end

  def add_source(index); end

  def all_specs(); end

  def dependencies_eql?(spec, other_spec); end

  def dependency_names(); end

  def each(&blk); end

  def empty?(); end

  def local_search(query, base=T.unsafe(nil)); end

  def search(query, base=T.unsafe(nil)); end

  def search_all(name); end

  def size(); end

  def sort_specs(specs); end

  def sources(); end

  def spec_names(); end

  def specs(); end

  def unmet_dependency_names(); end

  def unsorted_search(query, base); end

  def use(other, override_dupes=T.unsafe(nil)); end
  EMPTY_SEARCH = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

class Bundler::Index
  def self.build(); end

  def self.sort_specs(specs); end
end

class Bundler::InstallError
  def status_code(); end
end

class Bundler::InstallError
end

class Bundler::InstallHookError
  def status_code(); end
end

class Bundler::InstallHookError
end

class Bundler::InvalidOption
  def status_code(); end
end

class Bundler::InvalidOption
end

class Bundler::LazySpecification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def ==(other); end

  def __materialize__(); end

  def dependencies(); end

  def full_name(); end

  def git_version(); end

  def identifier(); end

  def initialize(name, version, platform, source=T.unsafe(nil)); end

  def name(); end

  def platform(); end

  def remote(); end

  def remote=(remote); end

  def respond_to?(*args); end

  def satisfies?(dependency); end

  def source(); end

  def source=(source); end

  def to_lock(); end

  def version(); end
end

class Bundler::LazySpecification::Identifier
  include ::Comparable
  def dependencies(); end

  def dependencies=(_); end

  def name(); end

  def name=(_); end

  def platform(); end

  def platform=(_); end

  def platform_string(); end

  def source(); end

  def source=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::LazySpecification::Identifier
  def self.[](*_); end

  def self.members(); end
end

class Bundler::LazySpecification
end

class Bundler::LockfileError
  def status_code(); end
end

class Bundler::LockfileError
end

class Bundler::LockfileParser
  def bundler_version(); end

  def dependencies(); end

  def initialize(lockfile); end

  def platforms(); end

  def ruby_version(); end

  def sources(); end

  def specs(); end

  def warn_for_outdated_bundler_version(); end
  BUNDLED = ::T.let(nil, ::T.untyped)
  DEPENDENCIES = ::T.let(nil, ::T.untyped)
  ENVIRONMENT_VERSION_SECTIONS = ::T.let(nil, ::T.untyped)
  GEM = ::T.let(nil, ::T.untyped)
  GIT = ::T.let(nil, ::T.untyped)
  KNOWN_SECTIONS = ::T.let(nil, ::T.untyped)
  NAME_VERSION = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PLATFORMS = ::T.let(nil, ::T.untyped)
  PLUGIN = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
  SECTIONS_BY_VERSION_INTRODUCED = ::T.let(nil, ::T.untyped)
  SOURCE = ::T.let(nil, ::T.untyped)
  SPECS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::LockfileParser
  def self.sections_in_lockfile(lockfile_contents); end

  def self.sections_to_ignore(base_version=T.unsafe(nil)); end

  def self.unknown_sections_in_lockfile(lockfile_contents); end
end

class Bundler::MarshalError
end

class Bundler::MarshalError
end

module Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def match_platform(p); end
end

module Bundler::MatchPlatform
  def self.platforms_match?(gemspec_platform, local_platform); end
end

module Bundler::Molinillo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::Molinillo::CircularDependencyError
  def dependencies(); end

  def initialize(vertices); end
end

class Bundler::Molinillo::CircularDependencyError
end

module Bundler::Molinillo::Compatibility
end

module Bundler::Molinillo::Compatibility
  def self.flat_map(enum, &blk); end
end

module Bundler::Molinillo::Delegates
end

module Bundler::Molinillo::Delegates::ResolutionState
  def activated(); end

  def conflicts(); end

  def depth(); end

  def name(); end

  def possibilities(); end

  def requirement(); end

  def requirements(); end

  def unused_unwind_options(); end
end

module Bundler::Molinillo::Delegates::ResolutionState
end

module Bundler::Molinillo::Delegates::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Bundler::Molinillo::Delegates::SpecificationProvider
end

module Bundler::Molinillo::Delegates
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
  include ::TSort
  def ==(other); end

  def add_child_vertex(name, payload, parent_names, requirement); end

  def add_edge(origin, destination, requirement); end

  def add_vertex(name, payload, root=T.unsafe(nil)); end

  def delete_edge(edge); end

  def detach_vertex_named(name); end

  def each(); end

  def log(); end

  def rewind_to(tag); end

  def root_vertex_named(name); end

  def set_payload(name, payload); end

  def tag(tag); end

  def to_dot(options=T.unsafe(nil)); end

  def tsort_each_child(vertex, &block); end

  def vertex_named(name); end

  def vertices(); end
end

class Bundler::Molinillo::DependencyGraph::Action
  def down(graph); end

  def next(); end

  def next=(_); end

  def previous(); end

  def previous=(previous); end

  def up(graph); end
end

class Bundler::Molinillo::DependencyGraph::Action
  def self.action_name(); end
end

class Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular
  def destination(); end

  def initialize(origin, destination, requirement); end

  def make_edge(graph); end

  def origin(); end

  def requirement(); end
end

class Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular
end

class Bundler::Molinillo::DependencyGraph::AddVertex
  def initialize(name, payload, root); end

  def name(); end

  def payload(); end

  def root(); end
end

class Bundler::Molinillo::DependencyGraph::AddVertex
end

class Bundler::Molinillo::DependencyGraph::DeleteEdge
  def destination_name(); end

  def initialize(origin_name, destination_name, requirement); end

  def make_edge(graph); end

  def origin_name(); end

  def requirement(); end
end

class Bundler::Molinillo::DependencyGraph::DeleteEdge
end

class Bundler::Molinillo::DependencyGraph::DetachVertexNamed
  def initialize(name); end

  def name(); end
end

class Bundler::Molinillo::DependencyGraph::DetachVertexNamed
end

class Bundler::Molinillo::DependencyGraph::Edge
  def destination(); end

  def destination=(_); end

  def origin(); end

  def origin=(_); end

  def requirement(); end

  def requirement=(_); end
end

class Bundler::Molinillo::DependencyGraph::Edge
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::SetPayload
  def initialize(name, payload); end

  def name(); end

  def payload(); end
end

class Bundler::Molinillo::DependencyGraph::SetPayload
end

class Bundler::Molinillo::DependencyGraph::Tag
  def down(_graph); end

  def initialize(tag); end

  def tag(); end

  def up(_graph); end
end

class Bundler::Molinillo::DependencyGraph::Tag
end

class Bundler::Molinillo::DependencyGraph::Vertex
  def ==(other); end

  def _path_to?(other, visited=T.unsafe(nil)); end

  def ancestor?(other); end

  def descendent?(other); end

  def eql?(other); end

  def explicit_requirements(); end

  def incoming_edges(); end

  def incoming_edges=(incoming_edges); end

  def initialize(name, payload); end

  def is_reachable_from?(other); end

  def name(); end

  def name=(name); end

  def outgoing_edges(); end

  def outgoing_edges=(outgoing_edges); end

  def path_to?(other); end

  def payload(); end

  def payload=(payload); end

  def predecessors(); end

  def recursive_predecessors(); end

  def recursive_successors(); end

  def requirements(); end

  def root(); end

  def root=(root); end

  def root?(); end

  def shallow_eql?(other); end

  def successors(); end
end

class Bundler::Molinillo::DependencyGraph::Vertex
end

class Bundler::Molinillo::DependencyGraph
  def self.tsort(vertices); end
end

class Bundler::Molinillo::DependencyState
  def pop_possibility_state(); end
end

class Bundler::Molinillo::DependencyState
end

class Bundler::Molinillo::NoSuchDependencyError
  def dependency(); end

  def dependency=(dependency); end

  def initialize(dependency, required_by=T.unsafe(nil)); end

  def required_by(); end

  def required_by=(required_by); end
end

class Bundler::Molinillo::NoSuchDependencyError
end

class Bundler::Molinillo::PossibilityState
end

class Bundler::Molinillo::PossibilityState
end

class Bundler::Molinillo::ResolutionState
  def activated(); end

  def activated=(_); end

  def conflicts(); end

  def conflicts=(_); end

  def depth(); end

  def depth=(_); end

  def name(); end

  def name=(_); end

  def possibilities(); end

  def possibilities=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirements(); end

  def requirements=(_); end

  def unused_unwind_options(); end

  def unused_unwind_options=(_); end
end

class Bundler::Molinillo::ResolutionState
  def self.[](*_); end

  def self.empty(); end

  def self.members(); end
end

class Bundler::Molinillo::Resolver
  def initialize(specification_provider, resolver_ui); end

  def resolve(requested, base=T.unsafe(nil)); end

  def resolver_ui(); end

  def specification_provider(); end
end

class Bundler::Molinillo::Resolver::Resolution
  include ::Bundler::Molinillo::Delegates::ResolutionState
  include ::Bundler::Molinillo::Delegates::SpecificationProvider
  def base(); end

  def initialize(specification_provider, resolver_ui, requested, base); end

  def iteration_rate=(iteration_rate); end

  def original_requested(); end

  def resolve(); end

  def resolver_ui(); end

  def specification_provider(); end

  def started_at=(started_at); end

  def states=(states); end
end

class Bundler::Molinillo::Resolver::Resolution::Conflict
  def activated_by_name(); end

  def activated_by_name=(_); end

  def existing(); end

  def existing=(_); end

  def locked_requirement(); end

  def locked_requirement=(_); end

  def possibility(); end

  def possibility_set(); end

  def possibility_set=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements(); end

  def requirements=(_); end

  def underlying_error(); end

  def underlying_error=(_); end
end

class Bundler::Molinillo::Resolver::Resolution::Conflict
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Molinillo::Resolver::Resolution::PossibilitySet
  def dependencies(); end

  def dependencies=(_); end

  def latest_version(); end

  def possibilities(); end

  def possibilities=(_); end
end

class Bundler::Molinillo::Resolver::Resolution::PossibilitySet
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Molinillo::Resolver::Resolution::UnwindDetails
  include ::Comparable
  def all_requirements(); end

  def conflicting_requirements(); end

  def conflicting_requirements=(_); end

  def requirement_tree(); end

  def requirement_tree=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements_unwound_to_instead(); end

  def requirements_unwound_to_instead=(_); end

  def reversed_requirement_tree_index(); end

  def state_index(); end

  def state_index=(_); end

  def state_requirement(); end

  def state_requirement=(_); end

  def sub_dependencies_to_avoid(); end

  def unwinding_to_primary_requirement?(); end
end

class Bundler::Molinillo::Resolver::Resolution::UnwindDetails
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Molinillo::Resolver::Resolution
end

class Bundler::Molinillo::Resolver
end

class Bundler::Molinillo::ResolverError
end

class Bundler::Molinillo::ResolverError
end

module Bundler::Molinillo::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Bundler::Molinillo::SpecificationProvider
end

module Bundler::Molinillo::UI
  def after_resolution(); end

  def before_resolution(); end

  def debug(depth=T.unsafe(nil)); end

  def debug?(); end

  def indicate_progress(); end

  def output(); end

  def progress_rate(); end
end

module Bundler::Molinillo::UI
end

class Bundler::Molinillo::VersionConflict
  include ::Bundler::Molinillo::Delegates::SpecificationProvider
  def conflicts(); end

  def initialize(conflicts, specification_provider); end

  def message_with_trees(opts=T.unsafe(nil)); end

  def specification_provider(); end
end

class Bundler::Molinillo::VersionConflict
end

module Bundler::Molinillo
end

class Bundler::NoSpaceOnDeviceError
end

class Bundler::NoSpaceOnDeviceError
end

class Bundler::OperationNotSupportedError
end

class Bundler::OperationNotSupportedError
end

class Bundler::PathError
  def status_code(); end
end

class Bundler::PathError
end

class Bundler::PermissionError
  def action(); end

  def initialize(path, permission_type=T.unsafe(nil)); end

  def status_code(); end
end

class Bundler::PermissionError
end

module Bundler::Plugin
  PLUGIN_FILE_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::API
  def cache_dir(); end

  def method_missing(name, *args, &blk); end

  def tmp(*names); end
end

class Bundler::Plugin::API
  def self.command(command, cls=T.unsafe(nil)); end

  def self.hook(event, &block); end

  def self.source(source, cls=T.unsafe(nil)); end
end

class Bundler::Plugin::MalformattedPlugin
end

class Bundler::Plugin::MalformattedPlugin
end

class Bundler::Plugin::UndefinedCommandError
end

class Bundler::Plugin::UndefinedCommandError
end

class Bundler::Plugin::UnknownSourceError
end

class Bundler::Plugin::UnknownSourceError
end

module Bundler::Plugin
  def self.add_command(command, cls); end

  def self.add_hook(event, &block); end

  def self.add_source(source, cls); end

  def self.cache(); end

  def self.command?(command); end

  def self.exec_command(command, args); end

  def self.gemfile_install(gemfile=T.unsafe(nil), &inline); end

  def self.global_root(); end

  def self.hook(event, *args, &arg_blk); end

  def self.index(); end

  def self.install(names, options); end

  def self.installed?(plugin); end

  def self.local_root(); end

  def self.reset!(); end

  def self.root(); end

  def self.source(name); end

  def self.source?(name); end

  def self.source_from_lock(locked_opts); end
end

class Bundler::PluginError
  def status_code(); end
end

class Bundler::PluginError
end

class Bundler::ProductionError
  def status_code(); end
end

class Bundler::ProductionError
end

class Bundler::RemoteSpecification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  include ::Comparable
  def __swap__(spec); end

  def dependencies(); end

  def dependencies=(dependencies); end

  def fetch_platform(); end

  def full_name(); end

  def git_version(); end

  def initialize(name, version, platform, spec_fetcher); end

  def name(); end

  def platform(); end

  def remote(); end

  def remote=(remote); end

  def respond_to?(method, include_all=T.unsafe(nil)); end

  def sort_obj(); end

  def source(); end

  def source=(source); end

  def version(); end
end

class Bundler::RemoteSpecification
end

class Bundler::Resolver
  include ::Bundler::Molinillo::UI
  include ::Bundler::Molinillo::SpecificationProvider
  def index_for(dependency); end

  def initialize(index, source_requirements, base, gem_version_promoter, additional_base_requirements, platforms); end

  def relevant_sources_for_vertex(vertex); end

  def start(requirements); end
end

class Bundler::Resolver::SpecGroup
  include ::Bundler::GemHelpers
  def ==(other); end

  def activate_platform!(platform); end

  def dependencies_for_activated_platforms(); end

  def eql?(other); end

  def for?(platform); end

  def ignores_bundler_dependencies(); end

  def ignores_bundler_dependencies=(ignores_bundler_dependencies); end

  def initialize(all_specs); end

  def name(); end

  def name=(name); end

  def source(); end

  def source=(source); end

  def to_specs(); end

  def version(); end

  def version=(version); end
end

class Bundler::Resolver::SpecGroup
end

class Bundler::Resolver
  def self.platform_sort_key(platform); end

  def self.resolve(requirements, index, source_requirements=T.unsafe(nil), base=T.unsafe(nil), gem_version_promoter=T.unsafe(nil), additional_base_requirements=T.unsafe(nil), platforms=T.unsafe(nil)); end

  def self.sort_platforms(platforms); end
end

module Bundler::RubyDsl
  def ruby(*ruby_version); end
end

module Bundler::RubyDsl
end

class Bundler::RubyVersion
  def ==(other); end

  def diff(other); end

  def engine(); end

  def engine_gem_version(); end

  def engine_versions(); end

  def exact?(); end

  def gem_version(); end

  def host(); end

  def initialize(versions, patchlevel, engine, engine_version); end

  def patchlevel(); end

  def single_version_string(); end

  def to_gem_version_with_patchlevel(); end

  def to_s(versions=T.unsafe(nil)); end

  def versions(); end

  def versions_string(versions); end
  PATTERN = ::T.let(nil, ::T.untyped)
end

class Bundler::RubyVersion
  def self.from_string(string); end

  def self.system(); end
end

class Bundler::RubyVersionMismatch
  def status_code(); end
end

class Bundler::RubyVersionMismatch
end

class Bundler::RubygemsIntegration
  def backport_base_dir(); end

  def backport_cache_file(); end

  def backport_segment_generation(); end

  def backport_spec_file(); end

  def backport_yaml_initialize(); end

  def bin_path(gem, bin, ver); end

  def binstubs_call_gem?(); end

  def build(spec, skip_validation=T.unsafe(nil)); end

  def build_args(); end

  def build_args=(args); end

  def build_gem(gem_dir, spec); end

  def clear_paths(); end

  def config_map(); end

  def configuration(); end

  def download_gem(spec, uri, path); end

  def ext_lock(); end

  def fetch_all_remote_specs(remote); end

  def fetch_prerelease_specs(); end

  def fetch_specs(all, pre, &blk); end

  def gem_bindir(); end

  def gem_cache(); end

  def gem_dir(); end

  def gem_from_path(path, policy=T.unsafe(nil)); end

  def gem_path(); end

  def inflate(obj); end

  def install_with_build_args(args); end

  def load_path_insert_index(); end

  def load_plugin_files(files); end

  def load_plugins(); end

  def loaded_gem_paths(); end

  def loaded_specs(name); end

  def mark_loaded(spec); end

  def marshal_spec_dir(); end

  def method_visibility(klass, method); end

  def path(obj); end

  def path_separator(); end

  def platforms(); end

  def post_reset_hooks(); end

  def preserve_paths(); end

  def provides?(req_str); end

  def read_binary(path); end

  def redefine_method(klass, method, unbound_method=T.unsafe(nil), &block); end

  def replace_bin_path(specs, specs_by_name); end

  def replace_entrypoints(specs); end

  def replace_gem(specs, specs_by_name); end

  def replace_refresh(); end

  def repository_subdirectories(); end

  def reset(); end

  def reverse_rubygems_kernel_mixin(); end

  def ruby_engine(); end

  def security_policies(); end

  def security_policy_keys(); end

  def set_installed_by_version(spec, installed_by_version=T.unsafe(nil)); end

  def sources(); end

  def sources=(val); end

  def spec_cache_dirs(); end

  def spec_default_gem?(spec); end

  def spec_extension_dir(spec); end

  def spec_from_gem(path, policy=T.unsafe(nil)); end

  def spec_matches_for_glob(spec, glob); end

  def spec_missing_extensions?(spec, default=T.unsafe(nil)); end

  def stub_set_spec(stub, spec); end

  def stub_source_index(specs); end

  def stubs_provide_full_functionality?(); end

  def suffix_pattern(); end

  def ui=(obj); end

  def undo_replacements(); end

  def user_home(); end

  def validate(spec); end

  def version(); end

  def with_build_args(args); end
  EXT_LOCK = ::T.let(nil, ::T.untyped)
end

class Bundler::RubygemsIntegration::AlmostModern
end

class Bundler::RubygemsIntegration::AlmostModern
end

class Bundler::RubygemsIntegration::Ancient
end

class Bundler::RubygemsIntegration::Ancient
end

class Bundler::RubygemsIntegration::Future
  def all_specs(); end

  def fetch_specs(source, remote, name); end

  def find_name(name); end

  def gem_remote_fetcher(); end

  def stub_rubygems(specs); end
end

class Bundler::RubygemsIntegration::Future
end

class Bundler::RubygemsIntegration::Legacy
  def all_specs(); end

  def find_name(name); end

  def stub_rubygems(specs); end
end

class Bundler::RubygemsIntegration::Legacy
end

class Bundler::RubygemsIntegration::Modern
  def all_specs(); end

  def find_name(name); end

  def stub_rubygems(specs); end
end

class Bundler::RubygemsIntegration::Modern
end

class Bundler::RubygemsIntegration::MoreFuture
  def backport_ext_builder_monitor(); end

  def use_gemdeps(gemfile); end
end

class Bundler::RubygemsIntegration::MoreFuture
end

class Bundler::RubygemsIntegration::MoreModern
end

class Bundler::RubygemsIntegration::MoreModern
end

class Bundler::RubygemsIntegration::Transitional
end

class Bundler::RubygemsIntegration::Transitional
end

class Bundler::RubygemsIntegration
  def self.provides?(req_str); end

  def self.version(); end
end

class Bundler::Runtime
  include ::Bundler::SharedHelpers
  def cache(custom_path=T.unsafe(nil)); end

  def clean(dry_run=T.unsafe(nil)); end

  def current_dependencies(); end

  def dependencies(); end

  def gems(); end

  def initialize(root, definition); end

  def lock(opts=T.unsafe(nil)); end

  def prune_cache(cache_path); end

  def requested_specs(); end

  def require(*groups); end

  def requires(); end

  def setup(*groups); end

  def specs(); end
  REQUIRE_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Runtime
end

class Bundler::SecurityError
  def status_code(); end
end

class Bundler::SecurityError
end

class Bundler::Settings
  def [](name); end

  def all(); end

  def allow_sudo?(); end

  def app_cache_path(); end

  def credentials_for(uri); end

  def gem_mirrors(); end

  def ignore_config?(); end

  def initialize(root=T.unsafe(nil)); end

  def key_for(key); end

  def local_overrides(); end

  def locations(key); end

  def mirror_for(uri); end

  def path(); end

  def pretty_values_for(exposed_key); end

  def set_command_option(key, value); end

  def set_command_option_if_given(key, value); end

  def set_global(key, value); end

  def set_local(key, value); end

  def temporary(update); end

  def validate!(); end
  ARRAY_KEYS = ::T.let(nil, ::T.untyped)
  BOOL_KEYS = ::T.let(nil, ::T.untyped)
  CONFIG_REGEX = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  NORMALIZE_URI_OPTIONS_PATTERN = ::T.let(nil, ::T.untyped)
  NUMBER_KEYS = ::T.let(nil, ::T.untyped)
  PER_URI_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Path
  def append_ruby_scope(); end

  def append_ruby_scope=(_); end

  def base_path(); end

  def base_path_relative_to_pwd(); end

  def default_install_uses_path(); end

  def default_install_uses_path=(_); end

  def explicit_path(); end

  def explicit_path=(_); end

  def path(); end

  def system_path(); end

  def system_path=(_); end

  def use_system_gems?(); end

  def validate!(); end
end

class Bundler::Settings::Path
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Settings
  def self.normalize_uri(uri); end
end

module Bundler::SharedHelpers
  def chdir(dir, &blk); end

  def const_get_safely(constant_name, namespace); end

  def default_bundle_dir(); end

  def default_gemfile(); end

  def default_lockfile(); end

  def digest(name); end

  def ensure_same_dependencies(spec, old_deps, new_deps); end

  def filesystem_access(path, action=T.unsafe(nil), &block); end

  def in_bundle?(); end

  def major_deprecation(major_version, message); end

  def md5_available?(); end

  def pretty_dependency(dep, print_source=T.unsafe(nil)); end

  def print_major_deprecations!(); end

  def pwd(); end

  def root(); end

  def set_bundle_environment(); end

  def set_env(key, value); end

  def trap(signal, override=T.unsafe(nil), &block); end

  def with_clean_git_env(&block); end

  def write_to_gemfile(gemfile_path, contents); end
end

module Bundler::SharedHelpers
  extend ::Bundler::SharedHelpers
end

class Bundler::Source
  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def dependency_names_to_double_check(); end

  def double_check_for(*_); end

  def extension_cache_path(spec); end

  def include?(other); end

  def path?(); end

  def unmet_deps(); end

  def version_message(spec); end
end

class Bundler::Source::Gemspec
  def as_path_source(); end

  def gemspec(); end
end

class Bundler::Source::Gemspec
end

class Bundler::Source::Git
  def allow_git_ops?(); end

  def branch(); end

  def cache_path(); end

  def extension_dir_name(); end

  def install_path(); end

  def local_override!(path); end

  def ref(); end

  def revision(); end

  def specs(*_); end

  def submodules(); end

  def unlock!(); end

  def uri(); end
end

class Bundler::Source::Git
end

class Bundler::Source::Metadata
  def ==(other); end

  def cached!(); end

  def eql?(other); end

  def install(spec, _opts=T.unsafe(nil)); end

  def options(); end

  def remote!(); end

  def specs(); end
end

class Bundler::Source::Metadata
end

class Bundler::Source::Path
  def ==(other); end

  def app_cache_dirname(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def eql?(other); end

  def expanded_original_path(); end

  def initialize(options); end

  def install(spec, options=T.unsafe(nil)); end

  def local_specs(*_); end

  def name(); end

  def name=(name); end

  def options(); end

  def original_path(); end

  def path(); end

  def remote!(); end

  def root(); end

  def root_path(); end

  def specs(); end

  def to_lock(); end

  def version(); end

  def version=(version); end
  DEFAULT_GLOB = ::T.let(nil, ::T.untyped)
end

class Bundler::Source::Path
  def self.from_lock(options); end
end

class Bundler::Source::Rubygems
  def ==(other); end

  def add_remote(source); end

  def api_fetchers(); end

  def builtin_gem?(spec); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cache_path(); end

  def cached!(); end

  def cached_built_in_gem(spec); end

  def cached_gem(spec); end

  def cached_path(spec); end

  def cached_specs(); end

  def caches(); end

  def credless_remotes(); end

  def double_check_for(unmet_dependency_names); end

  def eql?(other); end

  def equivalent_remotes?(other_remotes); end

  def fetch_gem(spec); end

  def fetch_names(fetchers, dependency_names, index, override_dupes); end

  def fetchers(); end

  def include?(o); end

  def initialize(options=T.unsafe(nil)); end

  def install(spec, opts=T.unsafe(nil)); end

  def installed?(spec); end

  def installed_specs(); end

  def loaded_from(spec); end

  def name(); end

  def normalize_uri(uri); end

  def options(); end

  def remote!(); end

  def remote_specs(); end

  def remotes(); end

  def remotes_for_spec(spec); end

  def remove_auth(remote); end

  def replace_remotes(other_remotes, allow_equivalent=T.unsafe(nil)); end

  def requires_sudo?(); end

  def rubygems_dir(); end

  def specs(); end

  def suppress_configured_credentials(remote); end

  def to_lock(); end
  API_REQUEST_LIMIT = ::T.let(nil, ::T.untyped)
  API_REQUEST_SIZE = ::T.let(nil, ::T.untyped)
end

class Bundler::Source::Rubygems
  def self.from_lock(options); end
end

class Bundler::Source
end

class Bundler::SourceList
  def add_git_source(options=T.unsafe(nil)); end

  def add_path_source(options=T.unsafe(nil)); end

  def add_plugin_source(source, options=T.unsafe(nil)); end

  def add_rubygems_remote(uri); end

  def add_rubygems_source(options=T.unsafe(nil)); end

  def all_sources(); end

  def cached!(); end

  def default_source(); end

  def get(source); end

  def git_sources(); end

  def global_rubygems_source(); end

  def global_rubygems_source=(uri); end

  def lock_sources(); end

  def metadata_source(); end

  def path_sources(); end

  def plugin_sources(); end

  def remote!(); end

  def replace_sources!(replacement_sources); end

  def rubygems_primary_remotes(); end

  def rubygems_remotes(); end

  def rubygems_sources(); end
end

class Bundler::SourceList
end

class Bundler::SpecSet
  include ::Enumerable
  include ::TSort
  def <<(spec); end

  def [](key); end

  def []=(key, value); end

  def each(&b); end

  def empty?(); end

  def find_by_name_and_platform(name, platform); end

  def for(dependencies, skip=T.unsafe(nil), check=T.unsafe(nil), match_current_platform=T.unsafe(nil), raise_on_missing=T.unsafe(nil)); end

  def initialize(specs); end

  def length(); end

  def materialize(deps, missing_specs=T.unsafe(nil)); end

  def materialized_for_all_platforms(); end

  def merge(set); end

  def size(); end

  def sort!(); end

  def to_a(); end

  def to_hash(); end

  def valid_for?(deps); end

  def what_required(spec); end
end

class Bundler::SpecSet
end

class Bundler::StubSpecification
  def activated(); end

  def activated=(activated); end

  def default_gem(); end

  def full_gem_path(); end

  def full_require_paths(); end

  def ignored(); end

  def ignored=(ignored); end

  def load_paths(); end

  def loaded_from(); end

  def matches_for_glob(glob); end

  def missing_extensions?(); end

  def raw_require_paths(); end

  def source=(source); end

  def stub(); end

  def stub=(stub); end

  def to_yaml(); end
end

class Bundler::StubSpecification
  def self.from_stub(stub); end
end

class Bundler::SudoNotPermittedError
  def status_code(); end
end

class Bundler::SudoNotPermittedError
end

class Bundler::TemporaryResourceError
end

class Bundler::TemporaryResourceError
end

class Bundler::ThreadCreationError
  def status_code(); end
end

class Bundler::ThreadCreationError
end

module Bundler::UI
end

class Bundler::UI::RGProxy
  def initialize(ui); end

  def say(message); end
end

class Bundler::UI::RGProxy
end

class Bundler::UI::Silent
  def add_color(string, color); end

  def ask(message); end

  def confirm(message, newline=T.unsafe(nil)); end

  def debug(message, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(message, newline=T.unsafe(nil)); end

  def info(message, newline=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(name); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(); end

  def trace(message, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(message, newline=T.unsafe(nil)); end

  def yes?(msg); end
end

class Bundler::UI::Silent
end

module Bundler::UI
end

class Bundler::VersionConflict
  def conflicts(); end

  def initialize(conflicts, msg=T.unsafe(nil)); end

  def status_code(); end
end

class Bundler::VersionConflict
end

class Bundler::VirtualProtocolError
  def status_code(); end
end

class Bundler::VirtualProtocolError
end

module Bundler::YAMLSerializer
  ARRAY_REGEX = ::T.let(nil, ::T.untyped)
  HASH_REGEX = ::T.let(nil, ::T.untyped)
end

module Bundler::YAMLSerializer
  def self.dump(hash); end

  def self.load(str); end
end

class Bundler::YamlSyntaxError
  def initialize(orig_exception, msg); end

  def orig_exception(); end

  def status_code(); end
end

class Bundler::YamlSyntaxError
end

module Bundler
  def self.app_cache(custom_path=T.unsafe(nil)); end

  def self.app_config_path(); end

  def self.bin_path(); end

  def self.bundle_path(); end

  def self.bundler_major_version(); end

  def self.clean_env(); end

  def self.clean_exec(*args); end

  def self.clean_system(*args); end

  def self.clear_gemspec_cache(); end

  def self.configure(); end

  def self.configured_bundle_path(); end

  def self.current_ruby(); end

  def self.default_bundle_dir(); end

  def self.default_gemfile(); end

  def self.default_lockfile(); end

  def self.definition(unlock=T.unsafe(nil)); end

  def self.environment(); end

  def self.feature_flag(); end

  def self.frozen_bundle?(); end

  def self.git_present?(); end

  def self.home(); end

  def self.install_path(); end

  def self.load(); end

  def self.load_gemspec(file, validate=T.unsafe(nil)); end

  def self.load_gemspec_uncached(file, validate=T.unsafe(nil)); end

  def self.load_marshal(data); end

  def self.local_platform(); end

  def self.locked_gems(); end

  def self.mkdir_p(path, options=T.unsafe(nil)); end

  def self.original_env(); end

  def self.read_file(file); end

  def self.require(*groups); end

  def self.require_thor_actions(); end

  def self.requires_sudo?(); end

  def self.reset!(); end

  def self.reset_paths!(); end

  def self.reset_rubygems!(); end

  def self.rm_rf(path); end

  def self.root(); end

  def self.ruby_scope(); end

  def self.rubygems(); end

  def self.settings(); end

  def self.setup(*groups); end

  def self.specs_path(); end

  def self.sudo(str); end

  def self.system_bindir(); end

  def self.tmp(name=T.unsafe(nil)); end

  def self.tmp_home_path(login, warning); end

  def self.ui(); end

  def self.ui=(ui); end

  def self.use_system_gems?(); end

  def self.user_bundle_path(dir=T.unsafe(nil)); end

  def self.user_cache(); end

  def self.user_home(); end

  def self.which(executable); end

  def self.with_clean_env(); end

  def self.with_original_env(); end
end

class Class
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ClassOverride
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def json_creatable?(); end
end

module Comparable
  def <(_); end

  def <=(_); end

  def ==(_); end

  def >(_); end

  def >=(_); end

  def between?(_, _1); end

  def clamp(_, _1); end
end

module Comparable
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Complex
  def self.polar(*_); end

  def self.rect(*_); end

  def self.rectangular(*_); end
end

ConditionVariable = Thread::ConditionVariable

class Data
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Delegator
  def !=(obj); end

  def ==(obj); end

  def __getobj__(); end

  def __setobj__(obj); end

  def initialize(obj); end

  def marshal_dump(); end

  def marshal_load(data); end

  def method_missing(m, *args, &block); end

  def methods(all=T.unsafe(nil)); end

  def protected_methods(all=T.unsafe(nil)); end

  def public_methods(all=T.unsafe(nil)); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Delegator
  def self.const_missing(n); end

  def self.delegating_block(mid); end

  def self.public_api(); end
end

class DidYouMean::ClassNameChecker
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Correctable
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class DidYouMean::Formatter
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def initialize(corrections=T.unsafe(nil)); end
end

module DidYouMean::Jaro
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.distance(str1, str2); end
end

module DidYouMean::Levenshtein
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
end

module DidYouMean::NameErrorCheckers
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.included(*_); end

  def self.new(exception); end
end

class DidYouMean::NullChecker
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::SpellChecker
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def correct(input); end

  def initialize(dictionary:); end
end

class DidYouMean::VariableNameChecker
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
end

module DidYouMean
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Dir
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Dir
  def self.empty?(_); end

  def self.exists?(_); end

  def self.tmpdir(); end
end

class Encoding
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def _dump(*_); end
end

class Encoding::Converter
  def convert(_); end

  def convpath(); end

  def destination_encoding(); end

  def finish(); end

  def initialize(*_); end

  def insert_output(_); end

  def last_error(); end

  def primitive_convert(*_); end

  def primitive_errinfo(); end

  def putback(*_); end

  def replacement(); end

  def replacement=(replacement); end

  def source_encoding(); end
end

class Encoding::Converter
  def self.asciicompat_encoding(_); end

  def self.search_convpath(*_); end
end

class Encoding::InvalidByteSequenceError
  def destination_encoding(); end

  def destination_encoding_name(); end

  def error_bytes(); end

  def incomplete_input?(); end

  def readagain_bytes(); end

  def source_encoding(); end

  def source_encoding_name(); end
end

class Encoding::UndefinedConversionError
  def destination_encoding(); end

  def destination_encoding_name(); end

  def error_char(); end

  def source_encoding(); end

  def source_encoding_name(); end
end

class Encoding
  def self._load(_); end

  def self.locale_charmap(); end
end

module Enumerable
  def chunk(); end

  def chunk_while(); end

  def each_entry(*_); end

  def each_with_object(_); end

  def grep_v(_); end

  def lazy(); end

  def slice_after(*_); end

  def slice_before(*_); end

  def slice_when(); end

  def sum(*_); end

  def to_set(klass=T.unsafe(nil), *args, &block); end

  def uniq(); end

  def zip(*_); end
end

module Enumerable
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Enumerator
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Enumerator::Generator
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def each(*_); end

  def initialize(*_); end
end

class Enumerator::Lazy
  def chunk(*_); end

  def chunk_while(*_); end

  def force(*_); end

  def slice_when(*_); end
end

class Enumerator::Yielder
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def <<(*_); end

  def yield(*_); end
end

class Errno::EAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EAUTH
end

class Errno::EBADRPC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADRPC
end

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

class Errno::EFTYPE
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EFTYPE
end

Errno::EIPSEC = Errno::NOERROR

class Errno::ENEEDAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENEEDAUTH
end

class Errno::ENOATTR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOATTR
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

class Errno::EPROCLIM
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCLIM
end

class Errno::EPROCUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCUNAVAIL
end

class Errno::EPROGMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGMISMATCH
end

class Errno::EPROGUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGUNAVAIL
end

class Errno::ERPCMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ERPCMISMATCH
end

module Errno
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*_); end

  def self.each(); end

  def self.members(); end
end

class Etc::Passwd
  def change(); end

  def change=(_); end

  def dir(); end

  def dir=(_); end

  def expire(); end

  def expire=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid(); end

  def gid=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end

  def shell(); end

  def shell=(_); end

  def uclass(); end

  def uclass=(_); end

  def uid(); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*_); end

  def self.each(); end

  def self.members(); end
end

module Etc
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.confstr(_); end

  def self.endgrent(); end

  def self.endpwent(); end

  def self.getgrent(); end

  def self.getgrgid(*_); end

  def self.getgrnam(_); end

  def self.getlogin(); end

  def self.getpwent(); end

  def self.getpwnam(_); end

  def self.getpwuid(*_); end

  def self.group(); end

  def self.nprocessors(); end

  def self.passwd(); end

  def self.setgrent(); end

  def self.setpwent(); end

  def self.sysconf(_); end

  def self.sysconfdir(); end

  def self.systmpdir(); end

  def self.uname(); end
end

class Exception
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Exception
  def self.exception(*_); end
end

class ExitCalledError
end

class ExitCalledError
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Fiber
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def resume(*_); end
end

class Fiber
  def self.yield(*_); end
end

class File
  Separator = ::T.let(nil, ::T.untyped)
end

module File::Constants
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class File::Stat
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def size?(); end
end

class File
  def self.empty?(_); end

  def self.exists?(_); end

  def self.mkfifo(*_); end

end

module FileTest
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.blockdev?(_); end

  def self.chardev?(_); end

  def self.directory?(_); end

  def self.empty?(_); end

  def self.executable?(_); end

  def self.executable_real?(_); end

  def self.exist?(_); end

  def self.exists?(_); end

  def self.file?(_); end

  def self.grpowned?(_); end

  def self.identical?(_, _1); end

  def self.owned?(_); end

  def self.pipe?(_); end

  def self.readable?(_); end

  def self.readable_real?(_); end

  def self.setgid?(_); end

  def self.setuid?(_); end

  def self.size(_); end

  def self.size?(_); end

  def self.socket?(_); end

  def self.sticky?(_); end

  def self.symlink?(_); end

  def self.world_readable?(_); end

  def self.world_writable?(_); end

  def self.writable?(_); end

  def self.writable_real?(_); end

  def self.zero?(_); end
end

module FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::DryRun
  include ::FileUtils::LowMethods
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils::LowMethods
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class FileUtils::Entry_
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def blockdev?(); end

  def chardev?(); end

  def chmod(mode); end

  def chown(uid, gid); end

  def copy(dest); end

  def copy_file(dest); end

  def copy_metadata(path); end

  def dereference?(); end

  def directory?(); end

  def door?(); end

  def entries(); end

  def exist?(); end

  def file?(); end

  def initialize(a, b=T.unsafe(nil), deref=T.unsafe(nil)); end

  def lstat(); end

  def lstat!(); end

  def path(); end

  def pipe?(); end

  def platform_support(); end

  def postorder_traverse(); end

  def prefix(); end

  def preorder_traverse(); end

  def rel(); end

  def remove(); end

  def remove_dir1(); end

  def remove_file(); end

  def socket?(); end

  def stat(); end

  def stat!(); end

  def symlink?(); end

  def traverse(); end

  def wrap_traverse(pre, post); end
end

module FileUtils::LowMethods
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module FileUtils::NoWrite
  include ::FileUtils::LowMethods
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils::LowMethods
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module FileUtils::StreamUtils_
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.cd(dir, verbose: T.unsafe(nil), &block); end

  def self.chdir(dir, verbose: T.unsafe(nil), &block); end

  def self.chmod(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chmod_R(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.chown(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chown_R(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.cmp(a, b); end

  def self.collect_method(opt); end

  def self.commands(); end

  def self.compare_file(a, b); end

  def self.compare_stream(a, b); end

  def self.copy(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.copy_entry(src, dest, preserve=T.unsafe(nil), dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end

  def self.copy_file(src, dest, preserve=T.unsafe(nil), dereference=T.unsafe(nil)); end

  def self.copy_stream(src, dest); end

  def self.cp(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.getwd(); end

  def self.have_option?(mid, opt); end

  def self.identical?(a, b); end

  def self.install(src, dest, mode: T.unsafe(nil), owner: T.unsafe(nil), group: T.unsafe(nil), preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.link(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_s(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_sf(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.makedirs(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkdir(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkpath(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.move(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.mv(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.options(); end

  def self.options_of(mid); end

  def self.private_module_function(name); end

  def self.pwd(); end

  def self.remove(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.remove_dir(path, force=T.unsafe(nil)); end

  def self.remove_entry(path, force=T.unsafe(nil)); end

  def self.remove_entry_secure(path, force=T.unsafe(nil)); end

  def self.remove_file(path, force=T.unsafe(nil)); end

  def self.rm(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_f(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_rf(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.rmdir(list, parents: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rmtree(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.safe_unlink(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.symlink(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.touch(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), mtime: T.unsafe(nil), nocreate: T.unsafe(nil)); end

  def self.uptodate?(new, old_list); end
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
end

module GC
  def garbage_collect(*_); end
end

module GC::Profiler
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module GC
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.latest_gc_info(*_); end

  def self.stress=(stress); end

  def self.verify_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsPackageVersion = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  USE_BUNDLER_FOR_GEMDEPS = ::T.let(nil, ::T.untyped)
end

class Gem::BasicSpecification
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def activated?(); end

  def base_dir(); end

  def base_dir=(base_dir); end

  def contains_requirable_file?(file); end

  def datadir(); end

  def default_gem?(); end

  def extension_dir(); end

  def extension_dir=(extension_dir); end

  def extensions_dir(); end

  def full_gem_path(); end

  def full_gem_path=(full_gem_path); end

  def full_name(); end

  def full_require_paths(); end

  def gem_build_complete_path(); end

  def gem_dir(); end

  def gems_dir(); end

  def ignored=(ignored); end

  def internal_init(); end

  def lib_dirs_glob(); end

  def loaded_from(); end

  def loaded_from=(loaded_from); end

  def matches_for_glob(glob); end

  def name(); end

  def platform(); end

  def raw_require_paths(); end

  def require_paths(); end

  def source_paths(); end

  def stubbed?(); end

  def this(); end

  def to_fullpath(path); end

  def to_spec(); end

  def version(); end
end

class Gem::BasicSpecification
  def self.default_specifications_dir(); end
end

module Gem::BundlerVersionFinder
end

module Gem::BundlerVersionFinder
  def self.bundler_version(); end

  def self.bundler_version_with_reason(); end

  def self.compatible?(spec); end

  def self.filter!(specs); end

  def self.missing_version_message(); end

  def self.without_filtering(); end
end

class Gem::ConfigFile
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def api_keys(); end

  def args(); end

  def backtrace(); end

  def backtrace=(backtrace); end

  def bulk_threshold(); end

  def bulk_threshold=(bulk_threshold); end

  def check_credentials_permissions(); end

  def config_file_name(); end

  def credentials_path(); end

  def disable_default_gem_server(); end

  def disable_default_gem_server=(disable_default_gem_server); end

  def each(&block); end

  def handle_arguments(arg_list); end

  def home(); end

  def home=(home); end

  def initialize(args); end

  def load_api_keys(); end

  def load_file(filename); end

  def path(); end

  def path=(path); end

  def really_verbose(); end

  def rubygems_api_key(); end

  def rubygems_api_key=(api_key); end

  def set_api_key(host, api_key); end

  def sources(); end

  def sources=(sources); end

  def ssl_ca_cert(); end

  def ssl_ca_cert=(ssl_ca_cert); end

  def ssl_client_cert(); end

  def ssl_verify_mode(); end

  def to_yaml(); end

  def unset_api_key!(); end

  def update_sources(); end

  def update_sources=(update_sources); end

  def verbose(); end

  def verbose=(verbose); end

  def write(); end
  DEFAULT_BACKTRACE = ::T.let(nil, ::T.untyped)
  DEFAULT_BULK_THRESHOLD = ::T.let(nil, ::T.untyped)
  DEFAULT_UPDATE_SOURCES = ::T.let(nil, ::T.untyped)
  DEFAULT_VERBOSITY = ::T.let(nil, ::T.untyped)
  OPERATING_SYSTEM_DEFAULTS = ::T.let(nil, ::T.untyped)
  PLATFORM_DEFAULTS = ::T.let(nil, ::T.untyped)
  SYSTEM_CONFIG_PATH = ::T.let(nil, ::T.untyped)
  SYSTEM_WIDE_CONFIG_FILE = ::T.let(nil, ::T.untyped)
end

class Gem::ConfigFile
end

class Gem::ConflictError
  def conflicts(); end

  def initialize(target, conflicts); end

  def target(); end
end

class Gem::ConsoleUI
  def initialize(); end
end

class Gem::ConsoleUI
end

module Gem::DefaultUserInteraction
  def ui(); end

  def ui=(new_ui); end

  def use_ui(new_ui, &block); end
end

module Gem::DefaultUserInteraction
  def self.ui(); end

  def self.ui=(new_ui); end

  def self.use_ui(new_ui); end
end

class Gem::Dependency
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def ==(other); end

  def ===(other); end

  def =~(other); end

  def all_sources(); end

  def all_sources=(all_sources); end

  def encode_with(coder); end

  def eql?(other); end

  def groups(); end

  def groups=(groups); end

  def initialize(name, *requirements); end

  def latest_version?(); end

  def match?(obj, version=T.unsafe(nil), allow_prerelease=T.unsafe(nil)); end

  def matches_spec?(spec); end

  def matching_specs(platform_only=T.unsafe(nil)); end

  def merge(other); end

  def name(); end

  def name=(name); end

  def prerelease=(prerelease); end

  def prerelease?(); end

  def pretty_print(q); end

  def requirement(); end

  def requirements_list(); end

  def runtime?(); end

  def source(); end

  def source=(source); end

  def specific?(); end

  def to_lock(); end

  def to_spec(); end

  def to_specs(); end

  def to_yaml_properties(); end

  def type(); end
end

class Gem::DependencyResolutionError
  def conflict(); end

  def conflicting_dependencies(); end

  def initialize(conflict); end
end

module Gem::Deprecate
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.deprecate(name, repl, year, month); end

  def self.skip(); end

  def self.skip=(v); end

  def self.skip_during(); end
end

class Gem::ErrorReason
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Gem::Exception
  def _deprecated_source_exception(); end

  def source_exception(*args, &block); end

  def source_exception=(source_exception); end
end

class Gem::Exception
  extend ::Gem::Deprecate
end

module Gem::Ext
end

class Gem::Ext::Builder
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  def build_args(); end

  def build_args=(build_args); end

  def build_error(build_dir, output, backtrace=T.unsafe(nil)); end

  def build_extension(extension, dest_path); end

  def build_extensions(); end

  def builder_for(extension); end

  def initialize(spec, build_args=T.unsafe(nil)); end

  def write_gem_make_out(output); end
  CHDIR_MONITOR = ::T.let(nil, ::T.untyped)
  CHDIR_MUTEX = ::T.let(nil, ::T.untyped)
end

class Gem::Ext::Builder
  def self.class_name(); end

  def self.make(dest_path, results); end

  def self.redirector(); end

  def self.run(command, results, command_name=T.unsafe(nil)); end
end

module Gem::Ext
end

class Gem::FilePermissionError
  def directory(); end

  def initialize(directory); end
end

class Gem::FormatException
  def file_path(); end

  def file_path=(file_path); end
end

class Gem::GemNotInHomeException
  def spec(); end

  def spec=(spec); end
end

class Gem::ImpossibleDependenciesError
  def build_message(); end

  def conflicts(); end

  def dependency(); end

  def initialize(request, conflicts); end

  def request(); end
end

class Gem::List
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def each(); end

  def initialize(value=T.unsafe(nil), tail=T.unsafe(nil)); end

  def prepend(value); end

  def pretty_print(q); end

  def tail(); end

  def tail=(tail); end

  def to_a(); end

  def value(); end

  def value=(value); end
end

class Gem::List
  def self.prepend(list, value); end
end

class Gem::LoadError
  def name(); end

  def name=(name); end

  def requirement(); end

  def requirement=(requirement); end
end

class Gem::MissingSpecError
  def initialize(name, requirement); end
end

class Gem::MissingSpecVersionError
  def initialize(name, requirement, specs); end

  def specs(); end
end

class Gem::PathSupport
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::Platform
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def ==(other); end

  def ===(other); end

  def =~(other); end

  def cpu(); end

  def cpu=(cpu); end

  def eql?(other); end

  def initialize(arch); end

  def os(); end

  def os=(os); end

  def to_a(); end

  def version(); end

  def version=(version); end
  JAVA = ::T.let(nil, ::T.untyped)
  MINGW = ::T.let(nil, ::T.untyped)
  MSWIN = ::T.let(nil, ::T.untyped)
  MSWIN64 = ::T.let(nil, ::T.untyped)
  X64_MINGW = ::T.let(nil, ::T.untyped)
end

class Gem::Platform
  def self.installable?(spec); end

  def self.local(); end

  def self.match(platform); end

  def self.new(arch); end
end

class Gem::PlatformMismatch
  def add_platform(platform); end

  def initialize(name, version); end

  def name(); end

  def platforms(); end

  def version(); end

  def wordy(); end
end

class Gem::Requirement
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def ==(other); end

  def ===(version); end

  def =~(version); end

  def as_list(); end

  def concat(new); end

  def encode_with(coder); end

  def exact?(); end

  def for_lockfile(); end

  def init_with(coder); end

  def initialize(*requirements); end

  def marshal_dump(); end

  def marshal_load(array); end

  def none?(); end

  def prerelease?(); end

  def pretty_print(q); end

  def requirements(); end

  def satisfied_by?(version); end

  def specific?(); end

  def to_yaml_properties(); end

  def yaml_initialize(tag, vals); end
  DefaultRequirement = ::T.let(nil, ::T.untyped)
end

class Gem::Requirement
  def self.create(*inputs); end

  def self.default(); end

  def self.parse(obj); end

  def self.source_set(); end
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::SilentUI
  def initialize(); end
end

class Gem::SilentUI
end

class Gem::Source
  include ::Comparable
  def ==(other); end

  def api_uri(); end

  def cache_dir(uri); end

  def dependency_resolver_set(); end

  def download(spec, dir=T.unsafe(nil)); end

  def eql?(other); end

  def fetch_spec(name_tuple); end

  def initialize(uri); end

  def load_specs(type); end

  def pretty_print(q); end

  def update_cache?(); end

  def uri(); end
  FILES = ::T.let(nil, ::T.untyped)
end

class Gem::Source::Git
  def base_dir(); end

  def cache(); end

  def checkout(); end

  def dir_shortref(); end

  def download(full_spec, path); end

  def initialize(name, repository, reference, submodules=T.unsafe(nil)); end

  def install_dir(); end

  def name(); end

  def need_submodules(); end

  def reference(); end

  def remote(); end

  def remote=(remote); end

  def repo_cache_dir(); end

  def repository(); end

  def rev_parse(); end

  def root_dir(); end

  def root_dir=(root_dir); end

  def specs(); end

  def uri_hash(); end
end

class Gem::Source::Git
end

class Gem::Source::Installed
  def download(spec, path); end

  def initialize(); end
end

class Gem::Source::Installed
end

class Gem::Source::Local
  def download(spec, cache_dir=T.unsafe(nil)); end

  def fetch_spec(name); end

  def find_gem(gem_name, version=T.unsafe(nil), prerelease=T.unsafe(nil)); end

  def initialize(); end
end

class Gem::Source::Local
end

class Gem::Source::Lock
  def initialize(source); end

  def wrapped(); end
end

class Gem::Source::Lock
end

class Gem::Source::SpecificFile
  def fetch_spec(name); end

  def initialize(file); end

  def load_specs(*a); end

  def path(); end

  def spec(); end
end

class Gem::Source::SpecificFile
end

class Gem::Source::Vendor
  def initialize(path); end
end

class Gem::Source::Vendor
end

class Gem::Source
end

class Gem::SourceFetchProblem
  def error(); end

  def exception(); end

  def initialize(source, error); end

  def source(); end

  def wordy(); end
end

class Gem::SpecificGemNotFoundException
  def errors(); end

  def initialize(name, version, errors=T.unsafe(nil)); end

  def name(); end

  def version(); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def ==(other); end

  def _deprecated_default_executable(); end

  def _deprecated_default_executable=(_deprecated_default_executable); end

  def _deprecated_has_rdoc(); end

  def _deprecated_has_rdoc=(ignored); end

  def _deprecated_has_rdoc?(*args, &block); end

  def _dump(limit); end

  def abbreviate(); end

  def activate(); end

  def activate_dependencies(); end

  def activated(); end

  def activated=(activated); end

  def add_bindir(executables); end

  def add_dependency(gem, *requirements); end

  def add_development_dependency(gem, *requirements); end

  def add_runtime_dependency(gem, *requirements); end

  def add_self_to_load_path(); end

  def author(); end

  def author=(o); end

  def authors(); end

  def authors=(value); end

  def autorequire(); end

  def autorequire=(autorequire); end

  def bin_dir(); end

  def bin_file(name); end

  def bindir(); end

  def bindir=(bindir); end

  def build_args(); end

  def build_extensions(); end

  def build_info_dir(); end

  def build_info_file(); end

  def bundled_gem_in_old_ruby?(); end

  def cache_dir(); end

  def cache_file(); end

  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def conficts_when_loaded_with?(list_of_specs); end

  def conflicts(); end

  def date(); end

  def date=(date); end

  def default_executable(*args, &block); end

  def default_executable=(*args, &block); end

  def default_value(name); end

  def dependencies(); end

  def dependent_gems(); end

  def dependent_specs(); end

  def description(); end

  def description=(str); end

  def development_dependencies(); end

  def doc_dir(type=T.unsafe(nil)); end

  def email(); end

  def email=(email); end

  def encode_with(coder); end

  def eql?(other); end

  def executable(); end

  def executable=(o); end

  def executables(); end

  def executables=(value); end

  def extensions(); end

  def extensions=(extensions); end

  def extra_rdoc_files(); end

  def extra_rdoc_files=(files); end

  def file_name(); end

  def files(); end

  def files=(files); end

  def for_cache(); end

  def git_version(); end

  def groups(); end

  def has_conflicts?(); end

  def has_rdoc(*args, &block); end

  def has_rdoc=(*args, &block); end

  def has_rdoc?(*args, &block); end

  def has_test_suite?(); end

  def has_unit_tests?(); end

  def homepage(); end

  def homepage=(homepage); end

  def init_with(coder); end

  def initialize(name=T.unsafe(nil), version=T.unsafe(nil)); end

  def installed_by_version(); end

  def installed_by_version=(version); end

  def lib_files(); end

  def license(); end

  def license=(o); end

  def licenses(); end

  def licenses=(licenses); end

  def load_paths(); end

  def location(); end

  def location=(location); end

  def mark_version(); end

  def metadata(); end

  def metadata=(metadata); end

  def method_missing(sym, *a, &b); end

  def missing_extensions?(); end

  def name=(name); end

  def name_tuple(); end

  def nondevelopment_dependencies(); end

  def normalize(); end

  def original_name(); end

  def original_platform(); end

  def original_platform=(original_platform); end

  def platform=(platform); end

  def post_install_message(); end

  def post_install_message=(post_install_message); end

  def pretty_print(q); end

  def raise_if_conflicts(); end

  def rdoc_options(); end

  def rdoc_options=(options); end

  def relative_loaded_from(); end

  def relative_loaded_from=(relative_loaded_from); end

  def remote(); end

  def remote=(remote); end

  def require_path(); end

  def require_path=(path); end

  def require_paths=(val); end

  def required_ruby_version(); end

  def required_ruby_version=(req); end

  def required_rubygems_version(); end

  def required_rubygems_version=(req); end

  def requirements(); end

  def requirements=(req); end

  def reset_nil_attributes_to_default(); end

  def rg_extension_dir(); end

  def rg_full_gem_path(); end

  def rg_loaded_from(); end

  def ri_dir(); end

  def rubyforge_project(); end

  def rubyforge_project=(rubyforge_project); end

  def rubygems_version(); end

  def rubygems_version=(rubygems_version); end

  def runtime_dependencies(); end

  def sanitize(); end

  def sanitize_string(string); end

  def satisfies_requirement?(dependency); end

  def signing_key(); end

  def signing_key=(signing_key); end

  def sort_obj(); end

  def source(); end

  def source=(source); end

  def spec_dir(); end

  def spec_file(); end

  def spec_name(); end

  def specification_version(); end

  def specification_version=(specification_version); end

  def summary(); end

  def summary=(str); end

  def test_file(); end

  def test_file=(file); end

  def test_files(); end

  def test_files=(files); end

  def to_gemfile(path=T.unsafe(nil)); end

  def to_ruby(); end

  def to_ruby_for_cache(); end

  def to_yaml(opts=T.unsafe(nil)); end

  def traverse(trail=T.unsafe(nil), visited=T.unsafe(nil), &block); end

  def validate(packaging=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end

  def version=(version); end

  def warning(statement); end

  def yaml_initialize(tag, vals); end
  DateLike = ::T.let(nil, ::T.untyped)
  DateTimeFormat = ::T.let(nil, ::T.untyped)
  INITIALIZE_CODE_FOR_DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Gem::Specification
  extend ::Enumerable
  extend ::Gem::Deprecate
  def self._all(); end

  def self._clear_load_cache(); end

  def self._latest_specs(specs, prerelease=T.unsafe(nil)); end

  def self._load(str); end

  def self._resort!(specs); end

  def self.add_spec(spec); end

  def self.add_specs(*specs); end

  def self.all(); end

  def self.all=(specs); end

  def self.all_names(); end

  def self.array_attributes(); end

  def self.attribute_names(); end

  def self.dirs(); end

  def self.dirs=(dirs); end

  def self.each(); end

  def self.each_gemspec(dirs); end

  def self.each_spec(dirs); end

  def self.find_active_stub_by_path(path); end

  def self.find_all_by_full_name(full_name); end

  def self.find_all_by_name(name, *requirements); end

  def self.find_by_name(name, *requirements); end

  def self.find_by_path(path); end

  def self.find_in_unresolved(path); end

  def self.find_in_unresolved_tree(path); end

  def self.find_inactive_by_path(path); end

  def self.from_yaml(input); end

  def self.latest_specs(prerelease=T.unsafe(nil)); end

  def self.load(file); end

  def self.load_defaults(); end

  def self.non_nil_attributes(); end

  def self.normalize_yaml_input(input); end

  def self.outdated(); end

  def self.outdated_and_latest_version(); end

  def self.remove_spec(spec); end

  def self.required_attribute?(name); end

  def self.required_attributes(); end

  def self.reset(); end

  def self.stubs(); end

  def self.stubs_for(name); end

  def self.unresolved_deps(); end
end

class Gem::StreamUI
  def _deprecated_debug(statement); end

  def _gets_noecho(); end

  def alert(statement, question=T.unsafe(nil)); end

  def alert_error(statement, question=T.unsafe(nil)); end

  def alert_warning(statement, question=T.unsafe(nil)); end

  def ask(question); end

  def ask_for_password(question); end

  def ask_yes_no(question, default=T.unsafe(nil)); end

  def backtrace(exception); end

  def choose_from_list(question, list); end

  def close(); end

  def debug(*args, &block); end

  def download_reporter(*args); end

  def errs(); end

  def initialize(in_stream, out_stream, err_stream=T.unsafe(nil), usetty=T.unsafe(nil)); end

  def ins(); end

  def outs(); end

  def progress_reporter(*args); end

  def require_io_console(); end

  def say(statement=T.unsafe(nil)); end

  def terminate_interaction(status=T.unsafe(nil)); end

  def tty?(); end
end

class Gem::StreamUI::SilentDownloadReporter
  def done(); end

  def fetch(filename, filesize); end

  def initialize(out_stream, *args); end

  def update(current); end
end

class Gem::StreamUI::SilentDownloadReporter
end

class Gem::StreamUI::SilentProgressReporter
  def count(); end

  def done(); end

  def initialize(out_stream, size, initial_message, terminal_message=T.unsafe(nil)); end

  def updated(message); end
end

class Gem::StreamUI::SilentProgressReporter
end

class Gem::StreamUI::SimpleProgressReporter
  include ::Gem::DefaultUserInteraction
  def count(); end

  def done(); end

  def initialize(out_stream, size, initial_message, terminal_message=T.unsafe(nil)); end

  def updated(message); end
end

class Gem::StreamUI::SimpleProgressReporter
end

class Gem::StreamUI::VerboseDownloadReporter
  def done(); end

  def fetch(file_name, total_bytes); end

  def file_name(); end

  def initialize(out_stream, *args); end

  def progress(); end

  def total_bytes(); end

  def update(bytes); end
end

class Gem::StreamUI::VerboseDownloadReporter
end

class Gem::StreamUI::VerboseProgressReporter
  include ::Gem::DefaultUserInteraction
  def count(); end

  def done(); end

  def initialize(out_stream, size, initial_message, terminal_message=T.unsafe(nil)); end

  def updated(message); end
end

class Gem::StreamUI::VerboseProgressReporter
end

class Gem::StreamUI
  extend ::Gem::Deprecate
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::SystemExitException
  def exit_code(); end

  def exit_code=(exit_code); end

  def initialize(exit_code); end
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

class Gem::UnsatisfiableDependencyError
  def dependency(); end

  def errors(); end

  def errors=(errors); end

  def initialize(dep, platform_mismatch=T.unsafe(nil)); end

  def name(); end

  def version(); end
end

module Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  def alert(statement, question=T.unsafe(nil)); end

  def alert_error(statement, question=T.unsafe(nil)); end

  def alert_warning(statement, question=T.unsafe(nil)); end

  def ask(question); end

  def ask_for_password(prompt); end

  def ask_yes_no(question, default=T.unsafe(nil)); end

  def choose_from_list(question, list); end

  def say(statement=T.unsafe(nil)); end

  def terminate_interaction(exit_code=T.unsafe(nil)); end

  def verbose(msg=T.unsafe(nil)); end
end

module Gem::UserInteraction
end

module Gem::Util
  NULL_DEVICE = ::T.let(nil, ::T.untyped)
end

module Gem::Util
  def self.gunzip(data); end

  def self.gzip(data); end

  def self.inflate(data); end

  def self.popen(*command); end

  def self.silent_system(*command); end

  def self.traverse_parents(directory, &block); end
end

class Gem::Version
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def _segments(); end

  def _split_segments(); end

  def _version(); end

  def approximate_recommendation(); end

  def bump(); end

  def canonical_segments(); end

  def encode_with(coder); end

  def eql?(other); end

  def init_with(coder); end

  def initialize(version); end

  def marshal_dump(); end

  def marshal_load(array); end

  def prerelease?(); end

  def pretty_print(q); end

  def release(); end

  def segments(); end

  def to_yaml_properties(); end

  def version(); end

  def yaml_initialize(tag, map); end
end

Gem::Version::Requirement = Gem::Requirement

class Gem::Version
  def self.correct?(version); end

  def self.create(input); end

  def self.new(version); end
end

module Gem
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self._deprecated_datadir(gem_name); end

  def self._deprecated_detect_gemdeps(path=T.unsafe(nil)); end

  def self._deprecated_gunzip(data); end

  def self._deprecated_gzip(data); end

  def self._deprecated_inflate(data); end

  def self.activate_bin_path(name, *args); end

  def self.default_ext_dir_for(base_dir); end

  def self.default_gems_use_full_paths?(); end

  def self.default_spec_cache_dir(); end

  def self.deflate(data); end

  def self.detect_gemdeps(*args, &block); end

  def self.dir(); end

  def self.done_installing(&hook); end

  def self.done_installing_hooks(); end

  def self.ensure_default_gem_subdirectories(dir=T.unsafe(nil), mode=T.unsafe(nil)); end

  def self.ensure_gem_subdirectories(dir=T.unsafe(nil), mode=T.unsafe(nil)); end

  def self.ensure_subdirectories(dir, mode, subdirs); end

  def self.env_requirement(gem_name); end

  def self.extension_api_version(); end

  def self.find_files(glob, check_load_path=T.unsafe(nil)); end

  def self.find_files_from_load_path(glob); end

  def self.find_latest_files(glob, check_load_path=T.unsafe(nil)); end

  def self.find_unresolved_default_spec(path); end

  def self.finish_resolve(*_); end

  def self.gemdeps(); end

  def self.gunzip(*args, &block); end

  def self.gzip(*args, &block); end

  def self.host(); end

  def self.host=(host); end

  def self.inflate(*args, &block); end

  def self.install(name, version=T.unsafe(nil), *options); end

  def self.install_extension_in_lib(); end

  def self.latest_rubygems_version(); end

  def self.latest_spec_for(name); end

  def self.latest_version_for(name); end

  def self.load_env_plugins(); end

  def self.load_path_insert_index(); end

  def self.load_plugin_files(plugins); end

  def self.load_plugins(); end

  def self.load_yaml(); end

  def self.loaded_specs(); end

  def self.location_of_caller(depth=T.unsafe(nil)); end

  def self.marshal_version(); end

  def self.needs(); end

  def self.path(); end

  def self.path_separator(); end

  def self.paths(); end

  def self.paths=(env); end

  def self.platform_defaults(); end

  def self.platforms(); end

  def self.platforms=(platforms); end

  def self.post_build(&hook); end

  def self.post_build_hooks(); end

  def self.post_install(&hook); end

  def self.post_install_hooks(); end

  def self.post_reset(&hook); end

  def self.post_reset_hooks(); end

  def self.post_uninstall(&hook); end

  def self.post_uninstall_hooks(); end

  def self.pre_install(&hook); end

  def self.pre_install_hooks(); end

  def self.pre_reset(&hook); end

  def self.pre_reset_hooks(); end

  def self.pre_uninstall(&hook); end

  def self.pre_uninstall_hooks(); end

  def self.prefix(); end

  def self.read_binary(path); end

  def self.refresh(); end

  def self.register_default_spec(spec); end

  def self.remove_unresolved_default_spec(spec); end

  def self.ruby(); end

  def self.ruby_api_version(); end

  def self.ruby_engine(); end

  def self.ruby_version(); end

  def self.rubygems_version(); end

  def self.sources(); end

  def self.sources=(new_sources); end

  def self.spec_cache_dir(); end

  def self.suffix_pattern(); end

  def self.suffixes(); end

  def self.time(msg, width=T.unsafe(nil), display=T.unsafe(nil)); end

  def self.try_activate(path); end

  def self.ui(); end

  def self.use_gemdeps(path=T.unsafe(nil)); end

  def self.use_paths(home, *paths); end

  def self.user_dir(); end

  def self.user_home(); end

  def self.vendor_dir(); end

  def self.win_platform?(); end

  def self.write_binary(path, data); end
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def <(_); end

  def <=(_); end

  def >(_); end

  def >=(_); end

  def compact(); end

  def compact!(); end

  def default_proc(); end

  def default_proc=(default_proc); end

  def dig(*_); end

  def fetch_values(*_); end

  def flatten(*_); end

  def index(_); end

  def merge!(_); end

  def replace(_); end

  def to_h(); end

  def to_proc(); end

  def transform_values(); end

  def transform_values!(); end

  def update(_); end
end

class Hash
  def self.try_convert(_); end
end

class IO
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def external_encoding(); end

  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def pathconf(_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end

  def write_nonblock(buf, exception: T.unsafe(nil)); end
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

module IO::WaitReadable
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module IO::WaitWritable
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class IO
  def self.foreach(*_); end

  def self.pipe(*_); end

end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  def digits(*_); end

  def to_bn(); end

  GMP_VERSION = ::T.let(nil, ::T.untyped)
end

module JSON
  FAST_STATE_PROTOTYPE = ::T.let(nil, ::T.untyped)
  Infinity = ::T.let(nil, ::T.untyped)
  JSON_LOADED = ::T.let(nil, ::T.untyped)
  MinusInfinity = ::T.let(nil, ::T.untyped)
  PRETTY_STATE_PROTOTYPE = ::T.let(nil, ::T.untyped)
  SAFE_STATE_PROTOTYPE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_ARRAY = ::T.let(nil, ::T.untyped)
  VERSION_BUILD = ::T.let(nil, ::T.untyped)
  VERSION_MAJOR = ::T.let(nil, ::T.untyped)
  VERSION_MINOR = ::T.let(nil, ::T.untyped)
end

class JSON::CircularDatastructure
end

class JSON::CircularDatastructure
end

module JSON::Ext
end

module JSON::Ext::Generator
end

module JSON::Ext::Generator::GeneratorMethods
end

module JSON::Ext::Generator::GeneratorMethods::Array
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::Array
end

module JSON::Ext::Generator::GeneratorMethods::FalseClass
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::FalseClass
end

module JSON::Ext::Generator::GeneratorMethods::Float
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::Float
end

module JSON::Ext::Generator::GeneratorMethods::Hash
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::Hash
end

module JSON::Ext::Generator::GeneratorMethods::Integer
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::Integer
end

module JSON::Ext::Generator::GeneratorMethods::NilClass
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::NilClass
end

module JSON::Ext::Generator::GeneratorMethods::Object
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::Object
end

module JSON::Ext::Generator::GeneratorMethods::String
  def to_json(*_); end

  def to_json_raw(*_); end

  def to_json_raw_object(); end
end

module JSON::Ext::Generator::GeneratorMethods::String
end

module JSON::Ext::Generator::GeneratorMethods::TrueClass
  def to_json(*_); end
end

module JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module JSON::Ext::Generator::GeneratorMethods
end

class JSON::Ext::Generator::State
  def [](_); end

  def []=(_, _1); end

  def allow_nan?(); end

  def array_nl(); end

  def array_nl=(array_nl); end

  def ascii_only?(); end

  def buffer_initial_length(); end

  def buffer_initial_length=(buffer_initial_length); end

  def check_circular?(); end

  def configure(_); end

  def depth(); end

  def depth=(depth); end

  def generate(_); end

  def indent(); end

  def indent=(indent); end

  def initialize(*_); end

  def max_nesting(); end

  def max_nesting=(max_nesting); end

  def merge(_); end

  def object_nl(); end

  def object_nl=(object_nl); end

  def space(); end

  def space=(space); end

  def space_before(); end

  def space_before=(space_before); end

  def to_h(); end

  def to_hash(); end
end

class JSON::Ext::Generator::State
  def self.from_state(_); end
end

module JSON::Ext::Generator
end

class JSON::Ext::Parser
  def initialize(*_); end

  def parse(); end

  def source(); end
end

class JSON::Ext::Parser
end

module JSON::Ext
end

class JSON::GeneratorError
end

class JSON::GeneratorError
end

class JSON::GenericObject
  def as_json(*_); end

  def to_hash(); end

  def to_json(*a); end

  def |(other); end
end

class JSON::GenericObject
  def self.[](*_); end

  def self.dump(obj, *args); end

  def self.from_hash(object); end

  def self.json_creatable=(json_creatable); end

  def self.json_create(data); end

  def self.load(source, proc=T.unsafe(nil), opts=T.unsafe(nil)); end
end

class JSON::JSONError
end

class JSON::JSONError
  def self.wrap(exception); end
end

class JSON::MissingUnicodeSupport
end

class JSON::MissingUnicodeSupport
end

class JSON::NestingError
end

class JSON::NestingError
end

JSON::Parser = JSON::Ext::Parser

class JSON::ParserError
end

class JSON::ParserError
end

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  def self.[](object, opts=T.unsafe(nil)); end

  def self.create_id(); end

  def self.create_id=(create_id); end

  def self.deep_const_get(path); end

  def self.dump(obj, anIO=T.unsafe(nil), limit=T.unsafe(nil)); end

  def self.dump_default_options(); end

  def self.dump_default_options=(dump_default_options); end

  def self.fast_generate(obj, opts=T.unsafe(nil)); end

  def self.fast_unparse(obj, opts=T.unsafe(nil)); end

  def self.generate(obj, opts=T.unsafe(nil)); end

  def self.generator(); end

  def self.generator=(generator); end

  def self.iconv(to, from, string); end

  def self.load(source, proc=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.load_default_options(); end

  def self.load_default_options=(load_default_options); end

  def self.parse(source, opts=T.unsafe(nil)); end

  def self.parse!(source, opts=T.unsafe(nil)); end

  def self.parser(); end

  def self.parser=(parser); end

  def self.pretty_generate(obj, opts=T.unsafe(nil)); end

  def self.pretty_unparse(obj, opts=T.unsafe(nil)); end

  def self.recurse_proc(result, &proc); end

  def self.restore(source, proc=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.state(); end

  def self.state=(state); end

  def self.unparse(obj, opts=T.unsafe(nil)); end
end

module Kernel
  def class(); end

  def gem(dep, *reqs); end

  def itself(); end

  def object_id(); end

  def respond_to?(*_); end

  def tap(); end

end

module Kernel
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.at_exit(); end
end

class LoadError
  def path(); end
end

class LocalJumpError
  def exit_value(); end

  def reason(); end
end

module Marshal
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.restore(*_); end
end

class MatchData
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def named_captures(); end
end

module Math
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Method
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def [](*_); end

  def arity(); end

  def clone(); end

  def curry(*_); end

  def name(); end

  def original_name(); end

  def owner(); end

  def parameters(); end

  def receiver(); end

  def source_location(); end

  def super_method(); end

  def unbind(); end
end

class Module
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def deprecate_constant(*_); end

end

class Module
  def self.used_modules(); end
end

class Monitor
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def enter(); end

  def exit(); end

  def try_enter(); end
end

module MonitorMixin
  def initialize(*args); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_mon_enter(); end
end

class MonitorMixin::ConditionVariable
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def broadcast(); end

  def initialize(monitor); end

  def signal(); end

  def wait(timeout=T.unsafe(nil)); end

  def wait_until(); end

  def wait_while(); end
end

module MonitorMixin
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.extend_object(obj); end
end

Mutex = Thread::Mutex

class NameError
  include ::DidYouMean::Correctable
  def name(); end

  def receiver(); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def to_i(); end
end

class NoMethodError
  include ::DidYouMean::Correctable
  def args(); end

  def private_call?(); end
end

class Numeric
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def finite?(); end

  def infinite?(); end

  def negative?(); end

  def positive?(); end

end

class Object
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class ObjectSpace::WeakMap
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def [](_); end

  def []=(_, _1); end

  def each(); end

  def each_key(); end

  def each_pair(); end

  def each_value(); end

  def key?(_); end

  def keys(); end

  def length(); end

  def size(); end

  def values(); end
end

module ObjectSpace
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.count_objects(*_); end

  def self.define_finalizer(*_); end

  def self.garbage_collect(*_); end

  def self.undefine_finalizer(_); end
end

class OpenStruct
  def ==(other); end

  def [](name); end

  def []=(name, value); end

  def delete_field(name); end

  def dig(name, *names); end

  def each_pair(); end

  def eql?(other); end

  def initialize(hash=T.unsafe(nil)); end

  def marshal_dump(); end

  def marshal_load(x); end

  def method_missing(mid, *args); end

  def modifiable(); end

  def new_ostruct_member(name); end

  def table(); end

  def table!(); end

  def to_h(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

class OpenStruct
end

class Pathname
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def empty?(); end

  def fnmatch?(*_); end

  def make_symlink(_); end

end

class Proc
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def ===(*_); end

  def [](*_); end

  def clone(); end

  def lambda?(); end

  def yield(*_); end
end

module Process
  CLOCK_MONOTONIC_RAW_APPROX = ::T.let(nil, ::T.untyped)
  CLOCK_UPTIME_RAW = ::T.let(nil, ::T.untyped)
  CLOCK_UPTIME_RAW_APPROX = ::T.let(nil, ::T.untyped)
end

module Process::GID
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Process::Status
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

module Process::Sys
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.getegid(); end

end

class Process::Tms
  def cstime(); end

  def cstime=(_); end

  def cutime(); end

  def cutime=(_); end

  def stime(); end

  def stime=(_); end

  def utime(); end

  def utime=(_); end
end

class Process::Tms
  def self.[](*_); end

  def self.members(); end
end

module Process::UID
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module Process
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.setpgrp(); end

end

Queue = Thread::Queue

class Random
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

module Random::Formatter
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Random
  def self.raw_seed(_); end
end

class Range
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

module RbConfig
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.expand(val, config=T.unsafe(nil)); end

  def self.ruby(); end
end

class Regexp
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def match?(*_); end
end

class Regexp
  def self.union(*_); end
end

class RubyVM
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class RubyVM::InstructionSequence
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def absolute_path(); end

  def base_label(); end

  def disasm(); end

  def disassemble(); end

  def eval(); end

  def first_lineno(); end

  def label(); end

  def path(); end

  def to_a(); end

  def to_binary(*_); end
end

class RubyVM::InstructionSequence
  def self.compile(*_); end

  def self.compile_file(*_); end

  def self.compile_option(); end

  def self.compile_option=(compile_option); end

  def self.disasm(_); end

  def self.disassemble(_); end

  def self.load_from_binary(_); end

  def self.load_from_binary_extra_data(_); end

  def self.of(_); end
end

class RubyVM
  def self.stat(*_); end
end

class Set
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def ==(other); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

module Signal
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class SignalException
  def signm(); end

  def signo(); end
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

SizedQueue = Thread::SizedQueue

class Sorbet
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Sorbet::Private::ConstantLookupCache
  def all_module_aliases(); end

  def all_module_names(); end

  def all_named_modules(); end

  def class_by_name(name); end

  def name_by_class(klass); end
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::ConstantLookupCache::ConstantEntry
  def aliases(); end

  def aliases=(_); end

  def const(); end

  def const=(_); end

  def const_name(); end

  def const_name=(_); end

  def found_name(); end

  def found_name=(_); end

  def owner(); end

  def owner=(_); end

  def primary_name(); end

  def primary_name=(_); end
end

class Sorbet::Private::ConstantLookupCache::ConstantEntry
  def self.[](*_); end

  def self.members(); end
end

class Sorbet::Private::ConstantLookupCache
end

class Sorbet::Private::CreateConfig
  include ::Sorbet::Private::StepInterface
  SORBET_CONFIG_FILE = ::T.let(nil, ::T.untyped)
  SORBET_DIR = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::CreateConfig
  def self.main(); end

  def self.output_file(); end
end

class Sorbet::Private::FetchRBIs
  include ::Sorbet::Private::StepInterface
  HEADER = ::T.let(nil, ::T.untyped)
  RBI_CACHE_DIR = ::T.let(nil, ::T.untyped)
  SORBET_CONFIG_FILE = ::T.let(nil, ::T.untyped)
  SORBET_DIR = ::T.let(nil, ::T.untyped)
  SORBET_RBI_LIST = ::T.let(nil, ::T.untyped)
  SORBET_RBI_SORBET_TYPED = ::T.let(nil, ::T.untyped)
  SORBET_TYPED_REPO = ::T.let(nil, ::T.untyped)
  XDG_CACHE_HOME = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::FetchRBIs
  def self.fetch_sorbet_typed(); end

  def self.main(); end

  def self.matching_version_directories(root, version); end

  def self.output_file(); end

  def self.paths_for_gem_version(gemspec); end

  def self.paths_for_ruby_version(ruby_version); end

  def self.paths_within_gem_sources(gemspec); end

  def self.serialize_rbi_list(gem_source_paths); end

  def self.vendor_rbis_within_paths(vendor_paths); end
end

module Sorbet::Private::GemGeneratorTracepoint
  include ::Sorbet::Private::StepInterface
  OUTPUT = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemGeneratorTracepoint::ClassDefinition
  def defs(); end

  def defs=(_); end

  def id(); end

  def id=(_); end

  def klass(); end

  def klass=(_); end
end

class Sorbet::Private::GemGeneratorTracepoint::ClassDefinition
  def self.[](*_); end

  def self.members(); end
end

class Sorbet::Private::GemGeneratorTracepoint::TracepointSerializer
  def initialize(files:, delegate_classes:); end

  def serialize(output_dir); end
  BAD_METHODS = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  SPECIAL_METHOD_NAMES = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemGeneratorTracepoint::TracepointSerializer
end

class Sorbet::Private::GemGeneratorTracepoint::Tracer
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ClassOverride
  def new(*_); end
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ClassOverride
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def include(mod, *smth); end
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def extend(mod, *args); end
end

module Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Sorbet::Private::GemGeneratorTracepoint::Tracer
  def self.add_to_context(item); end

  def self.disable_tracepoints(); end

  def self.finish(); end

  def self.install_tracepoints(); end

  def self.method_added(mod, method, singleton); end

  def self.module_created(mod); end

  def self.module_extended(extended, extender); end

  def self.module_included(included, includer); end

  def self.pre_cache_module_methods(); end

  def self.register_delegate_class(klass, delegate); end

  def self.start(); end

  def self.trace(); end

  def self.trace_results(); end
end

module Sorbet::Private::GemGeneratorTracepoint
  def self.main(output_dir=T.unsafe(nil)); end

  def self.output_file(); end
end

class Sorbet::Private::GemLoader
  GEM_LOADER = ::T.let(nil, ::T.untyped)
  NO_GEM = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemLoader
  def self.my_require(gem); end

  def self.require_all_gems(); end

  def self.require_gem(gem); end
end

class Sorbet::Private::HiddenMethodFinder
  include ::Sorbet::Private::StepInterface
  def all_modules_and_aliases(); end

  def capture_stderr(); end

  def constant_cache(); end

  def gen_source_rbi(classes, aliases); end

  def hidden_diff(); end

  def hidden_json(); end

  def hidden_rbi(); end

  def hidden_splits(); end

  def looks_like_stub_name(name); end

  def main(); end

  def mkdir(); end

  def read_constants(); end

  def real_name(mod); end

  def remove_temp_files(); end

  def require_everything(); end

  def serialize_alias(source_entry, rbi_entry, my_klass, source_symbols, rbi_symbols); end

  def serialize_class(source_entry, rbi_entry, klass, source_symbols, rbi_symbols, source_by_name); end

  def serialize_constants(source, rbi, klass, is_singleton, source_symbols, rbi_symbols); end

  def symbols_id_to_name(entry, prefix); end

  def write_constants(); end

  def write_diff(source, rbi); end
  BLACKLIST = ::T.let(nil, ::T.untyped)
  DIFF_RBI = ::T.let(nil, ::T.untyped)
  ERRORS_RBI = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  HIDDEN_RBI = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RBI_CONSTANTS = ::T.let(nil, ::T.untyped)
  SOURCE_CONSTANTS = ::T.let(nil, ::T.untyped)
  TMP_PATH = ::T.let(nil, ::T.untyped)
  TMP_RBI = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::HiddenMethodFinder
  def self.main(); end

  def self.output_file(); end
end

module Sorbet::Private::Main
end

module Sorbet::Private::Main
  def self.cyan(msg); end

  def self.emojify(emoji, msg); end

  def self.main(argv); end

  def self.make_step(step); end

  def self.parse_command(argv); end

  def self.yellow(msg); end
end

module Sorbet::Private::RealStdlib
end

module Sorbet::Private::RealStdlib
  def self.real_ancestors(mod); end

  def self.real_constants(mod); end

  def self.real_is_a?(o, klass); end

  def self.real_name(o); end

  def self.real_object_id(o); end
end

class Sorbet::Private::RequireEverything
end

class Sorbet::Private::RequireEverything
  def self.load_bundler(); end

  def self.load_rails(); end

  def self.my_require(path, numerator, denominator); end

  def self.patch_kernel(); end

  def self.require_all_files(); end

  def self.require_everything(); end
end

class Sorbet::Private::Serialize
  def alias(base, other_name); end

  def ancestor_has_method(method, klass); end

  def blacklisted_method(method); end

  def class_or_module(class_name); end

  def comparable?(value); end

  def constant(const, value); end

  def constant_cache(); end

  def from_method(method); end

  def serialize_method(method, static=T.unsafe(nil), with_sig: T.unsafe(nil)); end

  def serialize_sig(parameters); end

  def to_sig(kind, name); end

  def valid_class_name(name); end

  def valid_method_name(name); end
  BLACKLIST_CONSTANTS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  SPECIAL_METHOD_NAMES = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::Serialize
  def self.header(typed=T.unsafe(nil), subcommand=T.unsafe(nil)); end
end

module Sorbet::Private::StepInterface
end

module Sorbet::Private::StepInterface
  def self.main(); end

  def self.output_file(); end
end

class Sorbet::Private::SuggestTyped
  include ::Sorbet::Private::StepInterface
end

class Sorbet::Private::SuggestTyped
  def self.main(); end

  def self.output_file(); end

  def self.suggest_typed(); end
end

class Sorbet::Private::SymbolEntry
  def final_name(); end

  def has_children(); end

  def has_children=(has_children); end

  def initialize(name, superclass_id, parents=T.unsafe(nil)); end

  def name(); end

  def parents(); end

  def superclass_id(); end
end

class Sorbet::Private::SymbolEntry
end

class Sorbet::Private::TodoRBI
  include ::Sorbet::Private::StepInterface
  HEADER = ::T.let(nil, ::T.untyped)
  OUTPUT = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::TodoRBI
  def self.find_all(symbol_map, symbols, parents=T.unsafe(nil)); end

  def self.main(); end

  def self.output_file(); end
end

module Sorbet::Private
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

class StopIteration
  def result(); end
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def +@(); end

  def -@(); end

  def []=(*_); end

  def casecmp?(_); end

  def encode(*_); end

  def encode!(*_); end

  def match?(*_); end

  def reverse!(); end

  def shellescape(); end

  def shellsplit(); end

  def succ!(); end

  def unicode_normalize(form=T.unsafe(nil)); end

  def unicode_normalize!(form=T.unsafe(nil)); end

  def unicode_normalized?(form=T.unsafe(nil)); end

  def unpack1(_); end

end

class StringIO
  def length(); end

  def truncate(_); end
end

class Struct
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def [](_); end

  def []=(_, _1); end

  def dig(*_); end

  def each_pair(); end

  def initialize(*_); end

  def length(); end

  def members(); end

  def select(*_); end

  def size(); end

  def to_a(); end

  def to_h(); end

  def values(); end

  def values_at(*_); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class Symbol
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def casecmp?(_); end

  def match?(*_); end

  def next(); end

end

class SystemCallError
  def errno(); end
end

class SystemExit
  def status(); end

  def success?(); end
end

module TSort
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class Thread
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def abort_on_exception(); end

  def abort_on_exception=(abort_on_exception); end

  def add_trace_func(_); end

  def backtrace(*_); end

  def backtrace_locations(*_); end

  def exit(); end

  def group(); end

  def initialize(*_); end

  def join(*_); end

  def key?(_); end

  def keys(); end

  def name(); end

  def name=(name); end

  def pending_interrupt?(*_); end

  def priority(); end

  def priority=(priority); end

  def report_on_exception(); end

  def report_on_exception=(report_on_exception); end

  def run(); end

  def safe_level(); end

  def status(); end

  def stop?(); end

  def terminate(); end

  def thread_variable?(_); end

  def thread_variable_get(_); end

  def thread_variable_set(_, _1); end

  def thread_variables(); end

  def value(); end

  def wakeup(); end
end

class Thread::Backtrace
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Thread::Backtrace::Location
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class Thread::ConditionVariable
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def broadcast(); end

  def marshal_dump(); end

  def signal(); end

  def wait(*_); end
end

class Thread::Mutex
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def lock(); end

  def locked?(); end

  def owned?(); end

  def synchronize(); end

  def try_lock(); end

  def unlock(); end
end

class Thread::Queue
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def <<(_); end

  def clear(); end

  def close(); end

  def closed?(); end

  def deq(*_); end

  def empty?(); end

  def enq(_); end

  def length(); end

  def marshal_dump(); end

  def num_waiting(); end

  def pop(*_); end

  def push(_); end

  def shift(*_); end

  def size(); end
end

class Thread::SizedQueue
  def <<(*_); end

  def enq(*_); end

  def initialize(_); end

  def max(); end

  def max=(max); end

  def push(*_); end
end

class Thread
  def self.abort_on_exception(); end

  def self.abort_on_exception=(abort_on_exception); end

  def self.exclusive(); end

  def self.exit(); end

  def self.fork(*_); end

  def self.handle_interrupt(_); end

  def self.kill(_); end

  def self.list(); end

  def self.pass(); end

  def self.pending_interrupt?(*_); end

  def self.report_on_exception(); end

  def self.report_on_exception=(report_on_exception); end

  def self.start(*_); end

  def self.stop(); end
end

class ThreadGroup
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def add(_); end

  def enclose(); end

  def enclosed?(); end

  def list(); end
  Default = ::T.let(nil, ::T.untyped)
end

class Time
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

class TracePoint
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def event(); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
end

module URI
  include ::URI::RFC2396_REGEXP
end

module URI::Escape
  def decode(*arg); end

  def encode(*arg); end

  def escape(*arg); end

  def unescape(*arg); end
end

module URI::Escape
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::Generic
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
end

class URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_registry(); end
end

class URI::HTTP
  def request_uri(); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

module URI::RFC2396_REGEXP::PATTERN
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

module URI::RFC2396_REGEXP
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end

class URI::RFC3986_Parser
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.get_encoding(label); end
end

class UnboundMethod
  include ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ObjectOverride
  def clone(); end

  def original_name(); end
end

class UncaughtThrowError
  def tag(); end

  def value(); end
end

module Warning
  def warn(_); end
end

module Warning
  extend ::Warning
  extend ::Sorbet::Private::GemGeneratorTracepoint::Tracer::ModuleOverride
end
