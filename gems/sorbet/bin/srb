#!/usr/bin/env bash
#!/usr/bin/env ruby

# A total hack, but this file is both a valid ruby script and a bash script.
=begin 2>/dev/null

# From here on in, it is all bash until the last line

help_and_exit() {
  cat <<EOF
A type checker for Ruby

Usage:
  srb                                 Same as "srb t"
  srb (init | initialize)             Initializes the \`sorbet\` directory
  srb rbi [options]                   Manage the \`sorbet\` directory
  srb (t | tc | typecheck) [options]  Typechecks the code

Options:
  -h, --help     View help for this subcommand.

For full help:
  https://sorbet.org
EOF
  exit 0
}

command=$1
shift

typecheck() {
  # We're using bash string operations here to avoid forking.
  # Using dirname / basename / etc. would mean ~15ms for each call.

  # /path/to/gems/sorbet-0.0.1/bin/srb
  srb_path="${BASH_SOURCE[0]}"
  # /path/to/gems/sorbet-0.0.1
  without_bin_srb="${srb_path%/bin/srb}"
  # -0.0.1
  version_suffix="${without_bin_srb##*/sorbet}"
  # /path/to/gems
  gems_path="${without_bin_srb%/sorbet*}"
  # /path/to/gems/sorbet-static-0.0.1-darwin-17/libexec/sorbet
  # (assumes people only have one platform-depdendent gem installed per version)
  sorbet=("$gems_path/sorbet-static$version_suffix"*/libexec/sorbet)

  "${sorbet[0]}" "$@"
}

case $command in
  "initialize" | "init")
    bundle exec srb-rbi
    ;;

  "rbi")
    bundle exec srb-rbi "$@"
    ;;

  "" | "typecheck" | "tc" | "t")
    if [ ! -d sorbet ] && [ "$#" -eq 0 ]; then
        echo "No sorbet/ directory found. Maybe you want to run 'srb init'?"
        echo
        help_and_exit
    fi
    typecheck "$@"
    ;;

  *)
    echo "Unknown command \`$command\`"
    help_and_exit
esac

exit $?
# The closing comment for ruby to be ok with this file
=end
exec(__FILE__, *ARGV)
